

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Jan  3 18:45:17 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  022E                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  022E  3420               	retlw	32
   122  022F  3420               	retlw	32
   123  0230  3420               	retlw	32
   124  0231  3420               	retlw	32
   125  0232  3420               	retlw	32
   126  0233  3420               	retlw	32
   127  0234  3420               	retlw	32
   128  0235  3420               	retlw	32
   129  0236  3420               	retlw	32
   130  0237  3420               	retlw	32
   131  0238  3420               	retlw	32
   132  0239  3420               	retlw	32
   133  023A  3420               	retlw	32
   134  023B  3420               	retlw	32
   135  023C  3420               	retlw	32
   136  023D  3420               	retlw	32
   137  023E  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0001                     _TMR0	set	1
   141  0006                     _PORTB	set	6
   142  0018                     _RCSTA	set	24
   143  0012                     _T2CON	set	18
   144  001B                     _CCPR2L	set	27
   145  001D                     _CCP2CON	set	29
   146  0015                     _CCPR1L	set	21
   147  0017                     _CCP1CON	set	23
   148  0010                     _T1CON	set	16
   149  000B                     _INTCON	set	11
   150  001A                     _RCREG	set	26
   151  0019                     _TXREG	set	25
   152  002D                     _BUZ	set	45
   153  005A                     _TMR0IF	set	90
   154  0065                     _RCIF	set	101
   155  0064                     _TXIF	set	100
   156  0099                     _SPBRG	set	153
   157  0098                     _TXSTA	set	152
   158  0085                     _TRISA	set	133
   159  0086                     _TRISB	set	134
   160  0087                     _TRISC	set	135
   161  009F                     _ADCON1	set	159
   162  0092                     _PR2	set	146
   163  0081                     _OPTION_REG	set	129
   164                           
   165                           ; #config settings
   166  0000                     
   167                           	psect	cinit
   168  0015                     start_initialization:	
   169  0015                     __initialization:	
   170                           
   171                           ; Initialize objects allocated to BANK0
   172  0015  1383               	bcf	3,7	;select IRP bank0
   173  0016  3031               	movlw	low (__pdataBANK0+17)
   174  0017  00FD               	movwf	btemp+-1
   175  0018  3002               	movlw	high __pidataBANK0
   176  0019  00FE               	movwf	btemp
   177  001A  302E               	movlw	low __pidataBANK0
   178  001B  00FF               	movwf	btemp+1
   179  001C  3020               	movlw	low __pdataBANK0
   180  001D  0084               	movwf	4
   181  001E  120A  118A  2243   	fcall	init_ram0
   182                           
   183                           ; Clear objects allocated to BANK0
   184  0021  01BB               	clrf	__pbssBANK0& (0+127)
   185  0022  01BC               	clrf	(__pbssBANK0+1)& (0+127)
   186  0023  01BD               	clrf	(__pbssBANK0+2)& (0+127)
   187  0024  01BE               	clrf	(__pbssBANK0+3)& (0+127)
   188  0025  01BF               	clrf	(__pbssBANK0+4)& (0+127)
   189  0026  01C0               	clrf	(__pbssBANK0+5)& (0+127)
   190  0027  01C1               	clrf	(__pbssBANK0+6)& (0+127)
   191  0028                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0028                     __end_of__initialization:	
   195  0028  0183               	clrf	3
   196  0029  120A  118A  282C   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssBANK0
   199  003B                     __pbssBANK0:	
   200  003B                     _T1ZOH:	
   201  003B                     	ds	2
   202  003D                     _T0PS:	
   203  003D                     	ds	1
   204  003E                     _kT0:	
   205  003E                     	ds	1
   206  003F                     _PWMZOH:	
   207  003F                     	ds	1
   208  0040                     _RUN:	
   209  0040                     	ds	1
   210  0041                     _RC:	
   211  0041                     	ds	1
   212                           
   213                           	psect	dataBANK0
   214  0020                     __pdataBANK0:	
   215  0020                     _BUF:	
   216  0020                     	ds	17
   217                           
   218                           	psect	inittext
   219  023F                     init_fetch0:	
   220                           ;	Called with low address in FSR and high address in W
   221                           
   222  023F  087E               	movf	126,w
   223  0240  008A               	movwf	10
   224  0241  087F               	movf	127,w
   225  0242  0082               	movwf	2
   226  0243                     init_ram0:	
   227                           ;Called with:
   228                           ;	high address of idata address in btemp 
   229                           ;	low address of idata address in btemp+1 
   230                           ;	low address of data in FSR
   231                           ;	high address + 1 of data in btemp-1
   232                           
   233  0243  223F  120A  118A   	fcall	init_fetch0
   234  0246  0080               	movwf	0
   235  0247  0A84               	incf	4,f
   236  0248  0804               	movf	4,w
   237  0249  067D               	xorwf	125,w
   238  024A  1903               	btfsc	3,2
   239  024B  3400               	retlw	0
   240  024C  0AFF               	incf	127,f
   241  024D  1903               	btfsc	3,2
   242  024E  0AFE               	incf	126,f
   243  024F  2A43               	goto	init_ram0
   244                           
   245                           	psect	cstackCOMMON
   246  0070                     __pcstackCOMMON:	
   247  0070                     ?_beep:	
   248  0070                     ?_rsend:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_rsget:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_read_tmr1:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_write:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_sampling:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?i1_rsend:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ??i1_rsend:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_main:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     i1rsend@msg:	
   273                           ; 2 bytes @ 0x0
   274                           
   275                           
   276                           ; 1 bytes @ 0x0
   277  0070                     	ds	1
   278  0071                     ??_sampling:	
   279                           
   280                           ; 1 bytes @ 0x1
   281  0071                     	ds	5
   282  0076                     ??_beep:	
   283  0076                     ??_rsend:	
   284                           ; 1 bytes @ 0x6
   285                           
   286  0076                     ??_rsget:	
   287                           ; 1 bytes @ 0x6
   288                           
   289  0076                     ??_write:	
   290                           ; 1 bytes @ 0x6
   291                           
   292  0076                     rsend@msg:	
   293                           ; 1 bytes @ 0x6
   294                           
   295  0076                     write@duty:	
   296                           ; 1 bytes @ 0x6
   297                           
   298                           
   299                           ; 1 bytes @ 0x6
   300  0076                     	ds	1
   301  0077                     ??_read_tmr1:	
   302                           
   303                           	psect	cstackBANK0
   304  0031                     __pcstackBANK0:	
   305                           ; 1 bytes @ 0x7
   306                           
   307  0031                     beep@dash:	
   308                           
   309                           ; 1 bytes @ 0x0
   310  0031                     	ds	1
   311  0032                     beep@j:	
   312                           
   313                           ; 2 bytes @ 0x1
   314  0032                     	ds	2
   315  0034                     beep@j_57:	
   316                           
   317                           ; 2 bytes @ 0x3
   318  0034                     	ds	2
   319  0036                     ??_main:	
   320                           
   321                           ; 1 bytes @ 0x5
   322  0036                     	ds	2
   323  0038                     main@x:	
   324                           
   325                           ; 1 bytes @ 0x7
   326  0038                     	ds	1
   327  0039                     main@msg:	
   328                           
   329                           ; 1 bytes @ 0x8
   330  0039                     	ds	1
   331  003A                     main@cmd:	
   332                           
   333                           ; 1 bytes @ 0x9
   334  003A                     	ds	1
   335                           
   336                           	psect	maintext
   337  002C                     __pmaintext:	
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 87 in file "main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;  cmd             1    9[BANK0 ] unsigned char 
   348 ;;  msg             1    8[BANK0 ] unsigned char 
   349 ;;  x               1    7[BANK0 ] unsigned char 
   350 ;; Return value:  Size  Location     Type
   351 ;;                  2  110[None  ] int 
   352 ;; Registers used:
   353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : B00/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   359 ;;      Params:         0       0       0       0       0
   360 ;;      Locals:         0       3       0       0       0
   361 ;;      Temps:          0       2       0       0       0
   362 ;;      Totals:         0       5       0       0       0
   363 ;;Total ram usage:        5 bytes
   364 ;; Hardware stack levels required when called:    4
   365 ;; This function calls:
   366 ;;		_beep
   367 ;;		_read_tmr1
   368 ;;		_rsget
   369 ;;		_write
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           
   376                           ;psect for function _main
   377  002C                     _main:	
   378                           
   379                           ;main.c: 88: OPTION_REG = 0x83;
   380                           
   381                           ;incstack = 0
   382                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   383  002C  3083               	movlw	131
   384  002D  1683               	bsf	3,5	;RP0=1, select bank1
   385  002E  1303               	bcf	3,6	;RP1=0, select bank1
   386  002F  0081               	movwf	1	;volatile
   387                           
   388                           ;main.c: 89: INTCON = 0x80;
   389  0030  3080               	movlw	128
   390  0031  008B               	movwf	11	;volatile
   391                           
   392                           ;main.c: 90: T1CON = 0x03;
   393  0032  3003               	movlw	3
   394  0033  1283               	bcf	3,5	;RP0=0, select bank0
   395  0034  1303               	bcf	3,6	;RP1=0, select bank0
   396  0035  0090               	movwf	16	;volatile
   397                           
   398                           ;main.c: 91: CCP1CON = 0x0F;
   399  0036  300F               	movlw	15
   400  0037  0097               	movwf	23	;volatile
   401                           
   402                           ;main.c: 92: CCPR1L = 0;
   403  0038  0195               	clrf	21	;volatile
   404                           
   405                           ;main.c: 93: CCP2CON = 0x0F;
   406  0039  300F               	movlw	15
   407  003A  009D               	movwf	29	;volatile
   408                           
   409                           ;main.c: 94: CCPR2L = 0;
   410  003B  019B               	clrf	27	;volatile
   411                           
   412                           ;main.c: 95: PR2 = 100;
   413  003C  3064               	movlw	100
   414  003D  1683               	bsf	3,5	;RP0=1, select bank1
   415  003E  1303               	bcf	3,6	;RP1=0, select bank1
   416  003F  0092               	movwf	18	;volatile
   417                           
   418                           ;main.c: 96: T2CON = 0x04;
   419  0040  3004               	movlw	4
   420  0041  1283               	bcf	3,5	;RP0=0, select bank0
   421  0042  1303               	bcf	3,6	;RP1=0, select bank0
   422  0043  0092               	movwf	18	;volatile
   423                           
   424                           ;main.c: 97: ADCON1 = 0x05;
   425  0044  3005               	movlw	5
   426  0045  1683               	bsf	3,5	;RP0=1, select bank1
   427  0046  1303               	bcf	3,6	;RP1=0, select bank1
   428  0047  009F               	movwf	31	;volatile
   429                           
   430                           ;main.c: 98: TRISC = 0xFD;
   431  0048  30FD               	movlw	253
   432  0049  0087               	movwf	7	;volatile
   433                           
   434                           ;main.c: 99: TRISB = 0xFF;
   435  004A  30FF               	movlw	255
   436  004B  0086               	movwf	6	;volatile
   437                           
   438                           ;main.c: 100: TRISA = 0xDF;
   439  004C  30DF               	movlw	223
   440  004D  0085               	movwf	5	;volatile
   441                           
   442                           ;main.c: 101: RCSTA = 0x90;
   443  004E  3090               	movlw	144
   444  004F  1283               	bcf	3,5	;RP0=0, select bank0
   445  0050  1303               	bcf	3,6	;RP1=0, select bank0
   446  0051  0098               	movwf	24	;volatile
   447                           
   448                           ;main.c: 102: TXSTA = 0x24;
   449  0052  3024               	movlw	36
   450  0053  1683               	bsf	3,5	;RP0=1, select bank1
   451  0054  1303               	bcf	3,6	;RP1=0, select bank1
   452  0055  0098               	movwf	24	;volatile
   453                           
   454                           ;main.c: 103: SPBRG = 12;
   455  0056  300C               	movlw	12
   456  0057  0099               	movwf	25	;volatile
   457                           
   458                           ;main.c: 107: if (PORTB & 0x02) {
   459  0058  1283               	bcf	3,5	;RP0=0, select bank0
   460  0059  1303               	bcf	3,6	;RP1=0, select bank0
   461  005A  1C86               	btfss	6,1	;volatile
   462  005B  28E7               	goto	l914
   463                           
   464                           ;main.c: 108: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   465  005C  3000               	movlw	0
   466  005D  120A  118A  2170  120A  118A  	fcall	_beep
   467  0062  3082               	movlw	130
   468  0063  1283               	bcf	3,5	;RP0=0, select bank0
   469  0064  1303               	bcf	3,6	;RP1=0, select bank0
   470  0065  00B7               	movwf	??_main+1
   471  0066  30DD               	movlw	221
   472  0067  00B6               	movwf	??_main
   473  0068                     u377:	
   474  0068  0BB6               	decfsz	??_main,f
   475  0069  2868               	goto	u377
   476  006A  0BB7               	decfsz	??_main+1,f
   477  006B  2868               	goto	u377
   478                           
   479                           ;main.c: 109: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   480  006C  3000               	movlw	0
   481  006D  120A  118A  2170  120A  118A  	fcall	_beep
   482  0072  3082               	movlw	130
   483  0073  1283               	bcf	3,5	;RP0=0, select bank0
   484  0074  1303               	bcf	3,6	;RP1=0, select bank0
   485  0075  00B7               	movwf	??_main+1
   486  0076  30DD               	movlw	221
   487  0077  00B6               	movwf	??_main
   488  0078                     u387:	
   489  0078  0BB6               	decfsz	??_main,f
   490  0079  2878               	goto	u387
   491  007A  0BB7               	decfsz	??_main+1,f
   492  007B  2878               	goto	u387
   493                           
   494                           ;main.c: 110: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   495  007C  3000               	movlw	0
   496  007D  120A  118A  2170  120A  118A  	fcall	_beep
   497  0082  3082               	movlw	130
   498  0083  1283               	bcf	3,5	;RP0=0, select bank0
   499  0084  1303               	bcf	3,6	;RP1=0, select bank0
   500  0085  00B7               	movwf	??_main+1
   501  0086  30DD               	movlw	221
   502  0087  00B6               	movwf	??_main
   503  0088                     u397:	
   504  0088  0BB6               	decfsz	??_main,f
   505  0089  2888               	goto	u397
   506  008A  0BB7               	decfsz	??_main+1,f
   507  008B  2888               	goto	u397
   508  008C  28CC               	goto	l886
   509  008D                     l892:	
   510                           ;main.c: 116: case '7': read_tmr1(); break;
   511                           
   512                           ;main.c: 115: switch (BUF[0]) {
   513                           
   514  008D  120A  118A  21FD  120A  118A  	fcall	_read_tmr1
   515  0092  28C9               	goto	l908
   516  0093                     l894:	
   517                           ;main.c: 117: case '5': write(BUF[1]); break;
   518                           
   519  0093  1283               	bcf	3,5	;RP0=0, select bank0
   520  0094  1303               	bcf	3,6	;RP1=0, select bank0
   521  0095  0821               	movf	_BUF+1,w
   522  0096  120A  118A  2218  120A  118A  	fcall	_write
   523  009B  28C9               	goto	l908
   524  009C                     l896:	
   525                           ;main.c: 118: case '1': write(BUF[1]); read_tmr1(); break;
   526                           
   527  009C  1283               	bcf	3,5	;RP0=0, select bank0
   528  009D  1303               	bcf	3,6	;RP1=0, select bank0
   529  009E  0821               	movf	_BUF+1,w
   530  009F  120A  118A  2218  120A  118A  	fcall	_write
   531  00A4  120A  118A  21FD  120A  118A  	fcall	_read_tmr1
   532  00A9  28C9               	goto	l908
   533  00AA                     l898:	
   534                           ;main.c: 119: case '2': write(0); beep(0); TMR1 = 0; break;
   535                           
   536  00AA  3000               	movlw	0
   537  00AB  120A  118A  2218  120A  118A  	fcall	_write
   538  00B0  3000               	movlw	0
   539  00B1  120A  118A  2170  120A  118A  	fcall	_beep
   540  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   541  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   542  00B8  018E               	clrf	14	;volatile
   543  00B9  018F               	clrf	15	;volatile
   544                           
   545                           ;main.c: 120: }
   546  00BA  28C9               	goto	l908
   547  00BB                     l906:	
   548  00BB  0820               	movf	_BUF,w
   549                           
   550                           ; Switch size 1, requested type "space"
   551                           ; Number of cases is 4, Range of values is 49 to 55
   552                           ; switch strategies available:
   553                           ; Name         Instructions Cycles
   554                           ; simple_byte           13     7 (average)
   555                           ; direct_byte           32    11 (fixed)
   556                           ; jumptable            263     9 (fixed)
   557                           ;	Chosen strategy is simple_byte
   558  00BC  3A31               	xorlw	49	; case 49
   559  00BD  1903               	skipnz
   560  00BE  289C               	goto	l896
   561  00BF  3A03               	xorlw	3	; case 50
   562  00C0  1903               	skipnz
   563  00C1  28AA               	goto	l898
   564  00C2  3A07               	xorlw	7	; case 53
   565  00C3  1903               	skipnz
   566  00C4  2893               	goto	l894
   567  00C5  3A02               	xorlw	2	; case 55
   568  00C6  1903               	skipnz
   569  00C7  288D               	goto	l892
   570  00C8  28C9               	goto	l908
   571  00C9                     l908:	
   572                           
   573                           ;main.c: 121: RC = 0;
   574  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   575  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   576  00CB  01C1               	clrf	_RC
   577  00CC                     l886:	
   578                           ;main.c: 111: while (1) {
   579                           
   580                           ;main.c: 122: }
   581                           
   582                           
   583                           ;main.c: 113: char x = rsget();
   584  00CC  120A  118A  2260  120A  118A  	fcall	_rsget
   585  00D1  1283               	bcf	3,5	;RP0=0, select bank0
   586  00D2  1303               	bcf	3,6	;RP1=0, select bank0
   587  00D3  00B6               	movwf	??_main
   588  00D4  0836               	movf	??_main,w
   589  00D5  00B8               	movwf	main@x
   590                           
   591                           ;main.c: 114: if (x == '\n') {
   592  00D6  300A               	movlw	10
   593  00D7  0638               	xorwf	main@x,w
   594  00D8  1903               	btfsc	3,2
   595  00D9  28BB               	goto	l906
   596                           
   597                           ;main.c: 123: else {
   598                           ;main.c: 124: BUF[RC] = x;
   599  00DA  0838               	movf	main@x,w
   600  00DB  00B6               	movwf	??_main
   601  00DC  0841               	movf	_RC,w
   602  00DD  3E20               	addlw	(low (_BUF| 0))& (0+255)
   603  00DE  0084               	movwf	4
   604  00DF  0836               	movf	??_main,w
   605  00E0  1383               	bcf	3,7	;select IRP bank0
   606  00E1  0080               	movwf	0
   607                           
   608                           ;main.c: 125: RC++;
   609  00E2  3001               	movlw	1
   610  00E3  00B6               	movwf	??_main
   611  00E4  0836               	movf	??_main,w
   612  00E5  07C1               	addwf	_RC,f
   613  00E6  28CC               	goto	l886
   614  00E7                     l914:	
   615                           ;main.c: 126: }
   616                           ;main.c: 127: }
   617                           ;main.c: 128: }
   618                           
   619                           
   620                           ;main.c: 130: else {
   621                           ;main.c: 131: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   622  00E7  3000               	movlw	0
   623  00E8  120A  118A  2170  120A  118A  	fcall	_beep
   624  00ED  3082               	movlw	130
   625  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   626  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   627  00F0  00B7               	movwf	??_main+1
   628  00F1  30DD               	movlw	221
   629  00F2  00B6               	movwf	??_main
   630  00F3                     u407:	
   631  00F3  0BB6               	decfsz	??_main,f
   632  00F4  28F3               	goto	u407
   633  00F5  0BB7               	decfsz	??_main+1,f
   634  00F6  28F3               	goto	u407
   635                           
   636                           ;main.c: 132: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   637  00F7  3001               	movlw	1
   638  00F8  120A  118A  2170  120A  118A  	fcall	_beep
   639  00FD  3082               	movlw	130
   640  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   641  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   642  0100  00B7               	movwf	??_main+1
   643  0101  30DD               	movlw	221
   644  0102  00B6               	movwf	??_main
   645  0103                     u417:	
   646  0103  0BB6               	decfsz	??_main,f
   647  0104  2903               	goto	u417
   648  0105  0BB7               	decfsz	??_main+1,f
   649  0106  2903               	goto	u417
   650  0107  2937               	goto	l920
   651  0108                     l926:	
   652                           
   653                           ;main.c: 138: RUN = 1;
   654  0108  3001               	movlw	1
   655  0109  00B6               	movwf	??_main
   656  010A  0836               	movf	??_main,w
   657  010B  00C0               	movwf	_RUN	;volatile
   658                           
   659                           ;main.c: 139: write(msg);
   660  010C  0839               	movf	main@msg,w
   661  010D  120A  118A  2218  120A  118A  	fcall	_write
   662                           
   663                           ;main.c: 140: }
   664  0112  2937               	goto	l920
   665  0113                     l932:	
   666                           
   667                           ;main.c: 142: INTCON &= 0xDF;
   668  0113  30DF               	movlw	223
   669  0114  00B6               	movwf	??_main
   670  0115  0836               	movf	??_main,w
   671  0116  058B               	andwf	11,f	;volatile
   672                           
   673                           ;main.c: 143: read_tmr1();
   674  0117  120A  118A  21FD  120A  118A  	fcall	_read_tmr1
   675                           
   676                           ;main.c: 144: write(msg);
   677  011C  1283               	bcf	3,5	;RP0=0, select bank0
   678  011D  1303               	bcf	3,6	;RP1=0, select bank0
   679  011E  0839               	movf	main@msg,w
   680  011F  120A  118A  2218  120A  118A  	fcall	_write
   681                           
   682                           ;main.c: 145: }
   683  0124  2937               	goto	l920
   684  0125                     l940:	
   685                           
   686                           ;main.c: 147: PWM = 0;
   687  0125  019B               	clrf	27
   688                           
   689                           ;main.c: 148: PWMZOH = 0;
   690  0126  01BF               	clrf	_PWMZOH
   691                           
   692                           ;main.c: 149: T1CON &= 0xFE;
   693  0127  30FE               	movlw	254
   694  0128  00B6               	movwf	??_main
   695  0129  0836               	movf	??_main,w
   696  012A  0590               	andwf	16,f	;volatile
   697                           
   698                           ;main.c: 150: INTCON &= 0xDF;
   699  012B  30DF               	movlw	223
   700  012C  00B6               	movwf	??_main
   701  012D  0836               	movf	??_main,w
   702  012E  058B               	andwf	11,f	;volatile
   703                           
   704                           ;main.c: 151: T1ZOH = 0;
   705  012F  01BB               	clrf	_T1ZOH	;volatile
   706  0130  01BC               	clrf	_T1ZOH+1	;volatile
   707                           
   708                           ;main.c: 152: beep(0);
   709  0131  3000               	movlw	0
   710  0132  120A  118A  2170  120A  118A  	fcall	_beep
   711  0137                     l920:	
   712                           ;main.c: 133: while (1) {
   713                           
   714                           ;main.c: 153: }
   715                           
   716                           
   717                           ;main.c: 135: char cmd = rsget();
   718  0137  120A  118A  2260  120A  118A  	fcall	_rsget
   719  013C  1283               	bcf	3,5	;RP0=0, select bank0
   720  013D  1303               	bcf	3,6	;RP1=0, select bank0
   721  013E  00B6               	movwf	??_main
   722  013F  0836               	movf	??_main,w
   723  0140  00BA               	movwf	main@cmd
   724                           
   725                           ;main.c: 136: char msg = rsget();
   726  0141  120A  118A  2260  120A  118A  	fcall	_rsget
   727  0146  1283               	bcf	3,5	;RP0=0, select bank0
   728  0147  1303               	bcf	3,6	;RP1=0, select bank0
   729  0148  00B6               	movwf	??_main
   730  0149  0836               	movf	??_main,w
   731  014A  00B9               	movwf	main@msg
   732                           
   733                           ;main.c: 137: if (cmd == 'x') {
   734  014B  3078               	movlw	120
   735  014C  063A               	xorwf	main@cmd,w
   736  014D  1903               	btfsc	3,2
   737  014E  2908               	goto	l926
   738                           
   739                           ;main.c: 141: else if (cmd == 'r') {
   740  014F  3072               	movlw	114
   741  0150  1283               	bcf	3,5	;RP0=0, select bank0
   742  0151  1303               	bcf	3,6	;RP1=0, select bank0
   743  0152  063A               	xorwf	main@cmd,w
   744  0153  1903               	btfsc	3,2
   745  0154  2913               	goto	l932
   746                           
   747                           ;main.c: 146: else if (cmd == 's') {
   748  0155  3073               	movlw	115
   749  0156  1283               	bcf	3,5	;RP0=0, select bank0
   750  0157  1303               	bcf	3,6	;RP1=0, select bank0
   751  0158  063A               	xorwf	main@cmd,w
   752  0159  1903               	btfsc	3,2
   753  015A  2925               	goto	l940
   754                           
   755                           ;main.c: 154: else if (cmd == 't') {
   756  015B  3074               	movlw	116
   757  015C  1283               	bcf	3,5	;RP0=0, select bank0
   758  015D  1303               	bcf	3,6	;RP1=0, select bank0
   759  015E  063A               	xorwf	main@cmd,w
   760  015F  1D03               	btfss	3,2
   761  0160  2937               	goto	l920
   762                           
   763                           ;main.c: 155: T0PS = msg;
   764  0161  0839               	movf	main@msg,w
   765  0162  00B6               	movwf	??_main
   766  0163  0836               	movf	??_main,w
   767  0164  00BD               	movwf	_T0PS
   768                           
   769                           ;main.c: 156: kT0 = T0PS;
   770  0165  083D               	movf	_T0PS,w
   771  0166  00B6               	movwf	??_main
   772  0167  0836               	movf	??_main,w
   773  0168  00BE               	movwf	_kT0
   774                           
   775                           ;main.c: 157: TMR1 = 0;
   776  0169  018E               	clrf	14	;volatile
   777  016A  018F               	clrf	15	;volatile
   778                           
   779                           ;main.c: 158: T1CON |= 0x01;
   780  016B  1410               	bsf	16,0	;volatile
   781                           
   782                           ;main.c: 159: TMR0 = 255;
   783  016C  30FF               	movlw	255
   784  016D  0081               	movwf	1	;volatile
   785  016E  168B               	bsf	11,5	;# 
   786  016F  2937               	goto	l920
   787  0170                     __end_of_main:	
   788                           ;main.c: 161: }
   789                           ;main.c: 162: }
   790                           ;main.c: 163: }
   791                           ;main.c: 164: return 0;
   792                           ;	Return value of _main is never used
   793                           
   794                           
   795                           	psect	text1
   796  0218                     __ptext1:	
   797 ;; *************** function _write *****************
   798 ;; Defined at:
   799 ;;		line 61 in file "main.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  duty            1    wreg     char 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  duty            1    6[COMMON] char 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, status,2
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   813 ;;      Params:         0       0       0       0       0
   814 ;;      Locals:         1       0       0       0       0
   815 ;;      Temps:          0       0       0       0       0
   816 ;;      Totals:         1       0       0       0       0
   817 ;;Total ram usage:        1 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    2
   820 ;; This function calls:
   821 ;;		Nothing
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           
   828                           ;psect for function _write
   829  0218                     _write:	
   830                           
   831                           ;incstack = 0
   832                           ; Regs used in _write: [wreg+status,2]
   833                           ;write@duty stored from wreg
   834  0218  00F6               	movwf	write@duty
   835                           
   836                           ;main.c: 62: if (duty > 100) PWM = 100;
   837  0219  0876               	movf	write@duty,w
   838  021A  3A80               	xorlw	128
   839  021B  3E1B               	addlw	-229
   840  021C  1C03               	skipc
   841  021D  2A23               	goto	l87
   842  021E  3064               	movlw	100
   843  021F  1283               	bcf	3,5	;RP0=0, select bank0
   844  0220  1303               	bcf	3,6	;RP1=0, select bank0
   845  0221  009B               	movwf	27
   846  0222  0008               	return
   847  0223                     l87:	
   848                           
   849                           ;main.c: 63: else if (duty < 0) PWM = 0;
   850  0223  1FF6               	btfss	write@duty,7
   851  0224  2A29               	goto	l824
   852  0225  1283               	bcf	3,5	;RP0=0, select bank0
   853  0226  1303               	bcf	3,6	;RP1=0, select bank0
   854  0227  019B               	clrf	27
   855  0228  0008               	return
   856  0229                     l824:	
   857                           
   858                           ;main.c: 64: else PWM = duty;
   859  0229  0876               	movf	write@duty,w
   860  022A  1283               	bcf	3,5	;RP0=0, select bank0
   861  022B  1303               	bcf	3,6	;RP1=0, select bank0
   862  022C  009B               	movwf	27
   863  022D  0008               	return
   864  022E                     __end_of_write:	
   865                           
   866                           	psect	text2
   867  0260                     __ptext2:	
   868 ;; *************** function _rsget *****************
   869 ;; Defined at:
   870 ;;		line 47 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      unsigned char 
   877 ;; Registers used:
   878 ;;		wreg
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       0       0       0       0
   885 ;;      Locals:         0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0
   887 ;;      Totals:         0       0       0       0       0
   888 ;;Total ram usage:        0 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    2
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           
   899                           ;psect for function _rsget
   900  0260                     _rsget:	
   901  0260                     l78:	
   902                           ;main.c: 48: while (!RCIF) continue;
   903                           
   904                           ;incstack = 0
   905                           ; Regs used in _rsget: [wreg]
   906                           
   907  0260  1283               	bcf	3,5	;RP0=0, select bank0
   908  0261  1303               	bcf	3,6	;RP1=0, select bank0
   909  0262  1E8C               	btfss	12,5	;volatile
   910  0263  2A60               	goto	l78
   911                           
   912                           ;main.c: 49: return RCREG;
   913  0264  081A               	movf	26,w	;volatile
   914  0265  0008               	return
   915  0266                     __end_of_rsget:	
   916                           
   917                           	psect	text3
   918  01FD                     __ptext3:	
   919 ;; *************** function _read_tmr1 *****************
   920 ;; Defined at:
   921 ;;		line 54 in file "main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0, pclath, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0
   938 ;;      Totals:         0       0       0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    3
   942 ;; This function calls:
   943 ;;		_rsend
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           
   950                           ;psect for function _read_tmr1
   951  01FD                     _read_tmr1:	
   952                           
   953                           ;main.c: 55: T1ZOH = TMR1;
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   957  01FD  1283               	bcf	3,5	;RP0=0, select bank0
   958  01FE  1303               	bcf	3,6	;RP1=0, select bank0
   959  01FF  080F               	movf	15,w	;volatile
   960  0200  00BC               	movwf	_T1ZOH+1	;volatile
   961  0201  080E               	movf	14,w	;volatile
   962  0202  00BB               	movwf	_T1ZOH	;volatile
   963                           
   964                           ;main.c: 56: rsend(T1ZOH >> 8);
   965  0203  083C               	movf	_T1ZOH+1,w	;volatile
   966  0204  120A  118A  2250  120A  118A  	fcall	_rsend
   967                           
   968                           ;main.c: 57: rsend(T1ZOH);
   969  0209  1283               	bcf	3,5	;RP0=0, select bank0
   970  020A  1303               	bcf	3,6	;RP1=0, select bank0
   971  020B  083B               	movf	_T1ZOH,w	;volatile
   972  020C  120A  118A  2250   	fcall	_rsend
   973                           
   974                           ;main.c: 58: TMR1 -= T1ZOH;
   975  020F  1283               	bcf	3,5	;RP0=0, select bank0
   976  0210  1303               	bcf	3,6	;RP1=0, select bank0
   977  0211  083B               	movf	_T1ZOH,w	;volatile
   978  0212  028E               	subwf	14,f	;volatile
   979  0213  083C               	movf	_T1ZOH+1,w	;volatile
   980  0214  1C03               	skipc
   981  0215  038F               	decf	15,f	;volatile
   982  0216  028F               	subwf	15,f	;volatile
   983  0217  0008               	return
   984  0218                     __end_of_read_tmr1:	
   985                           
   986                           	psect	text4
   987  0250                     __ptext4:	
   988 ;; *************** function _rsend *****************
   989 ;; Defined at:
   990 ;;		line 42 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  msg             1    wreg     unsigned char 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  msg             1    6[COMMON] unsigned char 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1004 ;;      Params:         0       0       0       0       0
  1005 ;;      Locals:         1       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0
  1007 ;;      Totals:         1       0       0       0       0
  1008 ;;Total ram usage:        1 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    2
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_read_tmr1
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           
  1019                           ;psect for function _rsend
  1020  0250                     _rsend:	
  1021                           
  1022                           ;incstack = 0
  1023                           ; Regs used in _rsend: [wreg]
  1024                           ;rsend@msg stored from wreg
  1025  0250  00F6               	movwf	rsend@msg
  1026  0251                     l72:	
  1027                           ;main.c: 43: while (!TXIF) continue;
  1028                           
  1029  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1031  0253  1E0C               	btfss	12,4	;volatile
  1032  0254  2A51               	goto	l72
  1033                           
  1034                           ;main.c: 44: TXREG = msg;
  1035  0255  0876               	movf	rsend@msg,w
  1036  0256  0099               	movwf	25	;volatile
  1037  0257  0008               	return
  1038  0258                     __end_of_rsend:	
  1039                           
  1040                           	psect	text5
  1041  0170                     __ptext5:	
  1042 ;; *************** function _beep *****************
  1043 ;; Defined at:
  1044 ;;		line 31 in file "main.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  dash            1    wreg     unsigned char 
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;  dash            1    0[BANK0 ] unsigned char 
  1049 ;;  j               2    3[BANK0 ] int 
  1050 ;;  j               2    1[BANK0 ] int 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  1    wreg      void 
  1053 ;; Registers used:
  1054 ;;		wreg, status,2, status,0, btemp+1
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1060 ;;      Params:         0       0       0       0       0
  1061 ;;      Locals:         0       5       0       0       0
  1062 ;;      Temps:          1       0       0       0       0
  1063 ;;      Totals:         1       5       0       0       0
  1064 ;;Total ram usage:        6 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    2
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           
  1075                           ;psect for function _beep
  1076  0170                     _beep:	
  1077                           
  1078                           ;incstack = 0
  1079                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1080                           ;beep@dash stored from wreg
  1081  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1082  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1083  0172  00B1               	movwf	beep@dash
  1084                           
  1085                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1086  0173  0831               	movf	beep@dash,w
  1087  0174  1D03               	btfss	3,2
  1088  0175  299E               	goto	l794
  1089  0176  01B2               	clrf	beep@j
  1090  0177  01B3               	clrf	beep@j+1
  1091  0178                     L1:	
  1092  0178  0833               	movf	beep@j+1,w
  1093  0179  3A80               	xorlw	128
  1094  017A  00FF               	movwf	127
  1095  017B  3080               	movlw	128
  1096  017C  027F               	subwf	127,w
  1097  017D  1D03               	skipz
  1098  017E  2981               	goto	u215
  1099  017F  3064               	movlw	100
  1100  0180  0232               	subwf	beep@j,w
  1101  0181                     u215:	
  1102  0181  1803               	btfsc	3,0
  1103  0182  0008               	return
  1104                           
  1105                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1106  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0185  1685               	bsf	5,5
  1109  0186  30C7               	movlw	199
  1110  0187  00F6               	movwf	??_beep
  1111  0188                     u427:	
  1112  0188  2989               	nop2
  1113  0189  0BF6               	decfsz	??_beep,f
  1114  018A  2988               	goto	u427
  1115  018B  298C               	nop2
  1116  018C  298D               	nop2
  1117                           
  1118                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1119  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1120  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1121  018F  1285               	bcf	5,5
  1122  0190  30A6               	movlw	166
  1123  0191  00F6               	movwf	??_beep
  1124  0192                     u437:	
  1125  0192  0BF6               	decfsz	??_beep,f
  1126  0193  2992               	goto	u437
  1127  0194  0000               	nop
  1128  0195  3001               	movlw	1
  1129  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1130  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1131  0198  07B2               	addwf	beep@j,f
  1132  0199  1803               	skipnc
  1133  019A  0AB3               	incf	beep@j+1,f
  1134  019B  3000               	movlw	0
  1135  019C  07B3               	addwf	beep@j+1,f
  1136  019D  2978               	goto	L1
  1137  019E                     l794:	
  1138                           ;main.c: 35: }
  1139                           
  1140                           
  1141                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1142  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1143  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1144  01A0  01B4               	clrf	beep@j_57
  1145  01A1  01B5               	clrf	beep@j_57+1
  1146  01A2                     L2:	
  1147  01A2  0835               	movf	beep@j_57+1,w
  1148  01A3  3A80               	xorlw	128
  1149  01A4  00FF               	movwf	127
  1150  01A5  3081               	movlw	129
  1151  01A6  027F               	subwf	127,w
  1152  01A7  1D03               	skipz
  1153  01A8  29AB               	goto	u235
  1154  01A9  30F4               	movlw	244
  1155  01AA  0234               	subwf	beep@j_57,w
  1156  01AB                     u235:	
  1157  01AB  1803               	btfsc	3,0
  1158  01AC  0008               	return
  1159                           
  1160                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1161  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1162  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1163  01AF  1685               	bsf	5,5
  1164  01B0  30C7               	movlw	199
  1165  01B1  00F6               	movwf	??_beep
  1166  01B2                     u447:	
  1167  01B2  29B3               	nop2
  1168  01B3  0BF6               	decfsz	??_beep,f
  1169  01B4  29B2               	goto	u447
  1170  01B5  29B6               	nop2
  1171  01B6  29B7               	nop2
  1172                           
  1173                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1174  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1175  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1176  01B9  1285               	bcf	5,5
  1177  01BA  30A6               	movlw	166
  1178  01BB  00F6               	movwf	??_beep
  1179  01BC                     u457:	
  1180  01BC  0BF6               	decfsz	??_beep,f
  1181  01BD  29BC               	goto	u457
  1182  01BE  0000               	nop
  1183  01BF  3001               	movlw	1
  1184  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1185  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1186  01C2  07B4               	addwf	beep@j_57,f
  1187  01C3  1803               	skipnc
  1188  01C4  0AB5               	incf	beep@j_57+1,f
  1189  01C5  3000               	movlw	0
  1190  01C6  07B5               	addwf	beep@j_57+1,f
  1191  01C7  29A2               	goto	L2
  1192  01C8                     __end_of_beep:	
  1193                           
  1194                           	psect	text6
  1195  01C8                     __ptext6:	
  1196 ;; *************** function _sampling *****************
  1197 ;; Defined at:
  1198 ;;		line 71 in file "main.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;		None
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         0       0       0       0       0
  1213 ;;      Locals:         0       0       0       0       0
  1214 ;;      Temps:          5       0       0       0       0
  1215 ;;      Totals:         5       0       0       0       0
  1216 ;;Total ram usage:        5 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    1
  1219 ;; This function calls:
  1220 ;;		i1_rsend
  1221 ;; This function is called by:
  1222 ;;		Interrupt level 1
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           
  1227                           ;psect for function _sampling
  1228  01C8                     _sampling:	
  1229                           
  1230                           ;main.c: 72: kT0++;
  1231  01C8  3001               	movlw	1
  1232  01C9  00F1               	movwf	??_sampling
  1233  01CA  0871               	movf	??_sampling,w
  1234  01CB  07BE               	addwf	_kT0,f
  1235                           
  1236                           ;main.c: 73: if (kT0 > T0PS) {
  1237  01CC  083E               	movf	_kT0,w
  1238  01CD  023D               	subwf	_T0PS,w
  1239  01CE  1803               	skipnc
  1240  01CF  29F1               	goto	i1l848
  1241                           
  1242                           ;main.c: 74: kT0 = 0;
  1243  01D0  01BE               	clrf	_kT0
  1244                           
  1245                           ;main.c: 75: T1ZOH = TMR1;
  1246  01D1  080F               	movf	15,w	;volatile
  1247  01D2  00BC               	movwf	_T1ZOH+1	;volatile
  1248  01D3  080E               	movf	14,w	;volatile
  1249  01D4  00BB               	movwf	_T1ZOH	;volatile
  1250                           
  1251                           ;main.c: 76: PWM = PWMZOH;
  1252  01D5  083F               	movf	_PWMZOH,w
  1253  01D6  009B               	movwf	27
  1254                           
  1255                           ;main.c: 77: TMR1 -= T1ZOH;
  1256  01D7  083B               	movf	_T1ZOH,w	;volatile
  1257  01D8  028E               	subwf	14,f	;volatile
  1258  01D9  083C               	movf	_T1ZOH+1,w	;volatile
  1259  01DA  1C03               	skipc
  1260  01DB  038F               	decf	15,f	;volatile
  1261  01DC  028F               	subwf	15,f	;volatile
  1262                           
  1263                           ;main.c: 78: if (RUN) {
  1264  01DD  0840               	movf	_RUN,w	;volatile
  1265  01DE  1903               	btfsc	3,2
  1266  01DF  29F1               	goto	i1l848
  1267                           
  1268                           ;main.c: 79: rsend(T1ZOH);
  1269  01E0  083B               	movf	_T1ZOH,w	;volatile
  1270  01E1  120A  118A  2258  120A  118A  	fcall	i1_rsend
  1271                           
  1272                           ;main.c: 80: rsend(T1ZOH >> 8);
  1273  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1274  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  1275  01E8  083C               	movf	_T1ZOH+1,w	;volatile
  1276  01E9  120A  118A  2258  120A  118A  	fcall	i1_rsend
  1277                           
  1278                           ;main.c: 81: RUN = 0;
  1279  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1280  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1281  01F0  01C0               	clrf	_RUN	;volatile
  1282  01F1                     i1l848:	
  1283                           
  1284                           ;main.c: 82: }
  1285                           ;main.c: 83: }
  1286                           ;main.c: 84: TMR0IF = 0;
  1287  01F1  110B               	bcf	11,2	;volatile
  1288  01F2  0875               	movf	??_sampling+4,w
  1289  01F3  00FF               	movwf	127
  1290  01F4  0874               	movf	??_sampling+3,w
  1291  01F5  008A               	movwf	10
  1292  01F6  0873               	movf	??_sampling+2,w
  1293  01F7  0084               	movwf	4
  1294  01F8  0E72               	swapf	(??_sampling+1)^(0+-128),w
  1295  01F9  0083               	movwf	3
  1296  01FA  0EFE               	swapf	126,f
  1297  01FB  0E7E               	swapf	126,w
  1298  01FC  0009               	retfie
  1299  01FD                     __end_of_sampling:	
  1300                           
  1301                           	psect	intentry
  1302  0004                     __pintentry:	
  1303                           ;incstack = 0
  1304                           ; Regs used in _sampling: [wreg+status,2+status,0+pclath+cstack]
  1305                           
  1306  0004                     interrupt_function:	
  1307  007E                     saved_w	set	btemp
  1308  0004  00FE               	movwf	btemp
  1309  0005  0E03               	swapf	3,w
  1310  0006  00F2               	movwf	??_sampling+1
  1311  0007  0804               	movf	4,w
  1312  0008  00F3               	movwf	??_sampling+2
  1313  0009  080A               	movf	10,w
  1314  000A  00F4               	movwf	??_sampling+3
  1315  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1316  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1317  000D  087F               	movf	btemp+1,w
  1318  000E  00F5               	movwf	??_sampling+4
  1319  000F  120A  118A  29C8   	ljmp	_sampling
  1320                           
  1321                           	psect	text7
  1322  0258                     __ptext7:	
  1323 ;; *************** function i1_rsend *****************
  1324 ;; Defined at:
  1325 ;;		line 42 in file "main.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  msg             1    wreg     unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  msg             1    0[COMMON] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1339 ;;      Params:         0       0       0       0       0
  1340 ;;      Locals:         1       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0
  1342 ;;      Totals:         1       0       0       0       0
  1343 ;;Total ram usage:        1 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_sampling
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function i1_rsend
  1354  0258                     i1_rsend:	
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in i1_rsend: [wreg]
  1358                           ;i1rsend@msg stored from wreg
  1359  0258  00F0               	movwf	i1rsend@msg
  1360  0259                     i1l72:	
  1361                           ;main.c: 43: while (!TXIF) continue;
  1362                           
  1363  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1364  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1365  025B  1E0C               	btfss	12,4	;volatile
  1366  025C  2A59               	goto	i1l72
  1367                           
  1368                           ;main.c: 44: TXREG = msg;
  1369  025D  0870               	movf	i1rsend@msg,w
  1370  025E  0099               	movwf	25	;volatile
  1371  025F  0008               	return
  1372  0260                     __end_ofi1_rsend:	
  1373  007E                     btemp	set	126	;btemp
  1374  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     10      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    _sampling->i1_rsend

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     403
                                              5 BANK0      5     5      0
                               _beep
                          _read_tmr1
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                1     1      0      22
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              6 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0      22
                                              1 COMMON     5     5      0
                            i1_rsend
 ---------------------------------------------------------------------------------
 (4) i1_rsend                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsget
   _write

 _sampling (ROOT)
   i1_rsend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      22       5       42.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       7       1       50.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      29      12        0.0%
ABS                  0      0      29       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Jan  3 18:45:17 2018

                      pc 0002              __CFG_CP$OFF 0000                       l72 0251  
                     l78 0260                       l87 0223                       _RC 0041  
                     fsr 0004                      l824 0229                      l920 0137  
                    l906 00BB                      l914 00E7                      l940 0125  
                    l932 0113                      l908 00C9                      l926 0108  
                    l794 019E                      l892 008D                      l894 0093  
                    l886 00CC                      l896 009C                      l898 00AA  
                    _BUF 0020                      _BUZ 002D                      u215 0181  
                    u235 01AB                      _PR2 0092                      u407 00F3  
                    u417 0103             __CFG_CPD$OFF 0000                      u427 0188  
                    u437 0192                      u447 01B2                      u457 01BC  
                    u377 0068                      u387 0078                      u397 0088  
                    _PWM 001B                      _RUN 0040                      _kT0 003E  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     _T0PS 003D                     _RCIF 0065  
                   i1l72 0259                     _TMR0 0001                     _TMR1 000E  
                   _TXIF 0064             __CFG_WRT$OFF 0000                     _beep 0170  
                   _main 002C                     btemp 007E                     start 0012  
        __end_ofi1_rsend 0260                    INTCON 000B                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 003B                    i1l848 01F1  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0032                    _rsend 0250                    _rsget 0260  
                  main@x 0038                    _write 0218           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
             i1rsend@msg 0070          __initialization 0015             __end_of_beep 01C8  
           __end_of_main 0170                   ??_beep 0076                   ??_main 0036  
                 _ADCON1 009F                   _CCPR1L 0015                   _CCPR2L 001B  
                 ?_rsend 0070                   ?_rsget 0070                   ?_write 0070  
                 _INTCON 000B                ??i1_rsend 0070                   _TMR0IF 005A  
                 _PWMZOH 003F           __CFG_PWRTE$OFF 0000         __end_of_sampling 01FD  
                 saved_w 007E  __end_of__initialization 0028           __pcstackCOMMON 0070  
           __pidataBANK0 022E            __end_of_rsend 0258            __end_of_rsget 0266  
          __end_of_write 022E                  ??_rsend 0076                  ??_rsget 0076  
                ??_write 0076               __pbssBANK0 003B       __size_of_read_tmr1 001B  
             __pmaintext 002C               __pintentry 0004                  _CCP1CON 0017  
                _CCP2CON 001D                  i1_rsend 0258                ?_sampling 0070  
                __ptext1 0218                  __ptext2 0260                  __ptext3 01FD  
                __ptext4 0250                  __ptext5 0170                  __ptext6 01C8  
                __ptext7 0258        __end_of_read_tmr1 0218                  main@cmd 003A  
                main@msg 0039     end_of_initialization 0028               ??_sampling 0071  
    start_initialization 0015               init_fetch0 023F              __pdataBANK0 0020  
              ___latbits 0002            __pcstackBANK0 0031                 ?i1_rsend 0070  
      __size_of_sampling 0035                _read_tmr1 01FD           __size_of_rsend 0008  
         __size_of_rsget 0006           __size_of_write 0016        interrupt_function 0004  
             ?_read_tmr1 0070         __size_ofi1_rsend 0008                 beep@j_57 0034  
               beep@dash 0031            __size_of_beep 0058            __size_of_main 0144  
               _sampling 01C8                 init_ram0 0243              ??_read_tmr1 0077  
               intlevel1 0000                write@duty 0076                 rsend@msg 0076  
             _OPTION_REG 0081  
