

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Jan  1 14:14:53 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0206                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0206  3420               	retlw	32
   122  0207  3420               	retlw	32
   123  0208  3420               	retlw	32
   124  0209  3420               	retlw	32
   125  020A  3420               	retlw	32
   126  020B  3420               	retlw	32
   127  020C  3420               	retlw	32
   128  020D  3420               	retlw	32
   129  020E  3420               	retlw	32
   130  020F  3420               	retlw	32
   131  0210  3420               	retlw	32
   132  0211  3420               	retlw	32
   133  0212  3420               	retlw	32
   134  0213  3420               	retlw	32
   135  0214  3420               	retlw	32
   136  0215  3420               	retlw	32
   137  0216  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  3006               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  221B   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01B9               	clrf	__pbssBANK0& (0+127)
   184  0022  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   186  0024  01BC               	clrf	(__pbssBANK0+3)& (0+127)
   187  0025  01BD               	clrf	(__pbssBANK0+4)& (0+127)
   188                           
   189                           ; Clear objects allocated to COMMON
   190  0026  01F8               	clrf	__pbssCOMMON& (0+127)
   191  0027                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0027                     __end_of__initialization:	
   195  0027  0183               	clrf	3
   196  0028  120A  118A  282B   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssCOMMON
   199  0078                     __pbssCOMMON:	
   200  0078                     _kT0:	
   201  0078                     	ds	1
   202                           
   203                           	psect	bssBANK0
   204  0039                     __pbssBANK0:	
   205  0039                     _T1ZOH:	
   206  0039                     	ds	2
   207  003B                     _PWMZOH:	
   208  003B                     	ds	1
   209  003C                     _T0PS:	
   210  003C                     	ds	1
   211  003D                     _RC:	
   212  003D                     	ds	1
   213                           
   214                           	psect	dataBANK0
   215  0020                     __pdataBANK0:	
   216  0020                     _BUF:	
   217  0020                     	ds	17
   218                           
   219                           	psect	inittext
   220  0217                     init_fetch0:	
   221                           ;	Called with low address in FSR and high address in W
   222                           
   223  0217  087E               	movf	126,w
   224  0218  008A               	movwf	10
   225  0219  087F               	movf	127,w
   226  021A  0082               	movwf	2
   227  021B                     init_ram0:	
   228                           ;Called with:
   229                           ;	high address of idata address in btemp 
   230                           ;	low address of idata address in btemp+1 
   231                           ;	low address of data in FSR
   232                           ;	high address + 1 of data in btemp-1
   233                           
   234  021B  2217  120A  118A   	fcall	init_fetch0
   235  021E  0080               	movwf	0
   236  021F  0A84               	incf	4,f
   237  0220  0804               	movf	4,w
   238  0221  067D               	xorwf	125,w
   239  0222  1903               	btfsc	3,2
   240  0223  3400               	retlw	0
   241  0224  0AFF               	incf	127,f
   242  0225  1903               	btfsc	3,2
   243  0226  0AFE               	incf	126,f
   244  0227  2A1B               	goto	init_ram0
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:	
   248  0070                     ?_beep:	
   249  0070                     ?_rsend:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_rsget:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_read_tmr1:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_write:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_sampling:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ??_sampling:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_main:	
   268                           ; 1 bytes @ 0x0
   269                           
   270                           
   271                           ; 2 bytes @ 0x0
   272  0070                     	ds	5
   273  0075                     ??_beep:	
   274  0075                     ??_rsend:	
   275                           ; 1 bytes @ 0x5
   276                           
   277  0075                     ??_rsget:	
   278                           ; 1 bytes @ 0x5
   279                           
   280  0075                     ??_write:	
   281                           ; 1 bytes @ 0x5
   282                           
   283  0075                     rsend@msg:	
   284                           ; 1 bytes @ 0x5
   285                           
   286  0075                     write@duty:	
   287                           ; 1 bytes @ 0x5
   288                           
   289                           
   290                           ; 1 bytes @ 0x5
   291  0075                     	ds	1
   292  0076                     ??_read_tmr1:	
   293  0076                     ??_main:	
   294                           ; 1 bytes @ 0x6
   295                           
   296                           
   297                           ; 1 bytes @ 0x6
   298  0076                     	ds	2
   299                           
   300                           	psect	cstackBANK0
   301  0031                     __pcstackBANK0:	
   302  0031                     beep@dash:	
   303                           
   304                           ; 1 bytes @ 0x0
   305  0031                     	ds	1
   306  0032                     beep@j:	
   307                           
   308                           ; 2 bytes @ 0x1
   309  0032                     	ds	2
   310  0034                     beep@j_56:	
   311                           
   312                           ; 2 bytes @ 0x3
   313  0034                     	ds	2
   314  0036                     main@x:	
   315                           
   316                           ; 1 bytes @ 0x5
   317  0036                     	ds	1
   318  0037                     main@msg:	
   319                           
   320                           ; 1 bytes @ 0x6
   321  0037                     	ds	1
   322  0038                     main@cmd:	
   323                           
   324                           ; 1 bytes @ 0x7
   325  0038                     	ds	1
   326                           
   327                           	psect	maintext
   328  002B                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 81 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  cmd             1    7[BANK0 ] unsigned char 
   339 ;;  msg             1    6[BANK0 ] unsigned char 
   340 ;;  x               1    5[BANK0 ] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2  105[None  ] int 
   343 ;; Registers used:
   344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : B00/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   350 ;;      Params:         0       0       0       0       0
   351 ;;      Locals:         0       3       0       0       0
   352 ;;      Temps:          2       0       0       0       0
   353 ;;      Totals:         2       3       0       0       0
   354 ;;Total ram usage:        5 bytes
   355 ;; Hardware stack levels required when called:    3
   356 ;; This function calls:
   357 ;;		_beep
   358 ;;		_read_tmr1
   359 ;;		_rsend
   360 ;;		_rsget
   361 ;;		_write
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _main
   369  002B                     _main:	
   370                           
   371                           ;main.c: 82: OPTION_REG = 0x85;
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   375  002B  3085               	movlw	133
   376  002C  1683               	bsf	3,5	;RP0=1, select bank1
   377  002D  1303               	bcf	3,6	;RP1=0, select bank1
   378  002E  0081               	movwf	1	;volatile
   379                           
   380                           ;main.c: 83: INTCON = 0x80;
   381  002F  3080               	movlw	128
   382  0030  008B               	movwf	11	;volatile
   383                           
   384                           ;main.c: 84: T1CON = 0x03;
   385  0031  3003               	movlw	3
   386  0032  1283               	bcf	3,5	;RP0=0, select bank0
   387  0033  1303               	bcf	3,6	;RP1=0, select bank0
   388  0034  0090               	movwf	16	;volatile
   389                           
   390                           ;main.c: 85: CCP1CON = 0x0F;
   391  0035  300F               	movlw	15
   392  0036  0097               	movwf	23	;volatile
   393                           
   394                           ;main.c: 86: CCPR1L = 0;
   395  0037  0195               	clrf	21	;volatile
   396                           
   397                           ;main.c: 87: CCP2CON = 0x0F;
   398  0038  300F               	movlw	15
   399  0039  009D               	movwf	29	;volatile
   400                           
   401                           ;main.c: 88: CCPR2L = 0;
   402  003A  019B               	clrf	27	;volatile
   403                           
   404                           ;main.c: 89: PR2 = 100;
   405  003B  3064               	movlw	100
   406  003C  1683               	bsf	3,5	;RP0=1, select bank1
   407  003D  1303               	bcf	3,6	;RP1=0, select bank1
   408  003E  0092               	movwf	18	;volatile
   409                           
   410                           ;main.c: 90: T2CON = 0x04;
   411  003F  3004               	movlw	4
   412  0040  1283               	bcf	3,5	;RP0=0, select bank0
   413  0041  1303               	bcf	3,6	;RP1=0, select bank0
   414  0042  0092               	movwf	18	;volatile
   415                           
   416                           ;main.c: 91: ADCON1 = 0x05;
   417  0043  3005               	movlw	5
   418  0044  1683               	bsf	3,5	;RP0=1, select bank1
   419  0045  1303               	bcf	3,6	;RP1=0, select bank1
   420  0046  009F               	movwf	31	;volatile
   421                           
   422                           ;main.c: 92: TRISC = 0xFD;
   423  0047  30FD               	movlw	253
   424  0048  0087               	movwf	7	;volatile
   425                           
   426                           ;main.c: 93: TRISB = 0xFF;
   427  0049  30FF               	movlw	255
   428  004A  0086               	movwf	6	;volatile
   429                           
   430                           ;main.c: 94: TRISA = 0xDF;
   431  004B  30DF               	movlw	223
   432  004C  0085               	movwf	5	;volatile
   433                           
   434                           ;main.c: 95: RCSTA = 0x90;
   435  004D  3090               	movlw	144
   436  004E  1283               	bcf	3,5	;RP0=0, select bank0
   437  004F  1303               	bcf	3,6	;RP1=0, select bank0
   438  0050  0098               	movwf	24	;volatile
   439                           
   440                           ;main.c: 96: TXSTA = 0x24;
   441  0051  3024               	movlw	36
   442  0052  1683               	bsf	3,5	;RP0=1, select bank1
   443  0053  1303               	bcf	3,6	;RP1=0, select bank1
   444  0054  0098               	movwf	24	;volatile
   445                           
   446                           ;main.c: 97: SPBRG = 12;
   447  0055  300C               	movlw	12
   448  0056  0099               	movwf	25	;volatile
   449                           
   450                           ;main.c: 101: if (PORTB & 0x02) {
   451  0057  1283               	bcf	3,5	;RP0=0, select bank0
   452  0058  1303               	bcf	3,6	;RP1=0, select bank0
   453  0059  1C86               	btfss	6,1	;volatile
   454  005A  28F3               	goto	l879
   455                           
   456                           ;main.c: 102: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   457  005B  3000               	movlw	0
   458  005C  120A  118A  215C  120A  118A  	fcall	_beep
   459  0061  3082               	movlw	130
   460  0062  00F7               	movwf	??_main+1
   461  0063  30DD               	movlw	221
   462  0064  00F6               	movwf	??_main
   463  0065                     u317:	
   464  0065  0BF6               	decfsz	??_main,f
   465  0066  2865               	goto	u317
   466  0067  0BF7               	decfsz	??_main+1,f
   467  0068  2865               	goto	u317
   468  0069  286A               	nop2
   469                           
   470                           ;main.c: 103: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   471  006A  3000               	movlw	0
   472  006B  120A  118A  215C  120A  118A  	fcall	_beep
   473  0070  3082               	movlw	130
   474  0071  00F7               	movwf	??_main+1
   475  0072  30DD               	movlw	221
   476  0073  00F6               	movwf	??_main
   477  0074                     u327:	
   478  0074  0BF6               	decfsz	??_main,f
   479  0075  2874               	goto	u327
   480  0076  0BF7               	decfsz	??_main+1,f
   481  0077  2874               	goto	u327
   482  0078  2879               	nop2
   483                           
   484                           ;main.c: 104: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   485  0079  3000               	movlw	0
   486  007A  120A  118A  215C  120A  118A  	fcall	_beep
   487  007F  3082               	movlw	130
   488  0080  00F7               	movwf	??_main+1
   489  0081  30DD               	movlw	221
   490  0082  00F6               	movwf	??_main
   491  0083                     u337:	
   492  0083  0BF6               	decfsz	??_main,f
   493  0084  2883               	goto	u337
   494  0085  0BF7               	decfsz	??_main+1,f
   495  0086  2883               	goto	u337
   496  0087  2888               	nop2
   497  0088  28D8               	goto	l851
   498  0089                     l857:	
   499                           ;main.c: 110: case 'r': case '7': read_tmr1(); break;
   500                           
   501                           ;main.c: 109: switch (BUF[0]) {
   502                           
   503  0089  120A  118A  21D5  120A  118A  	fcall	_read_tmr1
   504  008E  28D5               	goto	l873
   505  008F                     l859:	
   506                           ;main.c: 111: case 'w': case '5': write(BUF[1]); break;
   507                           
   508  008F  1283               	bcf	3,5	;RP0=0, select bank0
   509  0090  1303               	bcf	3,6	;RP1=0, select bank0
   510  0091  0821               	movf	_BUF+1,w
   511  0092  120A  118A  21F0  120A  118A  	fcall	_write
   512  0097  28D5               	goto	l873
   513  0098                     l861:	
   514                           ;main.c: 112: case 'x': case '1': write(BUF[1]); read_tmr1(); break;
   515                           
   516  0098  1283               	bcf	3,5	;RP0=0, select bank0
   517  0099  1303               	bcf	3,6	;RP1=0, select bank0
   518  009A  0821               	movf	_BUF+1,w
   519  009B  120A  118A  21F0  120A  118A  	fcall	_write
   520  00A0  120A  118A  21D5  120A  118A  	fcall	_read_tmr1
   521  00A5  28D5               	goto	l873
   522  00A6                     l863:	
   523                           ;main.c: 113: case 's': case '2': write(0); beep(0); beep(0); break;
   524                           
   525  00A6  3000               	movlw	0
   526  00A7  120A  118A  21F0  120A  118A  	fcall	_write
   527  00AC  3000               	movlw	0
   528  00AD  120A  118A  215C  120A  118A  	fcall	_beep
   529  00B2  3000               	movlw	0
   530  00B3  120A  118A  215C  120A  118A  	fcall	_beep
   531                           
   532                           ;main.c: 114: }
   533  00B8  28D5               	goto	l873
   534  00B9                     l871:	
   535  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   536  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   537  00BB  0820               	movf	_BUF,w
   538                           
   539                           ; Switch size 1, requested type "space"
   540                           ; Number of cases is 8, Range of values is 49 to 120
   541                           ; switch strategies available:
   542                           ; Name         Instructions Cycles
   543                           ; simple_byte           25    13 (average)
   544                           ; direct_byte          227    11 (fixed)
   545                           ; jumptable            263     9 (fixed)
   546                           ;	Chosen strategy is simple_byte
   547  00BC  3A31               	xorlw	49	; case 49
   548  00BD  1903               	skipnz
   549  00BE  2898               	goto	l861
   550  00BF  3A03               	xorlw	3	; case 50
   551  00C0  1903               	skipnz
   552  00C1  28A6               	goto	l863
   553  00C2  3A07               	xorlw	7	; case 53
   554  00C3  1903               	skipnz
   555  00C4  288F               	goto	l859
   556  00C5  3A02               	xorlw	2	; case 55
   557  00C6  1903               	skipnz
   558  00C7  2889               	goto	l857
   559  00C8  3A45               	xorlw	69	; case 114
   560  00C9  1903               	skipnz
   561  00CA  2889               	goto	l857
   562  00CB  3A01               	xorlw	1	; case 115
   563  00CC  1903               	skipnz
   564  00CD  28A6               	goto	l863
   565  00CE  3A04               	xorlw	4	; case 119
   566  00CF  1903               	skipnz
   567  00D0  288F               	goto	l859
   568  00D1  3A0F               	xorlw	15	; case 120
   569  00D2  1903               	skipnz
   570  00D3  2898               	goto	l861
   571  00D4  28D5               	goto	l873
   572  00D5                     l873:	
   573                           
   574                           ;main.c: 115: RC = 0;
   575  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   576  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   577  00D7  01BD               	clrf	_RC
   578  00D8                     l851:	
   579                           ;main.c: 105: while (1) {
   580                           
   581                           ;main.c: 116: }
   582                           
   583                           
   584                           ;main.c: 107: char x = rsget();
   585  00D8  120A  118A  2230  120A  118A  	fcall	_rsget
   586  00DD  00F6               	movwf	??_main
   587  00DE  0876               	movf	??_main,w
   588  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   589  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   590  00E1  00B6               	movwf	main@x
   591                           
   592                           ;main.c: 108: if (x == '\n') {
   593  00E2  300A               	movlw	10
   594  00E3  0636               	xorwf	main@x,w
   595  00E4  1903               	btfsc	3,2
   596  00E5  28B9               	goto	l871
   597                           
   598                           ;main.c: 117: else {
   599                           ;main.c: 118: BUF[RC] = x;
   600  00E6  0836               	movf	main@x,w
   601  00E7  00F6               	movwf	??_main
   602  00E8  083D               	movf	_RC,w
   603  00E9  3E20               	addlw	(low (_BUF| 0))& (0+255)
   604  00EA  0084               	movwf	4
   605  00EB  0876               	movf	??_main,w
   606  00EC  1383               	bcf	3,7	;select IRP bank0
   607  00ED  0080               	movwf	0
   608                           
   609                           ;main.c: 119: RC++;
   610  00EE  3001               	movlw	1
   611  00EF  00F6               	movwf	??_main
   612  00F0  0876               	movf	??_main,w
   613  00F1  07BD               	addwf	_RC,f
   614  00F2  28D8               	goto	l851
   615  00F3                     l879:	
   616                           ;main.c: 120: }
   617                           ;main.c: 121: }
   618                           ;main.c: 122: }
   619                           
   620                           
   621                           ;main.c: 124: else {
   622                           ;main.c: 125: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   623  00F3  3000               	movlw	0
   624  00F4  120A  118A  215C  120A  118A  	fcall	_beep
   625  00F9  3082               	movlw	130
   626  00FA  00F7               	movwf	??_main+1
   627  00FB  30DD               	movlw	221
   628  00FC  00F6               	movwf	??_main
   629  00FD                     u347:	
   630  00FD  0BF6               	decfsz	??_main,f
   631  00FE  28FD               	goto	u347
   632  00FF  0BF7               	decfsz	??_main+1,f
   633  0100  28FD               	goto	u347
   634  0101  2902               	nop2
   635                           
   636                           ;main.c: 126: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   637  0102  3001               	movlw	1
   638  0103  120A  118A  215C  120A  118A  	fcall	_beep
   639  0108  3082               	movlw	130
   640  0109  00F7               	movwf	??_main+1
   641  010A  30DD               	movlw	221
   642  010B  00F6               	movwf	??_main
   643  010C                     u357:	
   644  010C  0BF6               	decfsz	??_main,f
   645  010D  290C               	goto	u357
   646  010E  0BF7               	decfsz	??_main+1,f
   647  010F  290C               	goto	u357
   648  0110  2911               	nop2
   649  0111  292E               	goto	l885
   650  0112                     l891:	
   651                           
   652                           ;main.c: 132: PWMZOH = msg;
   653  0112  0837               	movf	main@msg,w
   654  0113  00F6               	movwf	??_main
   655  0114  0876               	movf	??_main,w
   656  0115  00BB               	movwf	_PWMZOH
   657                           
   658                           ;main.c: 133: rsend(T1ZOH);
   659  0116  0839               	movf	_T1ZOH,w
   660  0117  120A  118A  2228  120A  118A  	fcall	_rsend
   661                           
   662                           ;main.c: 134: rsend(T1ZOH >> 8);
   663  011C  1283               	bcf	3,5	;RP0=0, select bank0
   664  011D  1303               	bcf	3,6	;RP1=0, select bank0
   665  011E  083A               	movf	_T1ZOH+1,w
   666  011F  120A  118A  2228  120A  118A  	fcall	_rsend
   667                           
   668                           ;main.c: 135: }
   669  0124  292E               	goto	l885
   670  0125                     l899:	
   671                           
   672                           ;main.c: 137: T0PS = msg;
   673  0125  0837               	movf	main@msg,w
   674  0126  00F6               	movwf	??_main
   675  0127  0876               	movf	??_main,w
   676  0128  00BC               	movwf	_T0PS
   677                           
   678                           ;main.c: 138: TMR1 = 0;
   679  0129  018E               	clrf	14	;volatile
   680  012A  018F               	clrf	15	;volatile
   681  012B  0181               	clrf	1	;# 
   682  012C  168B               	bsf	11,5	;# 
   683  012D  1410               	bsf	16,0	;# 
   684  012E                     l885:	
   685                           ;main.c: 127: while (1) {
   686                           
   687                           ;main.c: 142: }
   688                           
   689                           
   690                           ;main.c: 129: char cmd = rsget();
   691  012E  120A  118A  2230  120A  118A  	fcall	_rsget
   692  0133  00F6               	movwf	??_main
   693  0134  0876               	movf	??_main,w
   694  0135  1283               	bcf	3,5	;RP0=0, select bank0
   695  0136  1303               	bcf	3,6	;RP1=0, select bank0
   696  0137  00B8               	movwf	main@cmd
   697                           
   698                           ;main.c: 130: char msg = rsget();
   699  0138  120A  118A  2230  120A  118A  	fcall	_rsget
   700  013D  00F6               	movwf	??_main
   701  013E  0876               	movf	??_main,w
   702  013F  1283               	bcf	3,5	;RP0=0, select bank0
   703  0140  1303               	bcf	3,6	;RP1=0, select bank0
   704  0141  00B7               	movwf	main@msg
   705                           
   706                           ;main.c: 131: if (cmd == 'x') {
   707  0142  3078               	movlw	120
   708  0143  0638               	xorwf	main@cmd,w
   709  0144  1903               	btfsc	3,2
   710  0145  2912               	goto	l891
   711                           
   712                           ;main.c: 136: else if (cmd == 't') {
   713  0146  3074               	movlw	116
   714  0147  1283               	bcf	3,5	;RP0=0, select bank0
   715  0148  1303               	bcf	3,6	;RP1=0, select bank0
   716  0149  0638               	xorwf	main@cmd,w
   717  014A  1903               	btfsc	3,2
   718  014B  2925               	goto	l899
   719                           
   720                           ;main.c: 143: else if (cmd == 's') {
   721  014C  3073               	movlw	115
   722  014D  1283               	bcf	3,5	;RP0=0, select bank0
   723  014E  1303               	bcf	3,6	;RP1=0, select bank0
   724  014F  0638               	xorwf	main@cmd,w
   725  0150  1D03               	btfss	3,2
   726  0151  292E               	goto	l885
   727                           
   728                           ;main.c: 144: PWM = 0;
   729  0152  019B               	clrf	27
   730                           
   731                           ;main.c: 145: INTCON &= 0xDF;
   732  0153  30DF               	movlw	223
   733  0154  00F6               	movwf	??_main
   734  0155  0876               	movf	??_main,w
   735  0156  058B               	andwf	11,f	;volatile
   736                           
   737                           ;main.c: 146: T1CON &= 0xFE;
   738  0157  30FE               	movlw	254
   739  0158  00F6               	movwf	??_main
   740  0159  0876               	movf	??_main,w
   741  015A  0590               	andwf	16,f	;volatile
   742  015B  292E               	goto	l885
   743  015C                     __end_of_main:	
   744                           ;main.c: 147: }
   745                           ;main.c: 148: }
   746                           ;main.c: 149: }
   747                           ;main.c: 150: return 0;
   748                           ;	Return value of _main is never used
   749                           
   750                           
   751                           	psect	text1
   752  01F0                     __ptext1:	
   753 ;; *************** function _write *****************
   754 ;; Defined at:
   755 ;;		line 61 in file "main.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  duty            1    wreg     char 
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  duty            1    5[COMMON] char 
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, status,2
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   769 ;;      Params:         0       0       0       0       0
   770 ;;      Locals:         1       0       0       0       0
   771 ;;      Temps:          0       0       0       0       0
   772 ;;      Totals:         1       0       0       0       0
   773 ;;Total ram usage:        1 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    1
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _write
   785  01F0                     _write:	
   786                           
   787                           ;incstack = 0
   788                           ; Regs used in _write: [wreg+status,2]
   789                           ;write@duty stored from wreg
   790  01F0  00F5               	movwf	write@duty
   791                           
   792                           ;main.c: 62: if (duty > 100) PWM = 100;
   793  01F1  0875               	movf	write@duty,w
   794  01F2  3A80               	xorlw	128
   795  01F3  3E1B               	addlw	-229
   796  01F4  1C03               	skipc
   797  01F5  29FB               	goto	l85
   798  01F6  3064               	movlw	100
   799  01F7  1283               	bcf	3,5	;RP0=0, select bank0
   800  01F8  1303               	bcf	3,6	;RP1=0, select bank0
   801  01F9  009B               	movwf	27
   802  01FA  0008               	return
   803  01FB                     l85:	
   804                           
   805                           ;main.c: 63: else if (duty < 0) PWM = 0;
   806  01FB  1FF5               	btfss	write@duty,7
   807  01FC  2A01               	goto	l799
   808  01FD  1283               	bcf	3,5	;RP0=0, select bank0
   809  01FE  1303               	bcf	3,6	;RP1=0, select bank0
   810  01FF  019B               	clrf	27
   811  0200  0008               	return
   812  0201                     l799:	
   813                           
   814                           ;main.c: 64: else PWM = duty;
   815  0201  0875               	movf	write@duty,w
   816  0202  1283               	bcf	3,5	;RP0=0, select bank0
   817  0203  1303               	bcf	3,6	;RP1=0, select bank0
   818  0204  009B               	movwf	27
   819  0205  0008               	return
   820  0206                     __end_of_write:	
   821                           
   822                           	psect	text2
   823  0230                     __ptext2:	
   824 ;; *************** function _rsget *****************
   825 ;; Defined at:
   826 ;;		line 47 in file "main.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      unsigned char 
   833 ;; Registers used:
   834 ;;		wreg
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         0       0       0       0       0
   841 ;;      Locals:         0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0
   843 ;;      Totals:         0       0       0       0       0
   844 ;;Total ram usage:        0 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    1
   847 ;; This function calls:
   848 ;;		Nothing
   849 ;; This function is called by:
   850 ;;		_main
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854                           
   855                           ;psect for function _rsget
   856  0230                     _rsget:	
   857  0230                     l76:	
   858                           ;main.c: 48: while (!RCIF) continue;
   859                           
   860                           ;incstack = 0
   861                           ; Regs used in _rsget: [wreg]
   862                           
   863  0230  1283               	bcf	3,5	;RP0=0, select bank0
   864  0231  1303               	bcf	3,6	;RP1=0, select bank0
   865  0232  1E8C               	btfss	12,5	;volatile
   866  0233  2A30               	goto	l76
   867                           
   868                           ;main.c: 49: return RCREG;
   869  0234  081A               	movf	26,w	;volatile
   870  0235  0008               	return
   871  0236                     __end_of_rsget:	
   872                           
   873                           	psect	text3
   874  01D5                     __ptext3:	
   875 ;; *************** function _read_tmr1 *****************
   876 ;; Defined at:
   877 ;;		line 54 in file "main.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, status,2, status,0, pclath, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   891 ;;      Params:         0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0
   894 ;;      Totals:         0       0       0       0       0
   895 ;;Total ram usage:        0 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    2
   898 ;; This function calls:
   899 ;;		_rsend
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           
   906                           ;psect for function _read_tmr1
   907  01D5                     _read_tmr1:	
   908                           
   909                           ;main.c: 55: T1ZOH = TMR1;
   910                           
   911                           ;incstack = 0
   912                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   913  01D5  1283               	bcf	3,5	;RP0=0, select bank0
   914  01D6  1303               	bcf	3,6	;RP1=0, select bank0
   915  01D7  080F               	movf	15,w	;volatile
   916  01D8  00BA               	movwf	_T1ZOH+1
   917  01D9  080E               	movf	14,w	;volatile
   918  01DA  00B9               	movwf	_T1ZOH
   919                           
   920                           ;main.c: 56: rsend(T1ZOH >> 8);
   921  01DB  083A               	movf	_T1ZOH+1,w
   922  01DC  120A  118A  2228  120A  118A  	fcall	_rsend
   923                           
   924                           ;main.c: 57: rsend(T1ZOH);
   925  01E1  1283               	bcf	3,5	;RP0=0, select bank0
   926  01E2  1303               	bcf	3,6	;RP1=0, select bank0
   927  01E3  0839               	movf	_T1ZOH,w
   928  01E4  120A  118A  2228   	fcall	_rsend
   929                           
   930                           ;main.c: 58: TMR1 -= T1ZOH;
   931  01E7  1283               	bcf	3,5	;RP0=0, select bank0
   932  01E8  1303               	bcf	3,6	;RP1=0, select bank0
   933  01E9  0839               	movf	_T1ZOH,w
   934  01EA  028E               	subwf	14,f	;volatile
   935  01EB  083A               	movf	_T1ZOH+1,w
   936  01EC  1C03               	skipc
   937  01ED  038F               	decf	15,f	;volatile
   938  01EE  028F               	subwf	15,f	;volatile
   939  01EF  0008               	return
   940  01F0                     __end_of_read_tmr1:	
   941                           
   942                           	psect	text4
   943  0228                     __ptext4:	
   944 ;; *************** function _rsend *****************
   945 ;; Defined at:
   946 ;;		line 42 in file "main.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  msg             1    wreg     unsigned char 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  msg             1    5[COMMON] unsigned char 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   960 ;;      Params:         0       0       0       0       0
   961 ;;      Locals:         1       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0
   963 ;;      Totals:         1       0       0       0       0
   964 ;;Total ram usage:        1 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    1
   967 ;; This function calls:
   968 ;;		Nothing
   969 ;; This function is called by:
   970 ;;		_read_tmr1
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _rsend
   977  0228                     _rsend:	
   978                           
   979                           ;incstack = 0
   980                           ; Regs used in _rsend: [wreg]
   981                           ;rsend@msg stored from wreg
   982  0228  00F5               	movwf	rsend@msg
   983  0229                     l70:	
   984                           ;main.c: 43: while (!TXIF) continue;
   985                           
   986  0229  1283               	bcf	3,5	;RP0=0, select bank0
   987  022A  1303               	bcf	3,6	;RP1=0, select bank0
   988  022B  1E0C               	btfss	12,4	;volatile
   989  022C  2A29               	goto	l70
   990                           
   991                           ;main.c: 44: TXREG = msg;
   992  022D  0875               	movf	rsend@msg,w
   993  022E  0099               	movwf	25	;volatile
   994  022F  0008               	return
   995  0230                     __end_of_rsend:	
   996                           
   997                           	psect	text5
   998  015C                     __ptext5:	
   999 ;; *************** function _beep *****************
  1000 ;; Defined at:
  1001 ;;		line 31 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  dash            1    wreg     unsigned char 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  dash            1    0[BANK0 ] unsigned char 
  1006 ;;  j               2    3[BANK0 ] int 
  1007 ;;  j               2    1[BANK0 ] int 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2, status,0, btemp+1
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1017 ;;      Params:         0       0       0       0       0
  1018 ;;      Locals:         0       5       0       0       0
  1019 ;;      Temps:          1       0       0       0       0
  1020 ;;      Totals:         1       5       0       0       0
  1021 ;;Total ram usage:        6 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    1
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           
  1032                           ;psect for function _beep
  1033  015C                     _beep:	
  1034                           
  1035                           ;incstack = 0
  1036                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1037                           ;beep@dash stored from wreg
  1038  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1039  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1040  015E  00B1               	movwf	beep@dash
  1041                           
  1042                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1043  015F  0831               	movf	beep@dash,w
  1044  0160  1D03               	btfss	3,2
  1045  0161  298A               	goto	l769
  1046  0162  01B2               	clrf	beep@j
  1047  0163  01B3               	clrf	beep@j+1
  1048  0164                     L1:	
  1049  0164  0833               	movf	beep@j+1,w
  1050  0165  3A80               	xorlw	128
  1051  0166  00FF               	movwf	127
  1052  0167  3080               	movlw	128
  1053  0168  027F               	subwf	127,w
  1054  0169  1D03               	skipz
  1055  016A  296D               	goto	u185
  1056  016B  3064               	movlw	100
  1057  016C  0232               	subwf	beep@j,w
  1058  016D                     u185:	
  1059  016D  1803               	btfsc	3,0
  1060  016E  0008               	return
  1061                           
  1062                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1063  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0170  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0171  1685               	bsf	5,5
  1066  0172  30C7               	movlw	199
  1067  0173  00F5               	movwf	??_beep
  1068  0174                     u367:	
  1069  0174  2975               	nop2
  1070  0175  0BF5               	decfsz	??_beep,f
  1071  0176  2974               	goto	u367
  1072  0177  2978               	nop2
  1073  0178  2979               	nop2
  1074                           
  1075                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1076  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1077  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1078  017B  1285               	bcf	5,5
  1079  017C  30A6               	movlw	166
  1080  017D  00F5               	movwf	??_beep
  1081  017E                     u377:	
  1082  017E  0BF5               	decfsz	??_beep,f
  1083  017F  297E               	goto	u377
  1084  0180  0000               	nop
  1085  0181  3001               	movlw	1
  1086  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1088  0184  07B2               	addwf	beep@j,f
  1089  0185  1803               	skipnc
  1090  0186  0AB3               	incf	beep@j+1,f
  1091  0187  3000               	movlw	0
  1092  0188  07B3               	addwf	beep@j+1,f
  1093  0189  2964               	goto	L1
  1094  018A                     l769:	
  1095                           ;main.c: 35: }
  1096                           
  1097                           
  1098                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1099  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1100  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1101  018C  01B4               	clrf	beep@j_56
  1102  018D  01B5               	clrf	beep@j_56+1
  1103  018E                     L2:	
  1104  018E  0835               	movf	beep@j_56+1,w
  1105  018F  3A80               	xorlw	128
  1106  0190  00FF               	movwf	127
  1107  0191  3081               	movlw	129
  1108  0192  027F               	subwf	127,w
  1109  0193  1D03               	skipz
  1110  0194  2997               	goto	u205
  1111  0195  30F4               	movlw	244
  1112  0196  0234               	subwf	beep@j_56,w
  1113  0197                     u205:	
  1114  0197  1803               	btfsc	3,0
  1115  0198  0008               	return
  1116                           
  1117                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1118  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1119  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1120  019B  1685               	bsf	5,5
  1121  019C  30C7               	movlw	199
  1122  019D  00F5               	movwf	??_beep
  1123  019E                     u387:	
  1124  019E  299F               	nop2
  1125  019F  0BF5               	decfsz	??_beep,f
  1126  01A0  299E               	goto	u387
  1127  01A1  29A2               	nop2
  1128  01A2  29A3               	nop2
  1129                           
  1130                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1131  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1132  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  1133  01A5  1285               	bcf	5,5
  1134  01A6  30A6               	movlw	166
  1135  01A7  00F5               	movwf	??_beep
  1136  01A8                     u397:	
  1137  01A8  0BF5               	decfsz	??_beep,f
  1138  01A9  29A8               	goto	u397
  1139  01AA  0000               	nop
  1140  01AB  3001               	movlw	1
  1141  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1142  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1143  01AE  07B4               	addwf	beep@j_56,f
  1144  01AF  1803               	skipnc
  1145  01B0  0AB5               	incf	beep@j_56+1,f
  1146  01B1  3000               	movlw	0
  1147  01B2  07B5               	addwf	beep@j_56+1,f
  1148  01B3  298E               	goto	L2
  1149  01B4                     __end_of_beep:	
  1150                           
  1151                           	psect	text6
  1152  01B4                     __ptext6:	
  1153 ;; *************** function _sampling *****************
  1154 ;; Defined at:
  1155 ;;		line 70 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0
  1171 ;;      Temps:          5       0       0       0       0
  1172 ;;      Totals:         5       0       0       0       0
  1173 ;;Total ram usage:        5 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		Interrupt level 1
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _sampling
  1184  01B4                     _sampling:	
  1185                           
  1186                           ;main.c: 71: kT0++;
  1187  01B4  3001               	movlw	1
  1188  01B5  00F0               	movwf	??_sampling
  1189  01B6  0870               	movf	??_sampling,w
  1190  01B7  07F8               	addwf	_kT0,f	;volatile
  1191                           
  1192                           ;main.c: 72: if (kT0 > T0PS) {
  1193  01B8  0878               	movf	_kT0,w	;volatile
  1194  01B9  023C               	subwf	_T0PS,w
  1195  01BA  1803               	skipnc
  1196  01BB  29C9               	goto	i1l813
  1197                           
  1198                           ;main.c: 73: kT0 = 0;
  1199  01BC  01F8               	clrf	_kT0	;volatile
  1200                           
  1201                           ;main.c: 74: T1ZOH = TMR1;
  1202  01BD  080F               	movf	15,w	;volatile
  1203  01BE  00BA               	movwf	_T1ZOH+1
  1204  01BF  080E               	movf	14,w	;volatile
  1205  01C0  00B9               	movwf	_T1ZOH
  1206                           
  1207                           ;main.c: 75: PWM = PWMZOH;
  1208  01C1  083B               	movf	_PWMZOH,w
  1209  01C2  009B               	movwf	27
  1210                           
  1211                           ;main.c: 76: TMR1 -= T1ZOH;
  1212  01C3  0839               	movf	_T1ZOH,w
  1213  01C4  028E               	subwf	14,f	;volatile
  1214  01C5  083A               	movf	_T1ZOH+1,w
  1215  01C6  1C03               	skipc
  1216  01C7  038F               	decf	15,f	;volatile
  1217  01C8  028F               	subwf	15,f	;volatile
  1218  01C9                     i1l813:	
  1219                           
  1220                           ;main.c: 77: }
  1221                           ;main.c: 78: TMR0IF = 0;
  1222  01C9  110B               	bcf	11,2	;volatile
  1223  01CA  0874               	movf	??_sampling+4,w
  1224  01CB  00FF               	movwf	127
  1225  01CC  0873               	movf	??_sampling+3,w
  1226  01CD  008A               	movwf	10
  1227  01CE  0872               	movf	??_sampling+2,w
  1228  01CF  0084               	movwf	4
  1229  01D0  0E71               	swapf	(??_sampling+1)^(0+-128),w
  1230  01D1  0083               	movwf	3
  1231  01D2  0EFE               	swapf	126,f
  1232  01D3  0E7E               	swapf	126,w
  1233  01D4  0009               	retfie
  1234  01D5                     __end_of_sampling:	
  1235  007E                     btemp	set	126	;btemp
  1236  007E                     wtemp0	set	126
  1237                           
  1238                           	psect	intentry
  1239  0004                     __pintentry:	
  1240                           ;incstack = 0
  1241                           ; Regs used in _sampling: [wreg+status,2+status,0]
  1242                           
  1243  0004                     interrupt_function:	
  1244  007E                     saved_w	set	btemp
  1245  0004  00FE               	movwf	btemp
  1246  0005  0E03               	swapf	3,w
  1247  0006  00F1               	movwf	??_sampling+1
  1248  0007  0804               	movf	4,w
  1249  0008  00F2               	movwf	??_sampling+2
  1250  0009  080A               	movf	10,w
  1251  000A  00F3               	movwf	??_sampling+3
  1252  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1253  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1254  000D  087F               	movf	btemp+1,w
  1255  000E  00F4               	movwf	??_sampling+4
  1256  000F  120A  118A  29B4   	ljmp	_sampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80      8      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_rsend
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     381
                                              6 COMMON     2     2      0
                                              5 BANK0      3     3      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              5 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _sampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      27      12        0.0%
ABS                  0      0      27       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Jan  1 14:14:53 2018

                      pc 0002              __CFG_CP$OFF 0000                       l70 0229  
                     l76 0230                       l85 01FB                       _RC 003D  
                     fsr 0004                      TMR0 0001                      l851 00D8  
                    l861 0098                      l863 00A6                      l871 00B9  
                    l769 018A                      l873 00D5                      l857 0089  
                    l891 0112                      l859 008F                      l885 012E  
                    l799 0201                      l879 00F3                      l899 0125  
                    _BUF 0020                      _BUZ 002D                      u205 0197  
                    u317 0065                      _PR2 0092                      u327 0074  
                    u185 016D                      u337 0083             __CFG_CPD$OFF 0000  
                    u347 00FD                      u357 010C                      u367 0174  
                    u377 017E                      u387 019E                      u397 01A8  
                    _PWM 001B                      _kT0 0078                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000                     T1CON 0010  
           __CFG_LVP$OFF 0000                     _T0PS 003C                     _RCIF 0065  
                   _TMR1 000E                     _TXIF 0064             __CFG_WRT$OFF 0000  
                   _beep 015C                     _main 002B                     btemp 007E  
                   start 0012                    INTCON 000B                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 0039                    i1l813 01C9  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0032                    _rsend 0228                    _rsget 0230  
                  main@x 0036                    _write 01F0           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_beep 01B4             __end_of_main 015C  
                 ??_beep 0075                   ??_main 0076                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070                   _INTCON 000B  
                 _TMR0IF 005A                   _PWMZOH 003B           __CFG_PWRTE$OFF 0000  
       __end_of_sampling 01D5                   saved_w 007E  __end_of__initialization 0027  
         __pcstackCOMMON 0070             __pidataBANK0 0206            __end_of_rsend 0230  
          __end_of_rsget 0236            __end_of_write 0206                  ??_rsend 0075  
                ??_rsget 0075                  ??_write 0075               __pbssBANK0 0039  
     __size_of_read_tmr1 001B               __pmaintext 002B               __pintentry 0004  
                _CCP1CON 0017                  _CCP2CON 001D                ?_sampling 0070  
                __ptext1 01F0                  __ptext2 0230                  __ptext3 01D5  
                __ptext4 0228                  __ptext5 015C                  __ptext6 01B4  
      __end_of_read_tmr1 01F0                  main@cmd 0038                  main@msg 0037  
   end_of_initialization 0027               ??_sampling 0070      start_initialization 0015  
             init_fetch0 0217              __pdataBANK0 0020              __pbssCOMMON 0078  
              ___latbits 0002            __pcstackBANK0 0031        __size_of_sampling 0021  
              _read_tmr1 01D5           __size_of_rsend 0008           __size_of_rsget 0006  
         __size_of_write 0016        interrupt_function 0004               ?_read_tmr1 0070  
               beep@j_56 0034                 beep@dash 0031            __size_of_beep 0058  
          __size_of_main 0131                 _sampling 01B4                 init_ram0 021B  
            ??_read_tmr1 0076                 intlevel1 0000                write@duty 0075  
               rsend@msg 0075               _OPTION_REG 0081  
