

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Dec 14 22:45:20 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.43
    32                           ; Generated 25/07/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001040                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _ERR
    71  001040  01                 	db	1
    72                           
    73                           ;initializer for _BUF
    74  001041  20                 	db	32
    75  001042  20                 	db	32
    76  001043  20                 	db	32
    77  001044  20                 	db	32
    78  001045  20                 	db	32
    79  001046  20                 	db	32
    80  001047  20                 	db	32
    81  001048  20                 	db	32
    82  001049  20                 	db	32
    83  00104A  20                 	db	32
    84  00104B  20                 	db	32
    85  00104C  20                 	db	32
    86  00104D  20                 	db	32
    87  00104E  20                 	db	32
    88  00104F  20                 	db	32
    89  001050  20                 	db	32
    90  001051  00                 	db	0
    91                           
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	opt stack 0
    95  000800  00                 	db	0
    96  000801                     _dpowers:
    97                           	opt stack 0
    98  000801  0001               	dw	1
    99  000803  000A               	dw	10
   100  000805  0064               	dw	100
   101  000807  03E8               	dw	1000
   102  000809  2710               	dw	10000
   103  00080B                     __end_of_dpowers:
   104                           	opt stack 0
   105  00080B                     _T1FCY:
   106                           	opt stack 0
   107  00080B  E848               	dw	59464
   108  00080D  0001               	dw	1
   109  00080F                     __end_of_T1FCY:
   110                           	opt stack 0
   111  00080F                     _FCY:
   112                           	opt stack 0
   113  00080F  4240               	dw	16960
   114  000811  000F               	dw	15
   115  000813                     __end_of_FCY:
   116                           	opt stack 0
   117  0000                     _TMR1	set	4046
   118  0000                     _TMR0	set	4054
   119  0000                     _INTCON	set	4082
   120  0000                     _IPR1	set	3999
   121  0000                     _INTCON2	set	4081
   122  0000                     _SPBRG	set	4015
   123  0000                     _TXSTA	set	4012
   124  0000                     _RCSTA	set	4011
   125  0000                     _TRISC	set	3988
   126  0000                     _TRISB	set	3987
   127  0000                     _TRISA	set	3986
   128  0000                     _ADCON2	set	4032
   129  0000                     _ADCON1	set	4033
   130  0000                     _ADCON0	set	4034
   131  0000                     _T0CON	set	4053
   132  0000                     _T2CON	set	4042
   133  0000                     _PR2	set	4043
   134  0000                     _CCPR2L	set	4027
   135  0000                     _T1CON	set	4045
   136  0000                     _RCREG	set	4014
   137  0000                     _TXREG	set	4013
   138  0000                     _CCP2CON	set	4026
   139  0000                     _TMR1IF	set	31984
   140  0000                     _TMR0IF	set	32658
   141  0000                     _RCIF	set	31989
   142  0000                     _TXIF	set	31988
   143  000813                     STR_1:
   144  000813  4C                 	db	76	;'L'
   145  000814  41                 	db	65	;'A'
   146  000815  42                 	db	66	;'B'
   147  000816  2E                 	db	46
   148  000817  43                 	db	67	;'C'
   149  000818  4F                 	db	79	;'O'
   150  000819  4E                 	db	78	;'N'
   151  00081A  54                 	db	84	;'T'
   152  00081B  2E                 	db	46
   153  00081C  44                 	db	68	;'D'
   154  00081D  49                 	db	73	;'I'
   155  00081E  47                 	db	71	;'G'
   156  00081F  49                 	db	73	;'I'
   157  000820  54                 	db	84	;'T'
   158  000821  41                 	db	65	;'A'
   159  000822  4C                 	db	76	;'L'
   160  000823  00                 	db	0
   161  000824                     STR_4:
   162  000824  54                 	db	84	;'T'
   163  000825  4D                 	db	77	;'M'
   164  000826  52                 	db	82	;'R'
   165  000827  30                 	db	48	;'0'
   166  000828  20                 	db	32
   167  000829  4F                 	db	79	;'O'
   168  00082A  56                 	db	86	;'V'
   169  00082B  45                 	db	69	;'E'
   170  00082C  52                 	db	82	;'R'
   171  00082D  46                 	db	70	;'F'
   172  00082E  4C                 	db	76	;'L'
   173  00082F  4F                 	db	79	;'O'
   174  000830  57                 	db	87	;'W'
   175  000831  20                 	db	32
   176  000832  3D                 	db	61	;'='
   177  000833  50                 	db	80	;'P'
   178  000834  00                 	db	0
   179  000835                     STR_2:
   180  000835  53                 	db	83	;'S'
   181  000836  65                 	db	101	;'e'
   182  000837  6A                 	db	106	;'j'
   183  000838  61                 	db	97	;'a'
   184  000839  20                 	db	32
   185  00083A  42                 	db	66	;'B'
   186  00083B  65                 	db	101	;'e'
   187  00083C  6D                 	db	109	;'m'
   188  00083D  2D                 	db	45
   189  00083E  56                 	db	86	;'V'
   190  00083F  69                 	db	105	;'i'
   191  000840  6E                 	db	110	;'n'
   192  000841  64                 	db	100	;'d'
   193  000842  6F                 	db	111	;'o'
   194  000843  21                 	db	33
   195  000844  00                 	db	0
   196  000845                     STR_6:
   197  000845  70                 	db	112	;'p'
   198  000846  77                 	db	119	;'w'
   199  000847  6D                 	db	109	;'m'
   200  000848  20                 	db	32
   201  000849  25                 	db	37
   202  00084A  33                 	db	51	;'3'
   203  00084B  64                 	db	100	;'d'
   204  00084C  25                 	db	37
   205  00084D  25                 	db	37
   206  00084E  00                 	db	0
   207  00084F                     STR_5:
   208  00084F  74                 	db	116	;'t'
   209  000850  6D                 	db	109	;'m'
   210  000851  72                 	db	114	;'r'
   211  000852  20                 	db	32
   212  000853  25                 	db	37
   213  000854  33                 	db	51	;'3'
   214  000855  75                 	db	117	;'u'
   215  000856  20                 	db	32
   216  000857  00                 	db	0
   217  000858                     STR_7:
   218  000858  28                 	db	40
   219  000859  6E                 	db	110	;'n'
   220  00085A  75                 	db	117	;'u'
   221  00085B  6C                 	db	108	;'l'
   222  00085C  6C                 	db	108	;'l'
   223  00085D  29                 	db	41
   224  00085E  00                 	db	0
   225  00085F                     STR_3:
   226  00085F  25                 	db	37
   227  000860  73                 	db	115	;'s'
   228  000861  00                 	db	0
   229                           
   230                           ; #config settings
   231  000862  00                 	db	0	; dummy byte at the end
   232  0000                     
   233                           	psect	cinit
   234  000F58                     __pcinit:
   235                           	opt stack 0
   236  000F58                     start_initialization:
   237                           	opt stack 0
   238  000F58                     __initialization:
   239                           	opt stack 0
   240                           
   241                           ; Initialize objects allocated to COMRAM (18 bytes)
   242                           ; load TBLPTR registers with __pidataCOMRAM
   243  000F58  0E40               	movlw	low __pidataCOMRAM
   244  000F5A  6EF6               	movwf	tblptrl,c
   245  000F5C  0E10               	movlw	high __pidataCOMRAM
   246  000F5E  6EF7               	movwf	tblptrh,c
   247  000F60  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   248  000F62  6EF8               	movwf	tblptru,c
   249  000F64  EE00  F02E         	lfsr	0,__pdataCOMRAM
   250  000F68  EE10 F012          	lfsr	1,18
   251  000F6C                     copy_data0:
   252  000F6C  0009               	tblrd		*+
   253  000F6E  CFF5 FFEE          	movff	tablat,postinc0
   254  000F72  50E5               	movf	postdec1,w,c
   255  000F74  50E1               	movf	fsr1l,w,c
   256  000F76  E1FA               	bnz	copy_data0
   257                           
   258                           ; Clear objects allocated to COMRAM (3 bytes)
   259  000F78  6A42               	clrf	(__pbssCOMRAM+2)& (0+255),c
   260  000F7A  6A41               	clrf	(__pbssCOMRAM+1)& (0+255),c
   261  000F7C  6A40               	clrf	__pbssCOMRAM& (0+255),c
   262  000F7E                     end_of_initialization:
   263                           	opt stack 0
   264  000F7E                     __end_of__initialization:
   265                           	opt stack 0
   266  000F7E  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267  000F80  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268  000F82  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  000F84  6EF8               	movwf	tblptru,c
   270  000F86  0100               	movlb	0
   271  000F88  EF0D  F006         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssCOMRAM
   281  000040                     __pbssCOMRAM:
   282                           	opt stack 0
   283  000040                     _ALIVE:
   284                           	opt stack 0
   285  000040                     	ds	1
   286  000041                     _T0ZOH:
   287                           	opt stack 0
   288  000041                     	ds	1
   289  000042                     _RC:
   290                           	opt stack 0
   291  000042                     	ds	1
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           postdec1	equ	0xFE5
   298                           fsr1l	equ	0xFE1
   299                           
   300                           	psect	dataCOMRAM
   301  00002E                     __pdataCOMRAM:
   302                           	opt stack 0
   303  00002E                     _ERR:
   304                           	opt stack 0
   305  00002E                     	ds	1
   306  00002F                     _BUF:
   307                           	opt stack 0
   308  00002F                     	ds	17
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           postdec1	equ	0xFE5
   315                           fsr1l	equ	0xFE1
   316                           
   317                           	psect	cstackBANK0
   318  000060                     __pcstackBANK0:
   319                           	opt stack 0
   320  000060                     printf@prec:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x0
   324  000060                     	ds	1
   325  000061                     printf@flag:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x1
   329  000061                     	ds	1
   330  000062                     printf@ap:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x2
   334  000062                     	ds	2
   335  000064                     printf@cp:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x4
   339  000064                     	ds	2
   340  000066                     printf@val:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x6
   344  000066                     	ds	2
   345  000068                     printf@len:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x8
   349  000068                     	ds	2
   350  00006A                     printf@width:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0xA
   354  00006A                     	ds	2
   355  00006C                     printf@c:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0xC
   359  00006C                     	ds	1
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           postdec1	equ	0xFE5
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	cstackCOMRAM
   369  000001                     __pcstackCOMRAM:
   370                           	opt stack 0
   371  000001                     ??_tmr_overflow:
   372  000001                     
   373                           ; 2 bytes @ 0x0
   374  000001                     	ds	21
   375  000016                     ??_isdigit:
   376  000016                     ??_putch:
   377  000016                     ??_prog_lcd:
   378  000016                     ?___wmul:
   379                           	opt stack 0
   380  000016                     ?___lwdiv:
   381                           	opt stack 0
   382  000016                     rsend@msg:
   383                           	opt stack 0
   384  000016                     write@duty:
   385                           	opt stack 0
   386  000016                     beep@j:
   387                           	opt stack 0
   388  000016                     ___wmul@multiplier:
   389                           	opt stack 0
   390  000016                     ___lwdiv@dividend:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x15
   394  000016                     	ds	1
   395  000017                     putch@msg:
   396                           	opt stack 0
   397  000017                     prog_lcd@msg:
   398                           	opt stack 0
   399  000017                     _isdigit$364:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x16
   403  000017                     	ds	1
   404  000018                     isdigit@c:
   405                           	opt stack 0
   406  000018                     ___wmul@multiplicand:
   407                           	opt stack 0
   408  000018                     ___lwdiv@divisor:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x17
   412  000018                     	ds	2
   413  00001A                     ___lwdiv@counter:
   414                           	opt stack 0
   415  00001A                     ___wmul@product:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x19
   419  00001A                     	ds	1
   420  00001B                     ___lwdiv@quotient:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x1A
   424  00001B                     	ds	2
   425  00001D                     ?___lwmod:
   426                           	opt stack 0
   427  00001D                     ___lwmod@dividend:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x1C
   431  00001D                     	ds	2
   432  00001F                     ___lwmod@divisor:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x1E
   436  00001F                     	ds	2
   437  000021                     ___lwmod@counter:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x20
   441  000021                     	ds	1
   442  000022                     ?_printf:
   443                           	opt stack 0
   444  000022                     printf@f:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x21
   448  000022                     	ds	4
   449  000026                     ??_printf:
   450                           
   451                           ; 1 bytes @ 0x25
   452  000026                     	ds	4
   453  00002A                     ??_init_lcd:
   454                           
   455                           ; 1 bytes @ 0x29
   456  00002A                     	ds	1
   457  00002B                     ??_main:
   458                           
   459                           ; 1 bytes @ 0x2A
   460  00002B                     	ds	2
   461  00002D                     main@x:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x2C
   465  00002D                     	ds	1
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           postdec1	equ	0xFE5
   472                           fsr1l	equ	0xFE1
   473                           
   474 ;;
   475 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   476 ;;
   477 ;; *************** function _main *****************
   478 ;; Defined at:
   479 ;;		line 179 in file "main.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;		None
   482 ;; Auto vars:     Size  Location     Type
   483 ;;  x               1   44[COMRAM] unsigned char 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  2  122[None  ] int 
   486 ;; Registers used:
   487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   493 ;;      Params:         0       0       0       0       0       0       0       0       0
   494 ;;      Locals:         1       0       0       0       0       0       0       0       0
   495 ;;      Temps:          2       0       0       0       0       0       0       0       0
   496 ;;      Totals:         3       0       0       0       0       0       0       0       0
   497 ;;Total ram usage:        3 bytes
   498 ;; Hardware stack levels required when called:    4
   499 ;; This function calls:
   500 ;;		_beep
   501 ;;		_init_lcd
   502 ;;		_printf
   503 ;;		_prog_lcd
   504 ;;		_read_tmr0
   505 ;;		_rsget
   506 ;;		_write
   507 ;; This function is called by:
   508 ;;		Startup code after reset
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text0
   513  000C1A                     __ptext0:
   514                           	opt stack 0
   515  000C1A                     _main:
   516                           	opt stack 27
   517                           
   518                           ;main.c: 180: T1CON = 0xF1;
   519                           
   520                           ;incstack = 0
   521  000C1A  0EF1               	movlw	241
   522  000C1C  6ECD               	movwf	4045,c	;volatile
   523                           
   524                           ;main.c: 181: CCP2CON = 0x0F;
   525  000C1E  0E0F               	movlw	15
   526  000C20  6EBA               	movwf	4026,c	;volatile
   527                           
   528                           ;main.c: 182: CCPR2L = 0;
   529  000C22  0E00               	movlw	0
   530  000C24  6EBB               	movwf	4027,c	;volatile
   531                           
   532                           ;main.c: 183: PR2 = 100;
   533  000C26  0E64               	movlw	100
   534  000C28  6ECB               	movwf	4043,c	;volatile
   535                           
   536                           ;main.c: 184: T2CON = 0x04;
   537  000C2A  0E04               	movlw	4
   538  000C2C  6ECA               	movwf	4042,c	;volatile
   539                           
   540                           ;main.c: 185: T0CON = 0xFF;
   541  000C2E  68D5               	setf	4053,c	;volatile
   542                           
   543                           ;main.c: 186: ADCON0 = 0x07;
   544  000C30  0E07               	movlw	7
   545  000C32  6EC2               	movwf	4034,c	;volatile
   546                           
   547                           ;main.c: 187: ADCON1 = 0x0D;
   548  000C34  0E0D               	movlw	13
   549  000C36  6EC1               	movwf	4033,c	;volatile
   550                           
   551                           ;main.c: 188: ADCON2 = 0x00;
   552  000C38  0E00               	movlw	0
   553  000C3A  6EC0               	movwf	4032,c	;volatile
   554                           
   555                           ;main.c: 189: TRISA = 0xFF;
   556  000C3C  6892               	setf	3986,c	;volatile
   557                           
   558                           ;main.c: 190: TRISB = 0x00;
   559  000C3E  0E00               	movlw	0
   560  000C40  6E93               	movwf	3987,c	;volatile
   561                           
   562                           ;main.c: 191: TRISC = 0xC0;
   563  000C42  0EC0               	movlw	192
   564  000C44  6E94               	movwf	3988,c	;volatile
   565                           
   566                           ;main.c: 192: RCSTA = 0x90;
   567  000C46  0E90               	movlw	144
   568  000C48  6EAB               	movwf	4011,c	;volatile
   569                           
   570                           ;main.c: 193: TXSTA = 0x24;
   571  000C4A  0E24               	movlw	36
   572  000C4C  6EAC               	movwf	4012,c	;volatile
   573                           
   574                           ;main.c: 194: SPBRG = 12;
   575  000C4E  0E0C               	movlw	12
   576  000C50  6EAF               	movwf	4015,c	;volatile
   577                           
   578                           ;main.c: 195: INTCON2 = 0x00;
   579  000C52  0E00               	movlw	0
   580  000C54  6EF1               	movwf	intcon2,c	;volatile
   581                           
   582                           ;main.c: 196: IPR1 = 0x30;
   583  000C56  0E30               	movlw	48
   584  000C58  6E9F               	movwf	3999,c	;volatile
   585                           
   586                           ;main.c: 197: init_lcd(); _delay((unsigned long)((1500)*(4000000/4000.0)));
   587  000C5A  ECE1  F006         	call	_init_lcd	;wreg free
   588  000C5E  0E08               	movlw	8
   589  000C60  6E2C               	movwf	(??_main+1)& (0+255),c
   590  000C62  0E9D               	movlw	157
   591  000C64  6E2B               	movwf	??_main& (0+255),c
   592  000C66  0E06               	movlw	6
   593  000C68                     u1137:
   594  000C68  2EE8               	decfsz	wreg,f,c
   595  000C6A  D7FE               	bra	u1137
   596  000C6C  2E2B               	decfsz	??_main& (0+255),f,c
   597  000C6E  D7FC               	bra	u1137
   598  000C70  2E2C               	decfsz	(??_main+1)& (0+255),f,c
   599  000C72  D7FA               	bra	u1137
   600                           
   601                           ;main.c: 198: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   602  000C74  ECC6  F007         	call	_beep	;wreg free
   603  000C78  0E82               	movlw	130
   604  000C7A  6E2B               	movwf	??_main& (0+255),c
   605  000C7C  0EDE               	movlw	222
   606  000C7E                     u1147:
   607  000C7E  2EE8               	decfsz	wreg,f,c
   608  000C80  D7FE               	bra	u1147
   609  000C82  2E2B               	decfsz	??_main& (0+255),f,c
   610  000C84  D7FC               	bra	u1147
   611                           
   612                           ;main.c: 199: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   613  000C86  ECC6  F007         	call	_beep	;wreg free
   614  000C8A  0E82               	movlw	130
   615  000C8C  6E2B               	movwf	??_main& (0+255),c
   616  000C8E  0EDE               	movlw	222
   617  000C90                     u1157:
   618  000C90  2EE8               	decfsz	wreg,f,c
   619  000C92  D7FE               	bra	u1157
   620  000C94  2E2B               	decfsz	??_main& (0+255),f,c
   621  000C96  D7FC               	bra	u1157
   622                           
   623                           ;main.c: 200: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   624  000C98  ECC6  F007         	call	_beep	;wreg free
   625  000C9C  0E82               	movlw	130
   626  000C9E  6E2B               	movwf	??_main& (0+255),c
   627  000CA0  0EDE               	movlw	222
   628  000CA2                     u1167:
   629  000CA2  2EE8               	decfsz	wreg,f,c
   630  000CA4  D7FE               	bra	u1167
   631  000CA6  2E2B               	decfsz	??_main& (0+255),f,c
   632  000CA8  D7FC               	bra	u1167
   633                           
   634                           ;main.c: 201: TMR0IF = 0;
   635  000CAA  94F2               	bcf	intcon,2,c	;volatile
   636                           
   637                           ;main.c: 202: TMR1IF = 0;
   638  000CAC  909E               	bcf	3998,0,c	;volatile
   639                           
   640                           ;main.c: 203: TMR0 = 0;
   641  000CAE  0E00               	movlw	0
   642  000CB0  6ED7               	movwf	4055,c	;volatile
   643  000CB2  0E00               	movlw	0
   644  000CB4  6ED6               	movwf	4054,c	;volatile
   645                           
   646                           ;main.c: 204: TMR1 = 0;
   647  000CB6  0E00               	movlw	0
   648  000CB8  6ECF               	movwf	4047,c	;volatile
   649  000CBA  0E00               	movlw	0
   650  000CBC  6ECE               	movwf	4046,c	;volatile
   651                           
   652                           ;main.c: 205: INTCON = 0xC0;
   653  000CBE  0EC0               	movlw	192
   654  000CC0  6EF2               	movwf	intcon,c	;volatile
   655  000CC2                     
   656                           ;main.c: 209: if (TMR1IF) {
   657  000CC2  A09E               	btfss	3998,0,c	;volatile
   658  000CC4  D035               	goto	l124
   659                           
   660                           ;main.c: 210: prog_lcd(0x80);
   661  000CC6  0E80               	movlw	128
   662  000CC8  EC43  F007         	call	_prog_lcd
   663                           
   664                           ;main.c: 211: if (ERR == NIL) printf("%s", BUF);
   665  000CCC  042E               	decf	_ERR,w,c	;volatile
   666  000CCE  A4D8               	btfss	status,2,c
   667  000CD0  D00B               	goto	l125
   668  000CD2  0E5F               	movlw	low STR_3
   669  000CD4  6E22               	movwf	printf@f,c
   670  000CD6  0E08               	movlw	high STR_3
   671  000CD8  6E23               	movwf	printf@f+1,c
   672  000CDA  0E2F               	movlw	low _BUF
   673  000CDC  6E24               	movwf	?_printf+2,c
   674  000CDE  0E00               	movlw	high _BUF
   675  000CE0  6E25               	movwf	?_printf+3,c
   676  000CE2  EC32  F004         	call	_printf	;wreg free
   677  000CE6  D009               	goto	l127
   678  000CE8                     l125:
   679                           
   680                           ;main.c: 212: else if (ERR == TMR0OF) printf("TMR0 OVERFLOW =P");
   681  000CE8  502E               	movf	_ERR,w,c	;volatile
   682  000CEA  A4D8               	btfss	status,2,c
   683  000CEC  D006               	goto	l127
   684  000CEE  0E24               	movlw	low STR_4
   685  000CF0  6E22               	movwf	printf@f,c
   686  000CF2  0E08               	movlw	high STR_4
   687  000CF4  6E23               	movwf	printf@f+1,c
   688  000CF6  EC32  F004         	call	_printf	;wreg free
   689  000CFA                     l127:
   690                           
   691                           ;main.c: 213: prog_lcd(0xC0);
   692  000CFA  0EC0               	movlw	192
   693  000CFC  EC43  F007         	call	_prog_lcd
   694                           
   695                           ;main.c: 214: printf("tmr %3u ", T0ZOH);
   696  000D00  0E4F               	movlw	low STR_5
   697  000D02  6E22               	movwf	printf@f,c
   698  000D04  0E08               	movlw	high STR_5
   699  000D06  6E23               	movwf	printf@f+1,c
   700  000D08  C041  F024         	movff	_T0ZOH,?_printf+2
   701  000D0C  6A25               	clrf	?_printf+3,c
   702  000D0E  EC32  F004         	call	_printf	;wreg free
   703                           
   704                           ;main.c: 215: prog_lcd(0xC8);
   705  000D12  0EC8               	movlw	200
   706  000D14  EC43  F007         	call	_prog_lcd
   707                           
   708                           ;main.c: 216: printf("pwm %3d%%", PWM);
   709  000D18  0E45               	movlw	low STR_6
   710  000D1A  6E22               	movwf	printf@f,c
   711  000D1C  0E08               	movlw	high STR_6
   712  000D1E  6E23               	movwf	printf@f+1,c
   713  000D20  50BB               	movf	4027,w,c
   714  000D22  6E24               	movwf	?_printf+2,c
   715  000D24  6A25               	clrf	?_printf+3,c
   716  000D26  BE24               	btfsc	?_printf+2,7,c
   717  000D28  0625               	decf	?_printf+3,f,c
   718  000D2A  EC32  F004         	call	_printf	;wreg free
   719                           
   720                           ;main.c: 217: TMR1IF = 0;
   721  000D2E  909E               	bcf	3998,0,c	;volatile
   722  000D30                     l124:
   723                           
   724                           ;main.c: 218: }
   725                           ;main.c: 220: char x = rsget();
   726  000D30  EC2F  F008         	call	_rsget	;wreg free
   727  000D34  6E2D               	movwf	main@x,c
   728                           
   729                           ;main.c: 221: if (x == '\n') {
   730  000D36  0E0A               	movlw	10
   731  000D38  182D               	xorwf	main@x,w,c
   732  000D3A  A4D8               	btfss	status,2,c
   733  000D3C  D036               	goto	l128
   734                           
   735                           ;main.c: 222: ALIVE = 1;
   736  000D3E  0E01               	movlw	1
   737  000D40  6E40               	movwf	_ALIVE,c
   738                           
   739                           ;main.c: 223: switch (BUF[0]) {
   740  000D42  D017               	goto	l129
   741  000D44  EC13  F008         	call	_read_tmr0	;wreg free
   742  000D48  D02D               	goto	l132
   743  000D4A  5030               	movf	_BUF+1,w,c
   744  000D4C  ECF3  F007         	call	_write
   745  000D50  D029               	goto	l132
   746  000D52  5030               	movf	_BUF+1,w,c
   747  000D54  ECF3  F007         	call	_write
   748  000D58  EC13  F008         	call	_read_tmr0	;wreg free
   749  000D5C  D023               	goto	l132
   750  000D5E  0E00               	movlw	0
   751  000D60  6E40               	movwf	_ALIVE,c
   752  000D62  0E00               	movlw	0
   753  000D64  ECF3  F007         	call	_write
   754  000D68  ECC6  F007         	call	_beep	;wreg free
   755  000D6C  ECC6  F007         	call	_beep	;wreg free
   756                           
   757                           ;main.c: 228: }
   758  000D70  D019               	goto	l132
   759  000D72                     l129:
   760  000D72  502F               	movf	_BUF,w,c
   761                           
   762                           ; Switch size 1, requested type "space"
   763                           ; Number of cases is 8, Range of values is 49 to 120
   764                           ; switch strategies available:
   765                           ; Name         Instructions Cycles
   766                           ; simple_byte           25    13 (average)
   767                           ;	Chosen strategy is simple_byte
   768  000D74  0A31               	xorlw	49	; case 49
   769  000D76  B4D8               	btfsc	status,2,c
   770  000D78  D7EC               	goto	l135
   771  000D7A  0A03               	xorlw	3	; case 50
   772  000D7C  B4D8               	btfsc	status,2,c
   773  000D7E  D7EF               	goto	l137
   774  000D80  0A07               	xorlw	7	; case 53
   775  000D82  B4D8               	btfsc	status,2,c
   776  000D84  D7E2               	goto	l133
   777  000D86  0A02               	xorlw	2	; case 55
   778  000D88  B4D8               	btfsc	status,2,c
   779  000D8A  D7DC               	goto	l130
   780  000D8C  0A45               	xorlw	69	; case 114
   781  000D8E  B4D8               	btfsc	status,2,c
   782  000D90  D7D9               	goto	l130
   783  000D92  0A01               	xorlw	1	; case 115
   784  000D94  B4D8               	btfsc	status,2,c
   785  000D96  D7E3               	goto	l137
   786  000D98  0A04               	xorlw	4	; case 119
   787  000D9A  B4D8               	btfsc	status,2,c
   788  000D9C  D7D6               	goto	l133
   789  000D9E  0A0F               	xorlw	15	; case 120
   790  000DA0  B4D8               	btfsc	status,2,c
   791  000DA2  D7D7               	goto	l135
   792  000DA4                     l132:
   793                           
   794                           ;main.c: 229: RC = 0;
   795  000DA4  0E00               	movlw	0
   796  000DA6  6E42               	movwf	_RC,c
   797                           
   798                           ;main.c: 230: }
   799  000DA8  D78C               	goto	l123
   800  000DAA                     l128:
   801                           
   802                           ;main.c: 231: else {
   803                           ;main.c: 232: BUF[RC] = x;
   804  000DAA  5042               	movf	_RC,w,c
   805  000DAC  0D01               	mullw	1
   806  000DAE  0E2F               	movlw	low _BUF
   807  000DB0  24F3               	addwf	prodl,w,c
   808  000DB2  6ED9               	movwf	fsr2l,c
   809  000DB4  0E00               	movlw	high _BUF
   810  000DB6  20F4               	addwfc	prodh,w,c
   811  000DB8  6EDA               	movwf	fsr2h,c
   812  000DBA  C02D  FFDF         	movff	main@x,indf2
   813                           
   814                           ;main.c: 233: RC++;
   815  000DBE  2A42               	incf	_RC,f,c
   816  000DC0  D780               	goto	l123
   817  000DC2                     __end_of_main:
   818                           	opt stack 0
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           prodh	equ	0xFF4
   824                           prodl	equ	0xFF3
   825                           intcon	equ	0xFF2
   826                           intcon2	equ	0xFF1
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postdec1	equ	0xFE5
   830                           fsr1l	equ	0xFE1
   831                           indf2	equ	0xFDF
   832                           fsr2h	equ	0xFDA
   833                           fsr2l	equ	0xFD9
   834                           status	equ	0xFD8
   835                           
   836 ;; *************** function _write *****************
   837 ;; Defined at:
   838 ;;		line 162 in file "main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  duty            1    wreg     char 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  duty            1   21[COMRAM] char 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   852 ;;      Params:         0       0       0       0       0       0       0       0       0
   853 ;;      Locals:         1       0       0       0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0       0       0       0
   855 ;;      Totals:         1       0       0       0       0       0       0       0       0
   856 ;;Total ram usage:        1 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    1
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text1
   867  000FE6                     __ptext1:
   868                           	opt stack 0
   869  000FE6                     _write:
   870                           	opt stack 29
   871                           
   872                           ;incstack = 0
   873                           ;write@duty stored from wreg
   874  000FE6  6E16               	movwf	write@duty,c
   875                           
   876                           ;main.c: 163: if (duty > 100) PWM = 100;
   877  000FE8  5016               	movf	write@duty,w,c
   878  000FEA  0A80               	xorlw	128
   879  000FEC  0F1B               	addlw	-229
   880  000FEE  A0D8               	btfss	status,0,c
   881  000FF0  D003               	goto	l108
   882  000FF2  0E64               	movlw	100
   883  000FF4  6EBB               	movwf	4027,c
   884  000FF6  0012               	return	
   885  000FF8                     l108:
   886                           
   887                           ;main.c: 164: else if (duty < 0) PWM = 0;
   888  000FF8  AE16               	btfss	write@duty,7,c
   889  000FFA  D003               	goto	l110
   890  000FFC  0E00               	movlw	0
   891  000FFE  6EBB               	movwf	4027,c
   892  001000  0012               	return	
   893  001002                     l110:
   894                           
   895                           ;main.c: 165: else PWM = duty;
   896  001002  C016  FFBB         	movff	write@duty,4027
   897  001006  0012               	return	
   898  001008                     __end_of_write:
   899                           	opt stack 0
   900                           tblptru	equ	0xFF8
   901                           tblptrh	equ	0xFF7
   902                           tblptrl	equ	0xFF6
   903                           tablat	equ	0xFF5
   904                           prodh	equ	0xFF4
   905                           prodl	equ	0xFF3
   906                           intcon	equ	0xFF2
   907                           intcon2	equ	0xFF1
   908                           postinc0	equ	0xFEE
   909                           wreg	equ	0xFE8
   910                           postdec1	equ	0xFE5
   911                           fsr1l	equ	0xFE1
   912                           indf2	equ	0xFDF
   913                           fsr2h	equ	0xFDA
   914                           fsr2l	equ	0xFD9
   915                           status	equ	0xFD8
   916                           
   917 ;; *************** function _rsget *****************
   918 ;; Defined at:
   919 ;;		line 147 in file "main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;		None
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      unsigned char 
   926 ;; Registers used:
   927 ;;		wreg, status,2
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   933 ;;      Params:         0       0       0       0       0       0       0       0       0
   934 ;;      Locals:         0       0       0       0       0       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0       0       0
   936 ;;      Totals:         0       0       0       0       0       0       0       0       0
   937 ;;Total ram usage:        0 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text2
   948  00105E                     __ptext2:
   949                           	opt stack 0
   950  00105E                     _rsget:
   951                           	opt stack 29
   952                           
   953                           ;main.c: 148: while (!RCIF) continue;
   954                           
   955                           ;incstack = 0
   956  00105E  AA9E               	btfss	3998,5,c	;volatile
   957  001060  D7FE               	goto	_rsget
   958                           
   959                           ;main.c: 149: return RCREG;
   960  001062  50AE               	movf	4014,w,c	;volatile
   961  001064  0012               	return	
   962  001066                     __end_of_rsget:
   963                           	opt stack 0
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           prodh	equ	0xFF4
   969                           prodl	equ	0xFF3
   970                           intcon	equ	0xFF2
   971                           intcon2	equ	0xFF1
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           postdec1	equ	0xFE5
   975                           fsr1l	equ	0xFE1
   976                           indf2	equ	0xFDF
   977                           fsr2h	equ	0xFDA
   978                           fsr2l	equ	0xFD9
   979                           status	equ	0xFD8
   980                           
   981 ;; *************** function _read_tmr0 *****************
   982 ;; Defined at:
   983 ;;		line 154 in file "main.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;		None
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      void 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   997 ;;      Params:         0       0       0       0       0       0       0       0       0
   998 ;;      Locals:         0       0       0       0       0       0       0       0       0
   999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1000 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1001 ;;Total ram usage:        0 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; Hardware stack levels required when called:    2
  1004 ;; This function calls:
  1005 ;;		_rsend
  1006 ;; This function is called by:
  1007 ;;		_main
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text3
  1012  001026                     __ptext3:
  1013                           	opt stack 0
  1014  001026                     _read_tmr0:
  1015                           	opt stack 28
  1016                           
  1017                           ;main.c: 155: T0ZOH = TMR0;
  1018                           
  1019                           ;incstack = 0
  1020  001026  CFD6 F041          	movff	4054,_T0ZOH	;volatile
  1021                           
  1022                           ;main.c: 156: rsend(0);
  1023  00102A  0E00               	movlw	0
  1024  00102C  EC29  F008         	call	_rsend
  1025                           
  1026                           ;main.c: 157: rsend(T0ZOH);
  1027  001030  5041               	movf	_T0ZOH,w,c
  1028  001032  EC29  F008         	call	_rsend
  1029                           
  1030                           ;main.c: 158: TMR0 -= T0ZOH;
  1031  001036  5041               	movf	_T0ZOH,w,c
  1032  001038  5ED6               	subwf	4054,f,c	;volatile
  1033  00103A  0E00               	movlw	0
  1034  00103C  5AD7               	subwfb	4055,f,c	;volatile
  1035  00103E  0012               	return	
  1036  001040                     __end_of_read_tmr0:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           prodh	equ	0xFF4
  1043                           prodl	equ	0xFF3
  1044                           intcon	equ	0xFF2
  1045                           intcon2	equ	0xFF1
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           indf2	equ	0xFDF
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           status	equ	0xFD8
  1054                           
  1055 ;; *************** function _rsend *****************
  1056 ;; Defined at:
  1057 ;;		line 142 in file "main.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  msg             1    wreg     unsigned char 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  msg             1   21[COMRAM] unsigned char 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1071 ;;      Params:         0       0       0       0       0       0       0       0       0
  1072 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1074 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1075 ;;Total ram usage:        1 bytes
  1076 ;; Hardware stack levels used:    1
  1077 ;; Hardware stack levels required when called:    1
  1078 ;; This function calls:
  1079 ;;		Nothing
  1080 ;; This function is called by:
  1081 ;;		_read_tmr0
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text4
  1086  001052                     __ptext4:
  1087                           	opt stack 0
  1088  001052                     _rsend:
  1089                           	opt stack 28
  1090                           
  1091                           ;incstack = 0
  1092                           ;rsend@msg stored from wreg
  1093  001052  6E16               	movwf	rsend@msg,c
  1094  001054                     
  1095                           ;main.c: 143: while (!TXIF) continue;
  1096  001054  A89E               	btfss	3998,4,c	;volatile
  1097  001056  D7FE               	goto	l1059
  1098                           
  1099                           ;main.c: 144: TXREG = msg;
  1100  001058  C016  FFAD         	movff	rsend@msg,4013	;volatile
  1101  00105C  0012               	return		;funcret
  1102  00105E                     __end_of_rsend:
  1103                           	opt stack 0
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           prodh	equ	0xFF4
  1109                           prodl	equ	0xFF3
  1110                           intcon	equ	0xFF2
  1111                           intcon2	equ	0xFF1
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           indf2	equ	0xFDF
  1117                           fsr2h	equ	0xFDA
  1118                           fsr2l	equ	0xFD9
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _init_lcd *****************
  1122 ;; Defined at:
  1123 ;;		line 128 in file "main.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1139 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1140 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1141 ;;Total ram usage:        1 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    3
  1144 ;; This function calls:
  1145 ;;		_printf
  1146 ;;		_prog_lcd
  1147 ;; This function is called by:
  1148 ;;		_main
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text5
  1153  000DC2                     __ptext5:
  1154                           	opt stack 0
  1155  000DC2                     _init_lcd:
  1156                           	opt stack 27
  1157                           
  1158                           ;main.c: 129: _delay((unsigned long)((20)*(4000000/4000.0)));
  1159                           
  1160                           ;incstack = 0
  1161  000DC2  0E1A               	movlw	26
  1162  000DC4  6E2A               	movwf	??_init_lcd& (0+255),c
  1163  000DC6  0EF8               	movlw	248
  1164  000DC8                     u1177:
  1165  000DC8  2EE8               	decfsz	wreg,f,c
  1166  000DCA  D7FE               	bra	u1177
  1167  000DCC  2E2A               	decfsz	??_init_lcd& (0+255),f,c
  1168  000DCE  D7FC               	bra	u1177
  1169  000DD0  D000               	nop2	
  1170                           
  1171                           ;main.c: 130: prog_lcd(0x02); _delay((unsigned long)((5)*(4000000/4000.0)));
  1172  000DD2  0E02               	movlw	2
  1173  000DD4  EC43  F007         	call	_prog_lcd
  1174  000DD8  0E07               	movlw	7
  1175  000DDA  6E2A               	movwf	??_init_lcd& (0+255),c
  1176  000DDC  0E7D               	movlw	125
  1177  000DDE                     u1187:
  1178  000DDE  2EE8               	decfsz	wreg,f,c
  1179  000DE0  D7FE               	bra	u1187
  1180  000DE2  2E2A               	decfsz	??_init_lcd& (0+255),f,c
  1181  000DE4  D7FC               	bra	u1187
  1182  000DE6  F000               	nop	
  1183                           
  1184                           ;main.c: 131: prog_lcd(0x28);
  1185  000DE8  0E28               	movlw	40
  1186  000DEA  EC43  F007         	call	_prog_lcd
  1187                           
  1188                           ;main.c: 132: prog_lcd(0x01); _delay((unsigned long)((2)*(4000000/4000.0)));
  1189  000DEE  0E01               	movlw	1
  1190  000DF0  EC43  F007         	call	_prog_lcd
  1191  000DF4  0E03               	movlw	3
  1192  000DF6  6E2A               	movwf	??_init_lcd& (0+255),c
  1193  000DF8  0E98               	movlw	152
  1194  000DFA                     u1197:
  1195  000DFA  2EE8               	decfsz	wreg,f,c
  1196  000DFC  D7FE               	bra	u1197
  1197  000DFE  2E2A               	decfsz	??_init_lcd& (0+255),f,c
  1198  000E00  D7FC               	bra	u1197
  1199                           
  1200                           ;main.c: 133: prog_lcd(0x0C);
  1201  000E02  0E0C               	movlw	12
  1202  000E04  EC43  F007         	call	_prog_lcd
  1203                           
  1204                           ;main.c: 134: prog_lcd(0x06);
  1205  000E08  0E06               	movlw	6
  1206  000E0A  EC43  F007         	call	_prog_lcd
  1207                           
  1208                           ;main.c: 135: prog_lcd(0x80);
  1209  000E0E  0E80               	movlw	128
  1210  000E10  EC43  F007         	call	_prog_lcd
  1211                           
  1212                           ;main.c: 136: printf("LAB.CONT.DIGITAL");
  1213  000E14  0E13               	movlw	low STR_1
  1214  000E16  6E22               	movwf	printf@f,c
  1215  000E18  0E08               	movlw	high STR_1
  1216  000E1A  6E23               	movwf	printf@f+1,c
  1217  000E1C  EC32  F004         	call	_printf	;wreg free
  1218                           
  1219                           ;main.c: 137: prog_lcd(0xC0);
  1220  000E20  0EC0               	movlw	192
  1221  000E22  EC43  F007         	call	_prog_lcd
  1222                           
  1223                           ;main.c: 138: printf("Seja Bem-Vindo!");
  1224  000E26  0E35               	movlw	low STR_2
  1225  000E28  6E22               	movwf	printf@f,c
  1226  000E2A  0E08               	movlw	high STR_2
  1227  000E2C  6E23               	movwf	printf@f+1,c
  1228  000E2E  EC32  F004         	call	_printf	;wreg free
  1229  000E32  0012               	return	
  1230  000E34                     __end_of_init_lcd:
  1231                           	opt stack 0
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           prodh	equ	0xFF4
  1237                           prodl	equ	0xFF3
  1238                           intcon	equ	0xFF2
  1239                           intcon2	equ	0xFF1
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           postdec1	equ	0xFE5
  1243                           fsr1l	equ	0xFE1
  1244                           indf2	equ	0xFDF
  1245                           fsr2h	equ	0xFDA
  1246                           fsr2l	equ	0xFD9
  1247                           status	equ	0xFD8
  1248                           
  1249 ;; *************** function _prog_lcd *****************
  1250 ;; Defined at:
  1251 ;;		line 115 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  msg             1    wreg     unsigned char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  msg             1   22[COMRAM] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2, status,0
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1265 ;;      Params:         0       0       0       0       0       0       0       0       0
  1266 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1267 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1268 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1269 ;;Total ram usage:        2 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    1
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_init_lcd
  1276 ;;		_main
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text6
  1281  000E86                     __ptext6:
  1282                           	opt stack 0
  1283  000E86                     _prog_lcd:
  1284                           	opt stack 29
  1285                           
  1286                           ;incstack = 0
  1287                           ;prog_lcd@msg stored from wreg
  1288  000E86  6E17               	movwf	prog_lcd@msg,c
  1289                           
  1290                           ;main.c: 116: CCP2CON = 0x00;
  1291  000E88  0E00               	movlw	0
  1292  000E8A  6EBA               	movwf	4026,c	;volatile
  1293                           
  1294                           ;main.c: 117: LCD.RS = 0;
  1295  000E8C  9A8A               	bcf	3978,5,c
  1296                           
  1297                           ;main.c: 118: LCD.CH = (msg >> 4);
  1298  000E8E  C017  F016         	movff	prog_lcd@msg,??_prog_lcd
  1299  000E92  3A16               	swapf	??_prog_lcd,f,c
  1300  000E94  0E0F               	movlw	15
  1301  000E96  1616               	andwf	??_prog_lcd,f,c
  1302  000E98  508A               	movf	3978,w,c
  1303  000E9A  1816               	xorwf	??_prog_lcd,w,c
  1304  000E9C  0BF0               	andlw	-16
  1305  000E9E  1816               	xorwf	??_prog_lcd,w,c
  1306  000EA0  6E8A               	movwf	3978,c
  1307                           
  1308                           ;main.c: 119: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  1309  000EA2  888A               	bsf	3978,4,c
  1310  000EA4  F000               	nop	
  1311                           
  1312                           ;main.c: 120: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  1313  000EA6  988A               	bcf	3978,4,c
  1314  000EA8  0E10               	movlw	16
  1315  000EAA                     u1207:
  1316  000EAA  2EE8               	decfsz	wreg,f,c
  1317  000EAC  D7FE               	bra	u1207
  1318  000EAE  D000               	nop2	
  1319                           
  1320                           ;main.c: 121: LCD.CH = msg;
  1321  000EB0  508A               	movf	3978,w,c
  1322  000EB2  1817               	xorwf	prog_lcd@msg,w,c
  1323  000EB4  0BF0               	andlw	-16
  1324  000EB6  1817               	xorwf	prog_lcd@msg,w,c
  1325  000EB8  6E8A               	movwf	3978,c
  1326                           
  1327                           ;main.c: 122: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  1328  000EBA  888A               	bsf	3978,4,c
  1329  000EBC  F000               	nop	
  1330                           
  1331                           ;main.c: 123: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  1332  000EBE  988A               	bcf	3978,4,c
  1333  000EC0  0E10               	movlw	16
  1334  000EC2                     u1217:
  1335  000EC2  2EE8               	decfsz	wreg,f,c
  1336  000EC4  D7FE               	bra	u1217
  1337  000EC6  D000               	nop2	
  1338                           
  1339                           ;main.c: 124: CCP2CON = 0x0F;
  1340  000EC8  0E0F               	movlw	15
  1341  000ECA  6EBA               	movwf	4026,c	;volatile
  1342  000ECC  0012               	return	
  1343  000ECE                     __end_of_prog_lcd:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           intcon	equ	0xFF2
  1352                           intcon2	equ	0xFF1
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           postdec1	equ	0xFE5
  1356                           fsr1l	equ	0xFE1
  1357                           indf2	equ	0xFDF
  1358                           fsr2h	equ	0xFDA
  1359                           fsr2l	equ	0xFD9
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _printf *****************
  1363 ;; Defined at:
  1364 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  f               2   33[COMRAM] PTR const unsigned char 
  1367 ;;		 -> STR_6(10), STR_5(9), STR_4(17), STR_3(3), 
  1368 ;;		 -> STR_2(16), STR_1(17), 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  tmpval          4    0        struct .
  1371 ;;  width           2   10[BANK0 ] int 
  1372 ;;  len             2    8[BANK0 ] unsigned int 
  1373 ;;  val             2    6[BANK0 ] unsigned int 
  1374 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  1375 ;;		 -> STR_7(7), printf@c(1), BUF(17), 
  1376 ;;  ap              2    2[BANK0 ] PTR void [1]
  1377 ;;		 -> ?_printf(2), 
  1378 ;;  c               1   12[BANK0 ] char 
  1379 ;;  flag            1    1[BANK0 ] unsigned char 
  1380 ;;  prec            1    0[BANK0 ] char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2   33[COMRAM] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1390 ;;      Params:         4       0       0       0       0       0       0       0       0
  1391 ;;      Locals:         0      13       0       0       0       0       0       0       0
  1392 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1393 ;;      Totals:         8      13       0       0       0       0       0       0       0
  1394 ;;Total ram usage:       21 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    2
  1397 ;; This function calls:
  1398 ;;		___lwdiv
  1399 ;;		___lwmod
  1400 ;;		___wmul
  1401 ;;		_isdigit
  1402 ;;		_putch
  1403 ;; This function is called by:
  1404 ;;		_init_lcd
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text7
  1410  000864                     __ptext7:
  1411                           	opt stack 0
  1412  000864                     _printf:
  1413                           	opt stack 28
  1414                           
  1415                           ;doprnt.c: 466: va_list ap;
  1416                           ;doprnt.c: 499: signed char c;
  1417                           ;doprnt.c: 501: int width;
  1418                           ;doprnt.c: 506: signed char prec;
  1419                           ;doprnt.c: 508: unsigned char flag;
  1420                           ;doprnt.c: 523: union {
  1421                           ;doprnt.c: 524: unsigned long vd;
  1422                           ;doprnt.c: 525: double integ;
  1423                           ;doprnt.c: 526: } tmpval;
  1424                           ;doprnt.c: 528: unsigned int val;
  1425                           ;doprnt.c: 529: unsigned len;
  1426                           ;doprnt.c: 530: const char * cp;
  1427                           ;doprnt.c: 533: *ap = __va_start();
  1428                           
  1429                           ;incstack = 0
  1430  000864  0E24               	movlw	low (?_printf+2)
  1431  000866  0100               	movlb	0	; () banked
  1432  000868  6F62               	movwf	printf@ap& (0+255),b
  1433  00086A  0E00               	movlw	high (?_printf+2)
  1434  00086C  0100               	movlb	0	; () banked
  1435  00086E  6F63               	movwf	(printf@ap+1)& (0+255),b
  1436                           
  1437                           ;doprnt.c: 536: while(c = *f++) {
  1438  000870  D1C6               	goto	u1070
  1439  000872                     
  1440                           ; BSR set to: 0
  1441                           ;doprnt.c: 538: if(c != '%')
  1442                           
  1443                           ; BSR set to: 0
  1444  000872  0E25               	movlw	37
  1445  000874  0100               	movlb	0	; () banked
  1446  000876  196C               	xorwf	printf@c& (0+255),w,b
  1447  000878  B4D8               	btfsc	status,2,c
  1448  00087A  D005               	goto	l157
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 540: {
  1452                           ;doprnt.c: 541: (putch(c) );
  1453  00087C  0100               	movlb	0	; () banked
  1454  00087E  516C               	movf	printf@c& (0+255),w,b
  1455  000880  EC67  F007         	call	_putch
  1456                           
  1457                           ;doprnt.c: 542: continue;
  1458  000884  D1BC               	goto	u1070
  1459  000886                     l157:
  1460                           
  1461                           ;doprnt.c: 543: }
  1462                           ;doprnt.c: 546: width = 0;
  1463  000886  0E00               	movlw	0
  1464  000888  0100               	movlb	0	; () banked
  1465  00088A  6F6B               	movwf	(printf@width+1)& (0+255),b
  1466  00088C  0E00               	movlw	0
  1467  00088E  6F6A               	movwf	printf@width& (0+255),b
  1468                           
  1469                           ;doprnt.c: 548: flag = 0;
  1470  000890  0E00               	movlw	0
  1471  000892  0100               	movlb	0	; () banked
  1472  000894  6F61               	movwf	printf@flag& (0+255),b
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1476  000896  C022  FFF6         	movff	printf@f,tblptrl
  1477  00089A  C023  FFF7         	movff	printf@f+1,tblptrh
  1478  00089E                     	if	0	;tblptru may be non-zero
  1479  00089E                     	endif
  1480  00089E                     	if	0	;tblptru may be non-zero
  1481  00089E                     	endif
  1482  00089E  0008               	tblrd		*
  1483  0008A0  50F5               	movf	tablat,w,c
  1484  0008A2  EC04  F008         	call	_isdigit
  1485  0008A6  A0D8               	btfss	status,0,c
  1486  0008A8  D0CD               	goto	l161
  1487                           
  1488                           ;doprnt.c: 598: width = 0;
  1489  0008AA  0E00               	movlw	0
  1490  0008AC  0100               	movlb	0	; () banked
  1491  0008AE  6F6B               	movwf	(printf@width+1)& (0+255),b
  1492  0008B0  0E00               	movlw	0
  1493  0008B2  6F6A               	movwf	printf@width& (0+255),b
  1494  0008B4                     
  1495                           ;doprnt.c: 600: width *= 10;
  1496                           
  1497                           ; BSR set to: 0
  1498  0008B4  C06A  F016         	movff	printf@width,___wmul@multiplier
  1499  0008B8  C06B  F017         	movff	printf@width+1,___wmul@multiplier+1
  1500  0008BC  0E00               	movlw	0
  1501  0008BE  6E19               	movwf	___wmul@multiplicand+1,c
  1502  0008C0  0E0A               	movlw	10
  1503  0008C2  6E18               	movwf	___wmul@multiplicand,c
  1504  0008C4  ECE0  F007         	call	___wmul	;wreg free
  1505  0008C8  C016  F06A         	movff	?___wmul,printf@width
  1506  0008CC  C017  F06B         	movff	?___wmul+1,printf@width+1
  1507                           
  1508                           ;doprnt.c: 601: width += *f++ - '0';
  1509  0008D0  0ED0               	movlw	208
  1510  0008D2  6E26               	movwf	??_printf& (0+255),c
  1511  0008D4  0EFF               	movlw	255
  1512  0008D6  6E27               	movwf	(??_printf+1)& (0+255),c
  1513  0008D8  C022  FFF6         	movff	printf@f,tblptrl
  1514  0008DC  C023  FFF7         	movff	printf@f+1,tblptrh
  1515  0008E0                     	if	0	;tblptru may be non-zero
  1516  0008E0                     	endif
  1517  0008E0                     	if	0	;tblptru may be non-zero
  1518  0008E0                     	endif
  1519  0008E0  0008               	tblrd		*
  1520  0008E2  50F5               	movf	tablat,w,c
  1521  0008E4  6E28               	movwf	(??_printf+2)& (0+255),c
  1522  0008E6  6A29               	clrf	(??_printf+3)& (0+255),c
  1523  0008E8  5026               	movf	??_printf,w,c
  1524  0008EA  2628               	addwf	??_printf+2,f,c
  1525  0008EC  5027               	movf	??_printf+1,w,c
  1526  0008EE  2229               	addwfc	??_printf+3,f,c
  1527  0008F0  5028               	movf	??_printf+2,w,c
  1528  0008F2  0100               	movlb	0	; () banked
  1529  0008F4  276A               	addwf	printf@width& (0+255),f,b
  1530  0008F6  5029               	movf	??_printf+3,w,c
  1531  0008F8  0100               	movlb	0	; () banked
  1532  0008FA  236B               	addwfc	(printf@width+1)& (0+255),f,b
  1533                           
  1534                           ; BSR set to: 0
  1535  0008FC  4A22               	infsnz	printf@f,f,c
  1536  0008FE  2A23               	incf	printf@f+1,f,c
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1540  000900  C022  FFF6         	movff	printf@f,tblptrl
  1541  000904  C023  FFF7         	movff	printf@f+1,tblptrh
  1542  000908                     	if	0	;tblptru may be non-zero
  1543  000908                     	endif
  1544  000908                     	if	0	;tblptru may be non-zero
  1545  000908                     	endif
  1546  000908  0008               	tblrd		*
  1547  00090A  50F5               	movf	tablat,w,c
  1548  00090C  EC04  F008         	call	_isdigit
  1549  000910  A0D8               	btfss	status,0,c
  1550  000912  D098               	goto	l161
  1551  000914  D7CF               	goto	l159
  1552  000916                     
  1553                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1554  000916  C062  FFD9         	movff	printf@ap,fsr2l
  1555  00091A  C063  FFDA         	movff	printf@ap+1,fsr2h
  1556  00091E  CFDE F064          	movff	postinc2,printf@cp
  1557  000922  CFDD F065          	movff	postdec2,printf@cp+1
  1558  000926  0E02               	movlw	2
  1559  000928  0100               	movlb	0	; () banked
  1560  00092A  2762               	addwf	printf@ap& (0+255),f,b
  1561  00092C  0E00               	movlw	0
  1562  00092E  2363               	addwfc	(printf@ap+1)& (0+255),f,b
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;doprnt.c: 740: if(!cp)
  1566  000930  0100               	movlb	0	; () banked
  1567  000932  5164               	movf	printf@cp& (0+255),w,b
  1568  000934  0100               	movlb	0	; () banked
  1569  000936  1165               	iorwf	(printf@cp+1)& (0+255),w,b
  1570  000938  A4D8               	btfss	status,2,c
  1571  00093A  D006               	goto	l168
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;doprnt.c: 741: cp = "(null)";
  1575  00093C  0E58               	movlw	low STR_7
  1576  00093E  0100               	movlb	0	; () banked
  1577  000940  6F64               	movwf	printf@cp& (0+255),b
  1578  000942  0E08               	movlw	high STR_7
  1579  000944  0100               	movlb	0	; () banked
  1580  000946  6F65               	movwf	(printf@cp+1)& (0+255),b
  1581  000948                     l168:
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;doprnt.c: 745: len = 0;
  1585                           
  1586                           ; BSR set to: 0
  1587  000948  0E00               	movlw	0
  1588  00094A  0100               	movlb	0	; () banked
  1589  00094C  6F69               	movwf	(printf@len+1)& (0+255),b
  1590  00094E  0E00               	movlw	0
  1591  000950  6F68               	movwf	printf@len& (0+255),b
  1592                           
  1593                           ;doprnt.c: 746: while(cp[len])
  1594  000952  D003               	goto	l169
  1595  000954                     
  1596                           ;doprnt.c: 747: len++;
  1597                           
  1598                           ; BSR set to: 0
  1599  000954  0100               	movlb	0	; () banked
  1600  000956  4B68               	infsnz	printf@len& (0+255),f,b
  1601  000958  2B69               	incf	(printf@len+1)& (0+255),f,b
  1602  00095A                     l169:
  1603                           
  1604                           ; BSR set to: 0
  1605                           
  1606                           ; BSR set to: 0
  1607  00095A  0100               	movlb	0	; () banked
  1608  00095C  5168               	movf	printf@len& (0+255),w,b
  1609  00095E  0100               	movlb	0	; () banked
  1610  000960  2564               	addwf	printf@cp& (0+255),w,b
  1611  000962  6E26               	movwf	??_printf& (0+255),c
  1612  000964  0100               	movlb	0	; () banked
  1613  000966  5169               	movf	(printf@len+1)& (0+255),w,b
  1614  000968  0100               	movlb	0	; () banked
  1615  00096A  2165               	addwfc	(printf@cp+1)& (0+255),w,b
  1616  00096C  6E27               	movwf	(??_printf+1)& (0+255),c
  1617  00096E  C026  FFF6         	movff	??_printf,tblptrl
  1618  000972  C027  FFF7         	movff	??_printf+1,tblptrh
  1619  000976  6AF8               	clrf	tblptru,c
  1620  000978  0E07               	movlw	(high __ramtop+-1)
  1621  00097A  64F7               	cpfsgt	tblptrh,c
  1622  00097C  D003               	bra	u907
  1623  00097E  0008               	tblrd		*
  1624  000980  50F5               	movf	tablat,w,c
  1625  000982  D005               	bra	u900
  1626  000984                     u907:
  1627  000984  CFF6 FFE9          	movff	tblptrl,fsr0l
  1628  000988  CFF7 FFEA          	movff	tblptrh,fsr0h
  1629  00098C  50EF               	movf	indf0,w,c
  1630  00098E                     u900:
  1631  00098E  0900               	iorlw	0
  1632  000990  A4D8               	btfss	status,2,c
  1633  000992  D7E0               	goto	l170
  1634  000994                     u910:
  1635                           
  1636                           ;doprnt.c: 757: if(width > len)
  1637                           
  1638                           ;doprnt.c: 750: dostring:
  1639  000994  0100               	movlb	0	; () banked
  1640  000996  516A               	movf	printf@width& (0+255),w,b
  1641  000998  0100               	movlb	0	; () banked
  1642  00099A  5D68               	subwf	printf@len& (0+255),w,b
  1643  00099C  0100               	movlb	0	; () banked
  1644  00099E  516B               	movf	(printf@width+1)& (0+255),w,b
  1645  0009A0  0100               	movlb	0	; () banked
  1646  0009A2  5969               	subwfb	(printf@len+1)& (0+255),w,b
  1647  0009A4  B0D8               	btfsc	status,0,c
  1648  0009A6  D009               	goto	l173
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;doprnt.c: 758: width -= len;
  1652  0009A8  0100               	movlb	0	; () banked
  1653  0009AA  5168               	movf	printf@len& (0+255),w,b
  1654  0009AC  0100               	movlb	0	; () banked
  1655  0009AE  5F6A               	subwf	printf@width& (0+255),f,b
  1656  0009B0  0100               	movlb	0	; () banked
  1657  0009B2  5169               	movf	(printf@len+1)& (0+255),w,b
  1658  0009B4  0100               	movlb	0	; () banked
  1659  0009B6  5B6B               	subwfb	(printf@width+1)& (0+255),f,b
  1660  0009B8  D009               	goto	l175
  1661  0009BA                     l173:
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;doprnt.c: 759: else
  1665                           ;doprnt.c: 760: width = 0;
  1666                           
  1667                           ; BSR set to: 0
  1668  0009BA  0E00               	movlw	0
  1669  0009BC  0100               	movlb	0	; () banked
  1670  0009BE  6F6B               	movwf	(printf@width+1)& (0+255),b
  1671  0009C0  0E00               	movlw	0
  1672  0009C2  6F6A               	movwf	printf@width& (0+255),b
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;doprnt.c: 764: while(width--)
  1676  0009C4  D003               	goto	l175
  1677  0009C6                     l1619:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;doprnt.c: 765: (putch(' ') );
  1681  0009C6  0E20               	movlw	32
  1682  0009C8  EC67  F007         	call	_putch
  1683  0009CC                     l175:
  1684  0009CC  0100               	movlb	0	; () banked
  1685  0009CE  076A               	decf	printf@width& (0+255),f,b
  1686  0009D0  A0D8               	btfss	status,0,c
  1687  0009D2  076B               	decf	(printf@width+1)& (0+255),f,b
  1688  0009D4  0100               	movlb	0	; () banked
  1689  0009D6  296A               	incf	printf@width& (0+255),w,b
  1690  0009D8  E1F6               	bnz	l1619
  1691  0009DA  0100               	movlb	0	; () banked
  1692  0009DC  296B               	incf	(printf@width+1)& (0+255),w,b
  1693  0009DE  B4D8               	btfsc	status,2,c
  1694  0009E0  D016               	goto	l178
  1695  0009E2  D7F1               	goto	l176
  1696  0009E4                     l1623:
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;doprnt.c: 768: (putch(*cp++) );
  1700  0009E4  C064  FFF6         	movff	printf@cp,tblptrl
  1701  0009E8  C065  FFF7         	movff	printf@cp+1,tblptrh
  1702  0009EC  6AF8               	clrf	tblptru,c
  1703  0009EE  0E07               	movlw	(high __ramtop+-1)
  1704  0009F0  64F7               	cpfsgt	tblptrh,c
  1705  0009F2  D003               	bra	u947
  1706  0009F4  0008               	tblrd		*
  1707  0009F6  50F5               	movf	tablat,w,c
  1708  0009F8  D005               	bra	u940
  1709  0009FA                     u947:
  1710  0009FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1711  0009FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1712  000A02  50EF               	movf	indf0,w,c
  1713  000A04                     u940:
  1714  000A04  EC67  F007         	call	_putch
  1715  000A08  0100               	movlb	0	; () banked
  1716  000A0A  4B64               	infsnz	printf@cp& (0+255),f,b
  1717  000A0C  2B65               	incf	(printf@cp+1)& (0+255),f,b
  1718  000A0E                     l178:
  1719                           
  1720                           ; BSR set to: 0
  1721                           
  1722                           ; BSR set to: 0
  1723  000A0E  0100               	movlb	0	; () banked
  1724  000A10  0768               	decf	printf@len& (0+255),f,b
  1725  000A12  A0D8               	btfss	status,0,c
  1726  000A14  0769               	decf	(printf@len+1)& (0+255),f,b
  1727  000A16  0100               	movlb	0	; () banked
  1728  000A18  2968               	incf	printf@len& (0+255),w,b
  1729  000A1A  E1E4               	bnz	l1623
  1730  000A1C  0100               	movlb	0	; () banked
  1731  000A1E  2969               	incf	(printf@len+1)& (0+255),w,b
  1732  000A20  B4D8               	btfsc	status,2,c
  1733  000A22  D0ED               	goto	u1070
  1734  000A24  D7DF               	goto	l179
  1735  000A26                     
  1736                           ; BSR set to: 0
  1737                           ;doprnt.c: 805: cp = (char *)&c;
  1738                           
  1739                           ; BSR set to: 0
  1740  000A26  0E6C               	movlw	low printf@c
  1741  000A28  0100               	movlb	0	; () banked
  1742  000A2A  6F64               	movwf	printf@cp& (0+255),b
  1743  000A2C  0E00               	movlw	high printf@c
  1744  000A2E  0100               	movlb	0	; () banked
  1745  000A30  6F65               	movwf	(printf@cp+1)& (0+255),b
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;doprnt.c: 806: len = 1;
  1749  000A32  0E00               	movlw	0
  1750  000A34  0100               	movlb	0	; () banked
  1751  000A36  6F69               	movwf	(printf@len+1)& (0+255),b
  1752  000A38  0E01               	movlw	1
  1753  000A3A  6F68               	movwf	printf@len& (0+255),b
  1754                           
  1755                           ;doprnt.c: 807: goto dostring;
  1756  000A3C  D7AB               	goto	u910
  1757  000A3E                     
  1758                           ; BSR set to: 0
  1759                           ;doprnt.c: 818: flag |= 0x40;
  1760                           
  1761                           ; BSR set to: 0
  1762  000A3E  0100               	movlb	0	; () banked
  1763  000A40  8D61               	bsf	printf@flag& (0+255),6,b
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;doprnt.c: 822: }
  1767                           
  1768                           ;doprnt.c: 819: break;
  1769  000A42  D01B               	goto	l166
  1770  000A44                     l161:
  1771                           
  1772                           ; BSR set to: 0
  1773  000A44  C022  FFF6         	movff	printf@f,tblptrl
  1774  000A48  C023  FFF7         	movff	printf@f+1,tblptrh
  1775  000A4C  4A22               	infsnz	printf@f,f,c
  1776  000A4E  2A23               	incf	printf@f+1,f,c
  1777  000A50                     	if	0	;tblptru may be non-zero
  1778  000A50                     	endif
  1779  000A50                     	if	0	;tblptru may be non-zero
  1780  000A50                     	endif
  1781  000A50  0008               	tblrd		*
  1782  000A52  CFF5 F06C          	movff	tablat,printf@c
  1783  000A56  0100               	movlb	0	; () banked
  1784  000A58  516C               	movf	printf@c& (0+255),w,b
  1785                           
  1786                           ; Switch size 1, requested type "space"
  1787                           ; Number of cases is 5, Range of values is 0 to 117
  1788                           ; switch strategies available:
  1789                           ; Name         Instructions Cycles
  1790                           ; simple_byte           16     9 (average)
  1791                           ;	Chosen strategy is simple_byte
  1792  000A5A  0A00               	xorlw	0	; case 0
  1793  000A5C  B4D8               	btfsc	status,2,c
  1794  000A5E  0012               	return	
  1795  000A60  0A64               	xorlw	100	; case 100
  1796  000A62  B4D8               	btfsc	status,2,c
  1797  000A64  D00A               	goto	l166
  1798  000A66  0A0D               	xorlw	13	; case 105
  1799  000A68  B4D8               	btfsc	status,2,c
  1800  000A6A  D007               	goto	l166
  1801  000A6C  0A1A               	xorlw	26	; case 115
  1802  000A6E  B4D8               	btfsc	status,2,c
  1803  000A70  D752               	goto	l167
  1804  000A72  0A06               	xorlw	6	; case 117
  1805  000A74  B4D8               	btfsc	status,2,c
  1806  000A76  D7E3               	goto	l182
  1807  000A78  D7D6               	goto	l181
  1808  000A7A                     l166:
  1809                           
  1810                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  1811  000A7A  0100               	movlb	0	; () banked
  1812  000A7C  BD61               	btfsc	printf@flag& (0+255),6,b
  1813  000A7E  D019               	goto	l183
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;doprnt.c: 1253: {
  1817                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1818  000A80  C062  FFD9         	movff	printf@ap,fsr2l
  1819  000A84  C063  FFDA         	movff	printf@ap+1,fsr2h
  1820  000A88  CFDE F066          	movff	postinc2,printf@val
  1821  000A8C  CFDD F067          	movff	postdec2,printf@val+1
  1822                           
  1823                           ; BSR set to: 0
  1824  000A90  0E02               	movlw	2
  1825  000A92  0100               	movlb	0	; () banked
  1826  000A94  2762               	addwf	printf@ap& (0+255),f,b
  1827  000A96  0E00               	movlw	0
  1828  000A98  2363               	addwfc	(printf@ap+1)& (0+255),f,b
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;doprnt.c: 1261: if((int)val < 0) {
  1832  000A9A  0100               	movlb	0	; () banked
  1833  000A9C  AF67               	btfss	(printf@val+1)& (0+255),7,b
  1834  000A9E  D016               	goto	l185
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;doprnt.c: 1262: flag |= 0x03;
  1838  000AA0  0E03               	movlw	3
  1839  000AA2  0100               	movlb	0	; () banked
  1840  000AA4  1361               	iorwf	printf@flag& (0+255),f,b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;doprnt.c: 1263: val = -val;
  1844  000AA6  0100               	movlb	0	; () banked
  1845  000AA8  6D66               	negf	printf@val& (0+255),b
  1846  000AAA  1F67               	comf	(printf@val+1)& (0+255),f,b
  1847  000AAC  B0D8               	btfsc	status,0,c
  1848  000AAE  2B67               	incf	(printf@val+1)& (0+255),f,b
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;doprnt.c: 1264: }
  1852                           ;doprnt.c: 1266: }
  1853  000AB0  D00D               	goto	l185
  1854  000AB2                     l183:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;doprnt.c: 1268: else
  1858                           ;doprnt.c: 1273: {
  1859                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1860                           
  1861                           ; BSR set to: 0
  1862  000AB2  C062  FFD9         	movff	printf@ap,fsr2l
  1863  000AB6  C063  FFDA         	movff	printf@ap+1,fsr2h
  1864  000ABA  CFDE F066          	movff	postinc2,printf@val
  1865  000ABE  CFDD F067          	movff	postdec2,printf@val+1
  1866                           
  1867                           ; BSR set to: 0
  1868  000AC2  0E02               	movlw	2
  1869  000AC4  0100               	movlb	0	; () banked
  1870  000AC6  2762               	addwf	printf@ap& (0+255),f,b
  1871  000AC8  0E00               	movlw	0
  1872  000ACA  2363               	addwfc	(printf@ap+1)& (0+255),f,b
  1873  000ACC                     l185:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;doprnt.c: 1287: }
  1877                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1878                           
  1879                           ; BSR set to: 0
  1880  000ACC  0E01               	movlw	1
  1881  000ACE  0100               	movlb	0	; () banked
  1882  000AD0  6F6C               	movwf	printf@c& (0+255),b
  1883  000AD2                     l1655:
  1884                           
  1885                           ; BSR set to: 0
  1886  000AD2  0E05               	movlw	5
  1887  000AD4  0100               	movlb	0	; () banked
  1888  000AD6  196C               	xorwf	printf@c& (0+255),w,b
  1889  000AD8  B4D8               	btfsc	status,2,c
  1890  000ADA  D016               	goto	u1000
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;doprnt.c: 1306: if(val < dpowers[c])
  1894                           
  1895                           ; BSR set to: 0
  1896                           
  1897                           ; BSR set to: 0
  1898  000ADC  0100               	movlb	0	; () banked
  1899  000ADE  516C               	movf	printf@c& (0+255),w,b
  1900  000AE0  0D02               	mullw	2
  1901  000AE2  0E01               	movlw	low _dpowers
  1902  000AE4  24F3               	addwf	prodl,w,c
  1903  000AE6  6EF6               	movwf	tblptrl,c
  1904  000AE8  0E08               	movlw	high _dpowers
  1905  000AEA  20F4               	addwfc	prodh,w,c
  1906  000AEC  6EF7               	movwf	tblptrh,c
  1907  000AEE                     	if	0	;There are less than 3 active tblptr bytes
  1908  000AEE                     	endif
  1909  000AEE  0009               	tblrd		*+
  1910  000AF0  50F5               	movf	tablat,w,c
  1911  000AF2  0100               	movlb	0	; () banked
  1912  000AF4  5D66               	subwf	printf@val& (0+255),w,b
  1913  000AF6  0009               	tblrd		*+
  1914  000AF8  50F5               	movf	tablat,w,c
  1915  000AFA  0100               	movlb	0	; () banked
  1916  000AFC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  1917  000AFE  A0D8               	btfss	status,0,c
  1918  000B00  D003               	goto	u1000
  1919                           
  1920                           ; BSR set to: 0
  1921                           
  1922                           ; BSR set to: 0
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;doprnt.c: 1307: break;
  1926  000B02  0100               	movlb	0	; () banked
  1927  000B04  2B6C               	incf	printf@c& (0+255),f,b
  1928  000B06  D7E5               	goto	l1655
  1929  000B08                     u1000:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1933                           
  1934                           ; BSR set to: 0
  1935  000B08  0100               	movlb	0	; () banked
  1936  000B0A  516A               	movf	printf@width& (0+255),w,b
  1937  000B0C  0100               	movlb	0	; () banked
  1938  000B0E  116B               	iorwf	(printf@width+1)& (0+255),w,b
  1939  000B10  B4D8               	btfsc	status,2,c
  1940  000B12  D00A               	goto	l189
  1941                           
  1942                           ; BSR set to: 0
  1943  000B14  C061  F026         	movff	printf@flag,??_printf
  1944  000B18  0E03               	movlw	3
  1945  000B1A  1626               	andwf	??_printf,f,c
  1946  000B1C  B4D8               	btfsc	status,2,c
  1947  000B1E  D004               	goto	l189
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;doprnt.c: 1346: width--;
  1951  000B20  0100               	movlb	0	; () banked
  1952  000B22  076A               	decf	printf@width& (0+255),f,b
  1953  000B24  A0D8               	btfss	status,0,c
  1954  000B26  076B               	decf	(printf@width+1)& (0+255),f,b
  1955  000B28                     l189:
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;doprnt.c: 1381: if(width > c)
  1959                           
  1960                           ; BSR set to: 0
  1961  000B28  0E80               	movlw	128
  1962  000B2A  0100               	movlb	0	; () banked
  1963  000B2C  BF6C               	btfsc	printf@c& (0+255),7,b
  1964  000B2E  0E7F               	movlw	127
  1965  000B30  6E26               	movwf	??_printf& (0+255),c
  1966  000B32  0100               	movlb	0	; () banked
  1967  000B34  516A               	movf	printf@width& (0+255),w,b
  1968  000B36  0100               	movlb	0	; () banked
  1969  000B38  5D6C               	subwf	printf@c& (0+255),w,b
  1970  000B3A  0100               	movlb	0	; () banked
  1971  000B3C  516B               	movf	(printf@width+1)& (0+255),w,b
  1972  000B3E  0A80               	xorlw	128
  1973  000B40  5826               	subwfb	??_printf& (0+255),w,c
  1974  000B42  B0D8               	btfsc	status,0,c
  1975  000B44  D00B               	goto	l190
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 1382: width -= c;
  1979  000B46  0100               	movlb	0	; () banked
  1980  000B48  516C               	movf	printf@c& (0+255),w,b
  1981  000B4A  0100               	movlb	0	; () banked
  1982  000B4C  5F6A               	subwf	printf@width& (0+255),f,b
  1983  000B4E  0E00               	movlw	0
  1984  000B50  0100               	movlb	0	; () banked
  1985  000B52  BF6C               	btfsc	printf@c& (0+255),7,b
  1986  000B54  0EFF               	movlw	255
  1987  000B56  0100               	movlb	0	; () banked
  1988  000B58  5B6B               	subwfb	(printf@width+1)& (0+255),f,b
  1989  000B5A  D005               	goto	l191
  1990  000B5C                     l190:
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;doprnt.c: 1383: else
  1994                           ;doprnt.c: 1384: width = 0;
  1995                           
  1996                           ; BSR set to: 0
  1997  000B5C  0E00               	movlw	0
  1998  000B5E  0100               	movlb	0	; () banked
  1999  000B60  6F6B               	movwf	(printf@width+1)& (0+255),b
  2000  000B62  0E00               	movlw	0
  2001  000B64  6F6A               	movwf	printf@width& (0+255),b
  2002  000B66                     l191:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;doprnt.c: 1422: {
  2006                           ;doprnt.c: 1424: if(width
  2007                           ;doprnt.c: 1428: )
  2008                           
  2009                           ; BSR set to: 0
  2010  000B66  0100               	movlb	0	; () banked
  2011  000B68  516A               	movf	printf@width& (0+255),w,b
  2012  000B6A  0100               	movlb	0	; () banked
  2013  000B6C  116B               	iorwf	(printf@width+1)& (0+255),w,b
  2014  000B6E  B4D8               	btfsc	status,2,c
  2015  000B70  D00D               	goto	u1050
  2016  000B72                     u1040:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;doprnt.c: 1430: (putch(' ') );
  2020                           
  2021                           ; BSR set to: 0
  2022                           
  2023                           ;doprnt.c: 1429: do
  2024  000B72  0E20               	movlw	32
  2025  000B74  EC67  F007         	call	_putch
  2026                           
  2027                           ;doprnt.c: 1431: while(--width);
  2028  000B78  0100               	movlb	0	; () banked
  2029  000B7A  076A               	decf	printf@width& (0+255),f,b
  2030  000B7C  A0D8               	btfss	status,0,c
  2031  000B7E  076B               	decf	(printf@width+1)& (0+255),f,b
  2032  000B80  0100               	movlb	0	; () banked
  2033  000B82  516A               	movf	printf@width& (0+255),w,b
  2034  000B84  0100               	movlb	0	; () banked
  2035  000B86  116B               	iorwf	(printf@width+1)& (0+255),w,b
  2036  000B88  A4D8               	btfss	status,2,c
  2037  000B8A  D7F3               	goto	u1040
  2038  000B8C                     u1050:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;doprnt.c: 1438: if(flag & 0x03)
  2042                           
  2043                           ; BSR set to: 0
  2044                           
  2045                           ; BSR set to: 0
  2046  000B8C  C061  F026         	movff	printf@flag,??_printf
  2047  000B90  0E03               	movlw	3
  2048  000B92  1626               	andwf	??_printf,f,c
  2049  000B94  B4D8               	btfsc	status,2,c
  2050  000B96  D003               	goto	l195
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;doprnt.c: 1439: (putch('-') );
  2054  000B98  0E2D               	movlw	45
  2055  000B9A  EC67  F007         	call	_putch
  2056  000B9E                     l195:
  2057                           
  2058                           ;doprnt.c: 1469: }
  2059                           ;doprnt.c: 1472: prec = c;
  2060  000B9E  C06C  F060         	movff	printf@c,printf@prec
  2061                           
  2062                           ;doprnt.c: 1474: while(prec--) {
  2063  000BA2  D027               	goto	l196
  2064  000BA4                     
  2065                           ;doprnt.c: 1478: {
  2066                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2067  000BA4  0100               	movlb	0	; () banked
  2068  000BA6  5160               	movf	printf@prec& (0+255),w,b
  2069  000BA8  0D02               	mullw	2
  2070  000BAA  0E01               	movlw	low _dpowers
  2071  000BAC  24F3               	addwf	prodl,w,c
  2072  000BAE  6EF6               	movwf	tblptrl,c
  2073  000BB0  0E08               	movlw	high _dpowers
  2074  000BB2  20F4               	addwfc	prodh,w,c
  2075  000BB4  6EF7               	movwf	tblptrh,c
  2076  000BB6                     	if	0	;There are less than 3 active tblptr bytes
  2077  000BB6                     	endif
  2078  000BB6  0009               	tblrd		*+
  2079  000BB8  CFF5 F018          	movff	tablat,___lwdiv@divisor
  2080  000BBC  000A               	tblrd		*-
  2081  000BBE  CFF5 F019          	movff	tablat,___lwdiv@divisor+1
  2082  000BC2  C066  F016         	movff	printf@val,___lwdiv@dividend
  2083  000BC6  C067  F017         	movff	printf@val+1,___lwdiv@dividend+1
  2084  000BCA  EC1A  F007         	call	___lwdiv	;wreg free
  2085  000BCE  C016  F01D         	movff	?___lwdiv,___lwmod@dividend
  2086  000BD2  C017  F01E         	movff	?___lwdiv+1,___lwmod@dividend+1
  2087  000BD6  0E00               	movlw	0
  2088  000BD8  6E20               	movwf	___lwmod@divisor+1,c
  2089  000BDA  0E0A               	movlw	10
  2090  000BDC  6E1F               	movwf	___lwmod@divisor,c
  2091  000BDE  EC8B  F007         	call	___lwmod	;wreg free
  2092  000BE2  501D               	movf	?___lwmod,w,c
  2093  000BE4  0F30               	addlw	48
  2094  000BE6  0100               	movlb	0	; () banked
  2095  000BE8  6F6C               	movwf	printf@c& (0+255),b
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;doprnt.c: 1523: }
  2099                           ;doprnt.c: 1524: (putch(c) );
  2100  000BEA  0100               	movlb	0	; () banked
  2101  000BEC  516C               	movf	printf@c& (0+255),w,b
  2102  000BEE  EC67  F007         	call	_putch
  2103  000BF2                     l196:
  2104  000BF2  0100               	movlb	0	; () banked
  2105  000BF4  0760               	decf	printf@prec& (0+255),f,b
  2106  000BF6  0100               	movlb	0	; () banked
  2107  000BF8  2960               	incf	printf@prec& (0+255),w,b
  2108  000BFA  A4D8               	btfss	status,2,c
  2109  000BFC  D7D3               	goto	l197
  2110  000BFE                     u1070:
  2111                           
  2112                           ; BSR set to: 0
  2113                           
  2114                           ; BSR set to: 0
  2115  000BFE  C022  FFF6         	movff	printf@f,tblptrl
  2116  000C02  C023  FFF7         	movff	printf@f+1,tblptrh
  2117  000C06  4A22               	infsnz	printf@f,f,c
  2118  000C08  2A23               	incf	printf@f+1,f,c
  2119  000C0A                     	if	0	;tblptru may be non-zero
  2120  000C0A                     	endif
  2121  000C0A                     	if	0	;tblptru may be non-zero
  2122  000C0A                     	endif
  2123  000C0A  0008               	tblrd		*
  2124  000C0C  CFF5 F06C          	movff	tablat,printf@c
  2125  000C10  0100               	movlb	0	; () banked
  2126  000C12  516C               	movf	printf@c& (0+255),w,b
  2127  000C14  B4D8               	btfsc	status,2,c
  2128  000C16  0012               	return	
  2129  000C18  D62C               	goto	l156
  2130  000C1A                     __end_of_printf:
  2131                           	opt stack 0
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           prodh	equ	0xFF4
  2137                           prodl	equ	0xFF3
  2138                           intcon	equ	0xFF2
  2139                           intcon2	equ	0xFF1
  2140                           indf0	equ	0xFEF
  2141                           postinc0	equ	0xFEE
  2142                           fsr0h	equ	0xFEA
  2143                           fsr0l	equ	0xFE9
  2144                           wreg	equ	0xFE8
  2145                           postdec1	equ	0xFE5
  2146                           fsr1l	equ	0xFE1
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           postdec2	equ	0xFDD
  2150                           fsr2h	equ	0xFDA
  2151                           fsr2l	equ	0xFD9
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _putch *****************
  2155 ;; Defined at:
  2156 ;;		line 102 in file "main.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  msg             1    wreg     unsigned char 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  msg             1   22[COMRAM] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2170 ;;      Params:         0       0       0       0       0       0       0       0       0
  2171 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2172 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2173 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2174 ;;Total ram usage:        2 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_printf
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text8
  2185  000ECE                     __ptext8:
  2186                           	opt stack 0
  2187  000ECE                     _putch:
  2188                           	opt stack 28
  2189                           
  2190                           ;incstack = 0
  2191                           ;putch@msg stored from wreg
  2192  000ECE  6E17               	movwf	putch@msg,c
  2193                           
  2194                           ;main.c: 103: CCP2CON = 0x00;
  2195  000ED0  0E00               	movlw	0
  2196  000ED2  6EBA               	movwf	4026,c	;volatile
  2197                           
  2198                           ;main.c: 104: LCD.RS = 1;
  2199  000ED4  8A8A               	bsf	3978,5,c
  2200                           
  2201                           ;main.c: 105: LCD.CH = (msg >> 4);
  2202  000ED6  C017  F016         	movff	putch@msg,??_putch
  2203  000EDA  3A16               	swapf	??_putch,f,c
  2204  000EDC  0E0F               	movlw	15
  2205  000EDE  1616               	andwf	??_putch,f,c
  2206  000EE0  508A               	movf	3978,w,c
  2207  000EE2  1816               	xorwf	??_putch,w,c
  2208  000EE4  0BF0               	andlw	-16
  2209  000EE6  1816               	xorwf	??_putch,w,c
  2210  000EE8  6E8A               	movwf	3978,c
  2211                           
  2212                           ;main.c: 106: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  2213  000EEA  888A               	bsf	3978,4,c
  2214  000EEC  F000               	nop	
  2215                           
  2216                           ;main.c: 107: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  2217  000EEE  988A               	bcf	3978,4,c
  2218  000EF0  0E10               	movlw	16
  2219  000EF2                     u1227:
  2220  000EF2  2EE8               	decfsz	wreg,f,c
  2221  000EF4  D7FE               	bra	u1227
  2222  000EF6  D000               	nop2	
  2223                           
  2224                           ;main.c: 108: LCD.CH = msg;
  2225  000EF8  508A               	movf	3978,w,c
  2226  000EFA  1817               	xorwf	putch@msg,w,c
  2227  000EFC  0BF0               	andlw	-16
  2228  000EFE  1817               	xorwf	putch@msg,w,c
  2229  000F00  6E8A               	movwf	3978,c
  2230                           
  2231                           ;main.c: 109: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  2232  000F02  888A               	bsf	3978,4,c
  2233  000F04  F000               	nop	
  2234                           
  2235                           ;main.c: 110: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  2236  000F06  988A               	bcf	3978,4,c
  2237  000F08  0E10               	movlw	16
  2238  000F0A                     u1237:
  2239  000F0A  2EE8               	decfsz	wreg,f,c
  2240  000F0C  D7FE               	bra	u1237
  2241  000F0E  D000               	nop2	
  2242                           
  2243                           ;main.c: 111: CCP2CON = 0x0F;
  2244  000F10  0E0F               	movlw	15
  2245  000F12  6EBA               	movwf	4026,c	;volatile
  2246  000F14  0012               	return	
  2247  000F16                     __end_of_putch:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           intcon	equ	0xFF2
  2256                           intcon2	equ	0xFF1
  2257                           indf0	equ	0xFEF
  2258                           postinc0	equ	0xFEE
  2259                           fsr0h	equ	0xFEA
  2260                           fsr0l	equ	0xFE9
  2261                           wreg	equ	0xFE8
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           indf2	equ	0xFDF
  2265                           postinc2	equ	0xFDE
  2266                           postdec2	equ	0xFDD
  2267                           fsr2h	equ	0xFDA
  2268                           fsr2l	equ	0xFD9
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _isdigit *****************
  2272 ;; Defined at:
  2273 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  c               1    wreg     unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  c               1   23[COMRAM] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2287 ;;      Params:         0       0       0       0       0       0       0       0       0
  2288 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2289 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2290 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2291 ;;Total ram usage:        3 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    1
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_printf
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text9
  2302  001008                     __ptext9:
  2303                           	opt stack 0
  2304  001008                     _isdigit:
  2305                           	opt stack 28
  2306                           
  2307                           ;incstack = 0
  2308                           ;isdigit@c stored from wreg
  2309  001008  6E18               	movwf	isdigit@c,c
  2310  00100A  0E00               	movlw	0
  2311  00100C  6E17               	movwf	_isdigit$364,c
  2312  00100E  0E3A               	movlw	58
  2313  001010  6018               	cpfslt	isdigit@c,c
  2314  001012  D005               	goto	l530
  2315  001014  0E2F               	movlw	47
  2316  001016  6418               	cpfsgt	isdigit@c,c
  2317  001018  D002               	goto	l530
  2318  00101A  0E01               	movlw	1
  2319  00101C  6E17               	movwf	_isdigit$364,c
  2320  00101E                     l530:
  2321  00101E  C017  F016         	movff	_isdigit$364,??_isdigit
  2322  001022  3016               	rrcf	??_isdigit,w,c
  2323  001024  0012               	return	
  2324  001026                     __end_of_isdigit:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           intcon	equ	0xFF2
  2333                           intcon2	equ	0xFF1
  2334                           indf0	equ	0xFEF
  2335                           postinc0	equ	0xFEE
  2336                           fsr0h	equ	0xFEA
  2337                           fsr0l	equ	0xFE9
  2338                           wreg	equ	0xFE8
  2339                           postdec1	equ	0xFE5
  2340                           fsr1l	equ	0xFE1
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function ___wmul *****************
  2349 ;; Defined at:
  2350 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  multiplier      2   21[COMRAM] unsigned int 
  2353 ;;  multiplicand    2   23[COMRAM] unsigned int 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  product         2   25[COMRAM] unsigned int 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  2   21[COMRAM] unsigned int 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, prodl, prodh
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2365 ;;      Params:         4       0       0       0       0       0       0       0       0
  2366 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2368 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2369 ;;Total ram usage:        6 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    1
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_printf
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text10
  2380  000FC0                     __ptext10:
  2381                           	opt stack 0
  2382  000FC0                     ___wmul:
  2383                           	opt stack 28
  2384                           
  2385                           ;incstack = 0
  2386  000FC0  5016               	movf	___wmul@multiplier,w,c
  2387  000FC2  0218               	mulwf	___wmul@multiplicand,c
  2388  000FC4  CFF3 F01A          	movff	prodl,___wmul@product
  2389  000FC8  CFF4 F01B          	movff	prodh,___wmul@product+1
  2390  000FCC  5016               	movf	___wmul@multiplier,w,c
  2391  000FCE  0219               	mulwf	___wmul@multiplicand+1,c
  2392  000FD0  50F3               	movf	prodl,w,c
  2393  000FD2  261B               	addwf	___wmul@product+1,f,c
  2394  000FD4  5017               	movf	___wmul@multiplier+1,w,c
  2395  000FD6  0218               	mulwf	___wmul@multiplicand,c
  2396  000FD8  50F3               	movf	prodl,w,c
  2397  000FDA  261B               	addwf	___wmul@product+1,f,c
  2398  000FDC  C01A  F016         	movff	___wmul@product,?___wmul
  2399  000FE0  C01B  F017         	movff	___wmul@product+1,?___wmul+1
  2400  000FE4  0012               	return	
  2401  000FE6                     __end_of___wmul:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon	equ	0xFF2
  2410                           intcon2	equ	0xFF1
  2411                           indf0	equ	0xFEF
  2412                           postinc0	equ	0xFEE
  2413                           fsr0h	equ	0xFEA
  2414                           fsr0l	equ	0xFE9
  2415                           wreg	equ	0xFE8
  2416                           postdec1	equ	0xFE5
  2417                           fsr1l	equ	0xFE1
  2418                           indf2	equ	0xFDF
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function ___lwmod *****************
  2426 ;; Defined at:
  2427 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  dividend        2   28[COMRAM] unsigned int 
  2430 ;;  divisor         2   30[COMRAM] unsigned int 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  counter         1   32[COMRAM] unsigned char 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  2   28[COMRAM] unsigned int 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2442 ;;      Params:         4       0       0       0       0       0       0       0       0
  2443 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2445 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2446 ;;Total ram usage:        5 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    1
  2449 ;; This function calls:
  2450 ;;		Nothing
  2451 ;; This function is called by:
  2452 ;;		_printf
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text11
  2457  000F16                     __ptext11:
  2458                           	opt stack 0
  2459  000F16                     ___lwmod:
  2460                           	opt stack 28
  2461                           
  2462                           ;incstack = 0
  2463  000F16  501F               	movf	___lwmod@divisor,w,c
  2464  000F18  1020               	iorwf	___lwmod@divisor+1,w,c
  2465  000F1A  B4D8               	btfsc	status,2,c
  2466  000F1C  D018               	goto	l624
  2467  000F1E  0E01               	movlw	1
  2468  000F20  6E21               	movwf	___lwmod@counter,c
  2469  000F22  D004               	goto	l619
  2470  000F24  90D8               	bcf	status,0,c
  2471  000F26  361F               	rlcf	___lwmod@divisor,f,c
  2472  000F28  3620               	rlcf	___lwmod@divisor+1,f,c
  2473  000F2A  2A21               	incf	___lwmod@counter,f,c
  2474  000F2C                     l619:
  2475  000F2C  AE20               	btfss	___lwmod@divisor+1,7,c
  2476  000F2E  D7FA               	goto	l620
  2477  000F30                     u840:
  2478  000F30  501F               	movf	___lwmod@divisor,w,c
  2479  000F32  5C1D               	subwf	___lwmod@dividend,w,c
  2480  000F34  5020               	movf	___lwmod@divisor+1,w,c
  2481  000F36  581E               	subwfb	___lwmod@dividend+1,w,c
  2482  000F38  A0D8               	btfss	status,0,c
  2483  000F3A  D004               	goto	l623
  2484  000F3C  501F               	movf	___lwmod@divisor,w,c
  2485  000F3E  5E1D               	subwf	___lwmod@dividend,f,c
  2486  000F40  5020               	movf	___lwmod@divisor+1,w,c
  2487  000F42  5A1E               	subwfb	___lwmod@dividend+1,f,c
  2488  000F44                     l623:
  2489  000F44  90D8               	bcf	status,0,c
  2490  000F46  3220               	rrcf	___lwmod@divisor+1,f,c
  2491  000F48  321F               	rrcf	___lwmod@divisor,f,c
  2492  000F4A  2E21               	decfsz	___lwmod@counter,f,c
  2493  000F4C  D7F1               	goto	u840
  2494  000F4E                     l624:
  2495  000F4E  C01D  F01D         	movff	___lwmod@dividend,?___lwmod
  2496  000F52  C01E  F01E         	movff	___lwmod@dividend+1,?___lwmod+1
  2497  000F56  0012               	return		;funcret
  2498  000F58                     __end_of___lwmod:
  2499                           	opt stack 0
  2500                           tblptru	equ	0xFF8
  2501                           tblptrh	equ	0xFF7
  2502                           tblptrl	equ	0xFF6
  2503                           tablat	equ	0xFF5
  2504                           prodh	equ	0xFF4
  2505                           prodl	equ	0xFF3
  2506                           intcon	equ	0xFF2
  2507                           intcon2	equ	0xFF1
  2508                           indf0	equ	0xFEF
  2509                           postinc0	equ	0xFEE
  2510                           fsr0h	equ	0xFEA
  2511                           fsr0l	equ	0xFE9
  2512                           wreg	equ	0xFE8
  2513                           postdec1	equ	0xFE5
  2514                           fsr1l	equ	0xFE1
  2515                           indf2	equ	0xFDF
  2516                           postinc2	equ	0xFDE
  2517                           postdec2	equ	0xFDD
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function ___lwdiv *****************
  2523 ;; Defined at:
  2524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  dividend        2   21[COMRAM] unsigned int 
  2527 ;;  divisor         2   23[COMRAM] unsigned int 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  quotient        2   26[COMRAM] unsigned int 
  2530 ;;  counter         1   25[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  2   21[COMRAM] unsigned int 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2540 ;;      Params:         4       0       0       0       0       0       0       0       0
  2541 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2543 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2544 ;;Total ram usage:        7 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    1
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_printf
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text12
  2555  000E34                     __ptext12:
  2556                           	opt stack 0
  2557  000E34                     ___lwdiv:
  2558                           	opt stack 28
  2559                           
  2560                           ;incstack = 0
  2561  000E34  0E00               	movlw	0
  2562  000E36  6E1C               	movwf	___lwdiv@quotient+1,c
  2563  000E38  0E00               	movlw	0
  2564  000E3A  6E1B               	movwf	___lwdiv@quotient,c
  2565  000E3C  5018               	movf	___lwdiv@divisor,w,c
  2566  000E3E  1019               	iorwf	___lwdiv@divisor+1,w,c
  2567  000E40  B4D8               	btfsc	status,2,c
  2568  000E42  D01C               	goto	l614
  2569  000E44  0E01               	movlw	1
  2570  000E46  6E1A               	movwf	___lwdiv@counter,c
  2571  000E48  D004               	goto	l609
  2572  000E4A  90D8               	bcf	status,0,c
  2573  000E4C  3618               	rlcf	___lwdiv@divisor,f,c
  2574  000E4E  3619               	rlcf	___lwdiv@divisor+1,f,c
  2575  000E50  2A1A               	incf	___lwdiv@counter,f,c
  2576  000E52                     l609:
  2577  000E52  AE19               	btfss	___lwdiv@divisor+1,7,c
  2578  000E54  D7FA               	goto	l610
  2579  000E56                     u810:
  2580  000E56  90D8               	bcf	status,0,c
  2581  000E58  361B               	rlcf	___lwdiv@quotient,f,c
  2582  000E5A  361C               	rlcf	___lwdiv@quotient+1,f,c
  2583  000E5C  5018               	movf	___lwdiv@divisor,w,c
  2584  000E5E  5C16               	subwf	___lwdiv@dividend,w,c
  2585  000E60  5019               	movf	___lwdiv@divisor+1,w,c
  2586  000E62  5817               	subwfb	___lwdiv@dividend+1,w,c
  2587  000E64  A0D8               	btfss	status,0,c
  2588  000E66  D005               	goto	l613
  2589  000E68  5018               	movf	___lwdiv@divisor,w,c
  2590  000E6A  5E16               	subwf	___lwdiv@dividend,f,c
  2591  000E6C  5019               	movf	___lwdiv@divisor+1,w,c
  2592  000E6E  5A17               	subwfb	___lwdiv@dividend+1,f,c
  2593  000E70  801B               	bsf	___lwdiv@quotient,0,c
  2594  000E72                     l613:
  2595  000E72  90D8               	bcf	status,0,c
  2596  000E74  3219               	rrcf	___lwdiv@divisor+1,f,c
  2597  000E76  3218               	rrcf	___lwdiv@divisor,f,c
  2598  000E78  2E1A               	decfsz	___lwdiv@counter,f,c
  2599  000E7A  D7ED               	goto	u810
  2600  000E7C                     l614:
  2601  000E7C  C01B  F016         	movff	___lwdiv@quotient,?___lwdiv
  2602  000E80  C01C  F017         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2603  000E84  0012               	return		;funcret
  2604  000E86                     __end_of___lwdiv:
  2605                           	opt stack 0
  2606                           tblptru	equ	0xFF8
  2607                           tblptrh	equ	0xFF7
  2608                           tblptrl	equ	0xFF6
  2609                           tablat	equ	0xFF5
  2610                           prodh	equ	0xFF4
  2611                           prodl	equ	0xFF3
  2612                           intcon	equ	0xFF2
  2613                           intcon2	equ	0xFF1
  2614                           indf0	equ	0xFEF
  2615                           postinc0	equ	0xFEE
  2616                           fsr0h	equ	0xFEA
  2617                           fsr0l	equ	0xFE9
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           postinc2	equ	0xFDE
  2623                           postdec2	equ	0xFDD
  2624                           fsr2h	equ	0xFDA
  2625                           fsr2l	equ	0xFD9
  2626                           status	equ	0xFD8
  2627                           
  2628 ;; *************** function _beep *****************
  2629 ;; Defined at:
  2630 ;;		line 95 in file "main.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;		None
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;  j               2   21[COMRAM] int 
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      void 
  2637 ;; Registers used:
  2638 ;;		wreg, status,2, status,0
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2644 ;;      Params:         0       0       0       0       0       0       0       0       0
  2645 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2647 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2648 ;;Total ram usage:        2 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:    1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_main
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text13
  2659  000F8C                     __ptext13:
  2660                           	opt stack 0
  2661  000F8C                     _beep:
  2662                           	opt stack 29
  2663                           
  2664                           ;main.c: 96: for (int j = 0; j < 100; ++j) {
  2665                           
  2666                           ;incstack = 0
  2667  000F8C  0E00               	movlw	0
  2668  000F8E  6E17               	movwf	beep@j+1,c
  2669  000F90  0E00               	movlw	0
  2670  000F92  6E16               	movwf	beep@j,c
  2671  000F94                     l1065:
  2672  000F94  BE17               	btfsc	beep@j+1,7,c
  2673  000F96  D006               	goto	l79
  2674  000F98  5017               	movf	beep@j+1,w,c
  2675  000F9A  E111               	bnz	l81
  2676  000F9C  0E64               	movlw	100
  2677  000F9E  5C16               	subwf	beep@j,w,c
  2678  000FA0  B0D8               	btfsc	status,0,c
  2679  000FA2  0012               	return	
  2680  000FA4                     l79:
  2681                           
  2682                           ;main.c: 97: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  2683  000FA4  8C8A               	bsf	3978,6,c
  2684  000FA6  0EC8               	movlw	200
  2685  000FA8                     u1247:
  2686  000FA8  D000               	nop2	
  2687  000FAA  2EE8               	decfsz	wreg,f,c
  2688  000FAC  D7FD               	bra	u1247
  2689                           
  2690                           ;main.c: 98: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  2691  000FAE  9C8A               	bcf	3978,6,c
  2692  000FB0  0EA6               	movlw	166
  2693  000FB2                     u1257:
  2694  000FB2  2EE8               	decfsz	wreg,f,c
  2695  000FB4  D7FE               	bra	u1257
  2696  000FB6  D000               	nop2	
  2697  000FB8  4A16               	infsnz	beep@j,f,c
  2698  000FBA  2A17               	incf	beep@j+1,f,c
  2699  000FBC  D7EB               	goto	l1065
  2700  000FBE                     l81:
  2701  000FBE  0012               	return		;funcret
  2702  000FC0                     __end_of_beep:
  2703                           	opt stack 0
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           intcon	equ	0xFF2
  2711                           intcon2	equ	0xFF1
  2712                           indf0	equ	0xFEF
  2713                           postinc0	equ	0xFEE
  2714                           fsr0h	equ	0xFEA
  2715                           fsr0l	equ	0xFE9
  2716                           wreg	equ	0xFE8
  2717                           postdec1	equ	0xFE5
  2718                           fsr1l	equ	0xFE1
  2719                           indf2	equ	0xFDF
  2720                           postinc2	equ	0xFDE
  2721                           postdec2	equ	0xFDD
  2722                           fsr2h	equ	0xFDA
  2723                           fsr2l	equ	0xFD9
  2724                           status	equ	0xFD8
  2725                           
  2726 ;; *************** function _tmr_overflow *****************
  2727 ;; Defined at:
  2728 ;;		line 170 in file "main.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;		None
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2742 ;;      Params:         0       0       0       0       0       0       0       0       0
  2743 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2744 ;;      Temps:         21       0       0       0       0       0       0       0       0
  2745 ;;      Totals:        21       0       0       0       0       0       0       0       0
  2746 ;;Total ram usage:       21 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		Interrupt level 1
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	intcodelo
  2756  000018                     __pintcodelo:
  2757                           	opt stack 0
  2758  000018                     _tmr_overflow:
  2759                           	opt stack 27
  2760                           
  2761                           ;incstack = 0
  2762  000018  8043               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2763  00001A  CFD8 F001          	movff	status,??_tmr_overflow
  2764  00001E  CFE8 F002          	movff	wreg,??_tmr_overflow+1
  2765  000022  CFE0 F003          	movff	bsr,??_tmr_overflow+2
  2766  000026  CFFA F004          	movff	pclath,??_tmr_overflow+3
  2767  00002A  CFFB F005          	movff	pclatu,??_tmr_overflow+4
  2768  00002E  CFE9 F006          	movff	fsr0l,??_tmr_overflow+5
  2769  000032  CFEA F007          	movff	fsr0h,??_tmr_overflow+6
  2770  000036  CFE1 F008          	movff	fsr1l,??_tmr_overflow+7
  2771  00003A  CFE2 F009          	movff	fsr1h,??_tmr_overflow+8
  2772  00003E  CFD9 F00A          	movff	fsr2l,??_tmr_overflow+9
  2773  000042  CFDA F00B          	movff	fsr2h,??_tmr_overflow+10
  2774  000046  CFF3 F00C          	movff	prodl,??_tmr_overflow+11
  2775  00004A  CFF4 F00D          	movff	prodh,??_tmr_overflow+12
  2776  00004E  CFF6 F00E          	movff	tblptrl,??_tmr_overflow+13
  2777  000052  CFF7 F00F          	movff	tblptrh,??_tmr_overflow+14
  2778  000056  CFF8 F010          	movff	tblptru,??_tmr_overflow+15
  2779  00005A  CFF5 F011          	movff	tablat,??_tmr_overflow+16
  2780  00005E  C043  F012         	movff	btemp,??_tmr_overflow+17
  2781  000062  C044  F013         	movff	btemp+1,??_tmr_overflow+18
  2782  000066  C045  F014         	movff	btemp+2,??_tmr_overflow+19
  2783  00006A  C046  F015         	movff	btemp+3,??_tmr_overflow+20
  2784                           
  2785                           ;main.c: 171: if (ALIVE) {
  2786  00006E  5040               	movf	_ALIVE,w,c
  2787  000070  B4D8               	btfsc	status,2,c
  2788  000072  D003               	goto	i1l117
  2789                           
  2790                           ;main.c: 172: BUZ = 1;
  2791  000074  8C8A               	bsf	3978,6,c
  2792                           
  2793                           ;main.c: 173: ERR = TMR0OF;
  2794  000076  0E00               	movlw	0
  2795  000078  6E2E               	movwf	_ERR,c	;volatile
  2796  00007A                     i1l117:
  2797                           
  2798                           ;main.c: 174: }
  2799                           ;main.c: 175: TMR0IF = 0;
  2800  00007A  94F2               	bcf	intcon,2,c	;volatile
  2801                           
  2802                           ;main.c: 176: return;
  2803  00007C  C015  F046         	movff	??_tmr_overflow+20,btemp+3
  2804  000080  C014  F045         	movff	??_tmr_overflow+19,btemp+2
  2805  000084  C013  F044         	movff	??_tmr_overflow+18,btemp+1
  2806  000088  C012  F043         	movff	??_tmr_overflow+17,btemp
  2807  00008C  C011  FFF5         	movff	??_tmr_overflow+16,tablat
  2808  000090  C010  FFF8         	movff	??_tmr_overflow+15,tblptru
  2809  000094  C00F  FFF7         	movff	??_tmr_overflow+14,tblptrh
  2810  000098  C00E  FFF6         	movff	??_tmr_overflow+13,tblptrl
  2811  00009C  C00D  FFF4         	movff	??_tmr_overflow+12,prodh
  2812  0000A0  C00C  FFF3         	movff	??_tmr_overflow+11,prodl
  2813  0000A4  C00B  FFDA         	movff	??_tmr_overflow+10,fsr2h
  2814  0000A8  C00A  FFD9         	movff	??_tmr_overflow+9,fsr2l
  2815  0000AC  C009  FFE2         	movff	??_tmr_overflow+8,fsr1h
  2816  0000B0  C008  FFE1         	movff	??_tmr_overflow+7,fsr1l
  2817  0000B4  C007  FFEA         	movff	??_tmr_overflow+6,fsr0h
  2818  0000B8  C006  FFE9         	movff	??_tmr_overflow+5,fsr0l
  2819  0000BC  C005  FFFB         	movff	??_tmr_overflow+4,pclatu
  2820  0000C0  C004  FFFA         	movff	??_tmr_overflow+3,pclath
  2821  0000C4  C003  FFE0         	movff	??_tmr_overflow+2,bsr
  2822  0000C8  C002  FFE8         	movff	??_tmr_overflow+1,wreg
  2823  0000CC  C001  FFD8         	movff	??_tmr_overflow,status
  2824  0000D0  9043               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2825  0000D2  0010               	retfie	
  2826  0000D4                     __end_of_tmr_overflow:
  2827                           	opt stack 0
  2828                           pclatu	equ	0xFFB
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           intcon2	equ	0xFF1
  2838                           indf0	equ	0xFEF
  2839                           postinc0	equ	0xFEE
  2840                           fsr0h	equ	0xFEA
  2841                           fsr0l	equ	0xFE9
  2842                           wreg	equ	0xFE8
  2843                           postdec1	equ	0xFE5
  2844                           fsr1h	equ	0xFE2
  2845                           fsr1l	equ	0xFE1
  2846                           bsr	equ	0xFE0
  2847                           indf2	equ	0xFDF
  2848                           postinc2	equ	0xFDE
  2849                           postdec2	equ	0xFDD
  2850                           fsr2h	equ	0xFDA
  2851                           fsr2l	equ	0xFD9
  2852                           status	equ	0xFD8
  2853                           pclatu	equ	0xFFB
  2854                           pclath	equ	0xFFA
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodh	equ	0xFF4
  2860                           prodl	equ	0xFF3
  2861                           intcon	equ	0xFF2
  2862                           intcon2	equ	0xFF1
  2863                           indf0	equ	0xFEF
  2864                           postinc0	equ	0xFEE
  2865                           fsr0h	equ	0xFEA
  2866                           fsr0l	equ	0xFE9
  2867                           wreg	equ	0xFE8
  2868                           postdec1	equ	0xFE5
  2869                           fsr1h	equ	0xFE2
  2870                           fsr1l	equ	0xFE1
  2871                           bsr	equ	0xFE0
  2872                           indf2	equ	0xFDF
  2873                           postinc2	equ	0xFDE
  2874                           postdec2	equ	0xFDD
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879                           	psect	rparam
  2880  0000                     pclatu	equ	0xFFB
  2881                           pclath	equ	0xFFA
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           intcon	equ	0xFF2
  2889                           intcon2	equ	0xFF1
  2890                           indf0	equ	0xFEF
  2891                           postinc0	equ	0xFEE
  2892                           fsr0h	equ	0xFEA
  2893                           fsr0l	equ	0xFE9
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           bsr	equ	0xFE0
  2899                           indf2	equ	0xFDF
  2900                           postinc2	equ	0xFDE
  2901                           postdec2	equ	0xFDD
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906                           	psect	temp
  2907  000043                     btemp:
  2908                           	opt stack 0
  2909  000043                     	ds	1
  2910  0000                     int$flags	set	btemp
  2911  0000                     wtemp6	set	btemp+1
  2912                           pclatu	equ	0xFFB
  2913                           pclath	equ	0xFFA
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           intcon2	equ	0xFF1
  2922                           indf0	equ	0xFEF
  2923                           postinc0	equ	0xFEE
  2924                           fsr0h	equ	0xFEA
  2925                           fsr0l	equ	0xFE9
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1h	equ	0xFE2
  2929                           fsr1l	equ	0xFE1
  2930                           bsr	equ	0xFE0
  2931                           indf2	equ	0xFDF
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    18
    Data        18
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      66
    BANK0           160     13      13
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[7]), printf@c(BANK0[1]), BUF(COMRAM[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[10]), STR_5(CODE[9]), STR_4(CODE[17]), STR_3(CODE[3]), 
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_init_lcd
    _read_tmr0->_rsend
    _init_lcd->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tmr_overflow in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _init_lcd->_printf

Critical Paths under _tmr_overflow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tmr_overflow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tmr_overflow in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tmr_overflow in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tmr_overflow in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tmr_overflow in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tmr_overflow in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tmr_overflow in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6823
                                             42 COMRAM     3     3      0
                               _beep
                           _init_lcd
                             _printf
                           _prog_lcd
                          _read_tmr0
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      45
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr0                                            0     0      0      15
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                1     1      0      15
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0    3334
                                             41 COMRAM     1     1      0
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (1) _prog_lcd                                             2     2      0      30
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    21      4    3304
                                             33 COMRAM     8     4      4
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      44
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     412
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             28 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             21 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _beep                                                 2     2      0      30
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tmr_overflow                                        21    21      0       0
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _init_lcd
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _prog_lcd
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _prog_lcd
   _read_tmr0
     _rsend
   _rsget
   _write

 _tmr_overflow (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D       D       5        8.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      42       1       70.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4F      20        0.0%
DATA                 0      0      4F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Dec 14 22:45:20 2017

                     l81 0FBE                       l79 0FA4                       _RC 0042  
                     bsr 000FE0      ___wmul@multiplicand 0018              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l110 1002                      l130 0D44  
                    l123 0CC2                      l108 0FF8                      l132 0DA4  
                    l124 0D30                      l133 0D4A                      l125 0CE8  
                    l135 0D52                      l127 0CFA                      l128 0DAA  
                    l161 0A44                      l129 0D72                      l137 0D5E  
                    l170 0954                      l156 0872                      l181 0A26  
                    l173 09BA                      l157 0886                      l190 0B5C  
                    l182 0A3E                      l166 0A7A                      l191 0B66  
                    l183 0AB2                      l175 09CC                      l167 0916  
                    l159 08B4                      l176 09C6                      l168 0948  
                    l185 0ACC                      l169 095A                      l610 0E4A  
                    l530 101E                      l178 0A0E                      l195 0B9E  
                    l179 09E4                      l620 0F24                      l196 0BF2  
                    l613 0E72                      l197 0BA4                      l189 0B28  
                    l614 0E7C                      l623 0F44                      l624 0F4E  
                    l609 0E52                      l619 0F2C                      _FCY 080F  
                    _BUF 002F             __CFG_CPB$OFF 000000                      _LCD 000F8A  
                    _ERR 002E                      _BUZ 007C56                      _PR2 000FCB  
           __CFG_CPD$OFF 000000                      u810 0E56                      u900 098E  
                    u910 0994                      u840 0F30                      u907 0984  
                    u940 0A04                      u947 09FA                      _PWM 000FBB  
           __CFG_BOR$OFF 000000                      prod 000FF3                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1065 0F94                     l1059 1054                     l1623 09E4  
                   l1619 09C6                     l1655 0AD2             _tmr_overflow 0018  
                   STR_1 0813                     STR_2 0835                     STR_3 085F  
                   STR_4 0824                     STR_5 084F                     STR_6 0845  
                   STR_7 0858                     u1000 0B08                     u1040 0B72  
                   u1050 0B8C                     u1070 0BFE                     u1207 0EAA  
                   u1217 0EC2                     u1137 0C68                     u1227 0EF2  
                   u1147 0C7E                     u1237 0F0A                     u1157 0C90  
                   u1247 0FA8                     u1167 0CA2                     u1257 0FB2  
                   u1177 0DC8                     u1187 0DDE                     u1197 0DFA  
                   _IPR1 000F9F                     _RCIF 007CF5                     _TMR0 000FD6  
                   _TMR1 000FCE                     _TXIF 007CF4                     _beep 0F8C  
                   _main 0C1A                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0043                     prodh 000FF4                     prodl 000FF3  
                   start 00D4            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000            __CFG_PLLDIV$1 000000                    ?_beep 0001  
                  ?_main 0001                    _ALIVE 0040                    _T0CON 000FD5  
                  _T1FCY 080B                    _T1CON 000FCD                    _T2CON 000FCA  
        __end_of___lwdiv 0E86                    i1l117 007A                    _T0ZOH 0041  
        __end_of___lwmod 0F58                    _RCREG 000FAE                    _RCSTA 000FAB  
                  _SPBRG 000FAF            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TXREG 000FAD  
                  _TXSTA 000FAC            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  beep@j 0016          __end_of_dpowers 080B          __end_of_isdigit 1026  
                  _rsend 1052                    _rsget 105E                    _putch 0ECE  
                  main@x 002D                    _write 0FE6                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8                    wtemp6 0044  
         __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000          __initialization 0F58  
           __end_of_beep 0FC0             __end_of_main 0DC2                   ??_beep 0016  
                 ??_main 002B            __activetblptr 000002          __CFG_CCP2MX$OFF 000000  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _CCPR2L 000FBB                   ?_rsend 0001                   ?_rsget 0001  
                 ?_putch 0001                   ?_write 0001                   _INTCON 000FF2  
                 _TMR0IF 007F92                   _TMR1IF 007CF0           __CFG_XINST$OFF 000000  
                 ___wmul 0FC0           __CFG_STVREN$ON 000000                ??___lwdiv 001A  
              ??___lwmod 0021         __end_of_init_lcd 0E34                   _printf 0864  
           __pdataCOMRAM 002E                ??_isdigit 0016             __mediumconst 0000  
       __end_of_prog_lcd 0ECE                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0F7E  
          ___rparam_used 000001            __end_of_T1FCY 080F           __pcstackCOMRAM 0001  
          __end_of_rsend 105E            __end_of_rsget 1066            __end_of_putch 0F16  
          __end_of_write 1008                  ??_rsend 0016                  ??_rsget 0016  
                ??_putch 0016                  ??_write 0016       __size_of_read_tmr0 001A  
                ?___wmul 0016                  _CCP2CON 000FBA                  ?_printf 0022  
                _INTCON2 000FF1          __CFG_VREGEN$OFF 000000                ?_init_lcd 0001  
                __Hparam 0000                  __Lparam 0000                ?_prog_lcd 0001  
        __size_of___wmul 0026                  ___lwdiv 0E34                  ___lwmod 0F16  
           __psmallconst 0800                  __pcinit 0F58                  __ramtop 0800  
                __ptext0 0C1A                  __ptext1 0FE6                  __ptext2 105E  
                __ptext3 1026                  __ptext4 1052                  __ptext5 0DC2  
                __ptext6 0E86                  __ptext7 0864                  __ptext8 0ECE  
                __ptext9 1008          __size_of_printf 03B6                  _dpowers 0801  
                _isdigit 1008        __end_of_read_tmr0 1040     end_of_initialization 0F7E  
          __Lmediumconst 0000               ??_init_lcd 002A                  printf@c 006C  
                printf@f 0022               ??_prog_lcd 0016                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
            prog_lcd@msg 0017              printf@width 006A           __end_of___wmul 0FE6  
          __pidataCOMRAM 1040           __end_of_printf 0C1A      start_initialization 0F58  
            __end_of_FCY 0813            ?_tmr_overflow 0001                 ??___wmul 001A  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0026              __pbssCOMRAM 0040  
          __pcstackBANK0 0060           ??_tmr_overflow 0001        __size_of_init_lcd 0072  
       ___lwdiv@dividend 0016                 ?___lwdiv 0016                 ?___lwmod 001D  
            __pintcodelo 0018        __size_of_prog_lcd 0048              __smallconst 0800  
               ?_isdigit 0001         ___lwdiv@quotient 001B                _read_tmr0 1026  
         __size_of_rsend 000C           __size_of_rsget 0008           __size_of_putch 0048  
         __size_of_write 0022           ___wmul@product 001A         __CFG_WDTPS$32768 000000  
      ___wmul@multiplier 0016               printf@flag 0061               printf@prec 0060  
              copy_data0 0F6C               ?_read_tmr0 0001                 __Hrparam 0000  
               __Lrparam 0000     __end_of_tmr_overflow 00D4         __size_of___lwdiv 0052  
       __size_of___lwmod 0042              _isdigit$364 0017         __size_of_isdigit 001E  
        ___lwdiv@divisor 0018          ___lwdiv@counter 001A                 __ptext10 0FC0  
               __ptext11 0F16                 __ptext12 0E34                 __ptext13 0F8C  
          __size_of_beep 0034                 _init_lcd 0DC2            __size_of_main 01A8  
               _prog_lcd 0E86                 int$flags 0043                printf@len 0068  
              printf@val 0066    __CFG_CPUDIV$OSC1_PLL2 000000                 isdigit@c 0018  
            ??_read_tmr0 0017                 intlevel1 0000         ___lwmod@dividend 001D  
              write@duty 0016                 printf@ap 0062                 printf@cp 0064  
               rsend@msg 0016                 putch@msg 0017          ___lwmod@divisor 001F  
        ___lwmod@counter 0021    __size_of_tmr_overflow 00BC  
