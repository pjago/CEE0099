

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Jan  3 10:48:07 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  022F                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  022F  3420               	retlw	32
   122  0230  3420               	retlw	32
   123  0231  3420               	retlw	32
   124  0232  3420               	retlw	32
   125  0233  3420               	retlw	32
   126  0234  3420               	retlw	32
   127  0235  3420               	retlw	32
   128  0236  3420               	retlw	32
   129  0237  3420               	retlw	32
   130  0238  3420               	retlw	32
   131  0239  3420               	retlw	32
   132  023A  3420               	retlw	32
   133  023B  3420               	retlw	32
   134  023C  3420               	retlw	32
   135  023D  3420               	retlw	32
   136  023E  3420               	retlw	32
   137  023F  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  302F               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  2244   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01BD               	clrf	__pbssBANK0& (0+127)
   184  0022  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   186  0024  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   187  0025  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   188                           
   189                           ; Clear objects allocated to COMMON
   190  0026  01F8               	clrf	__pbssCOMMON& (0+127)
   191  0027  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   192  0028  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   193  0029                     end_of_initialization:	
   194                           ;End of C runtime variable initialization code
   195                           
   196  0029                     __end_of__initialization:	
   197  0029  0183               	clrf	3
   198  002A  120A  118A  282D   	ljmp	_main	;jump to C main() function
   199                           
   200                           	psect	bssCOMMON
   201  0078                     __pbssCOMMON:	
   202  0078                     _T1ZOH:	
   203  0078                     	ds	2
   204  007A                     _kT0:	
   205  007A                     	ds	1
   206                           
   207                           	psect	bssBANK0
   208  003D                     __pbssBANK0:	
   209  003D                     _T1FOH:	
   210  003D                     	ds	2
   211  003F                     _PWMZOH:	
   212  003F                     	ds	1
   213  0040                     _T0PS:	
   214  0040                     	ds	1
   215  0041                     _RC:	
   216  0041                     	ds	1
   217                           
   218                           	psect	dataBANK0
   219  0020                     __pdataBANK0:	
   220  0020                     _BUF:	
   221  0020                     	ds	17
   222                           
   223                           	psect	inittext
   224  0240                     init_fetch0:	
   225                           ;	Called with low address in FSR and high address in W
   226                           
   227  0240  087E               	movf	126,w
   228  0241  008A               	movwf	10
   229  0242  087F               	movf	127,w
   230  0243  0082               	movwf	2
   231  0244                     init_ram0:	
   232                           ;Called with:
   233                           ;	high address of idata address in btemp 
   234                           ;	low address of idata address in btemp+1 
   235                           ;	low address of data in FSR
   236                           ;	high address + 1 of data in btemp-1
   237                           
   238  0244  2240  120A  118A   	fcall	init_fetch0
   239  0247  0080               	movwf	0
   240  0248  0A84               	incf	4,f
   241  0249  0804               	movf	4,w
   242  024A  067D               	xorwf	125,w
   243  024B  1903               	btfsc	3,2
   244  024C  3400               	retlw	0
   245  024D  0AFF               	incf	127,f
   246  024E  1903               	btfsc	3,2
   247  024F  0AFE               	incf	126,f
   248  0250  2A44               	goto	init_ram0
   249                           
   250                           	psect	cstackCOMMON
   251  0070                     __pcstackCOMMON:	
   252  0070                     ?_beep:	
   253  0070                     ?_rsend:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_rsget:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_read_tmr1:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_write:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_oversampling:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ??_oversampling:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_main:	
   272                           ; 1 bytes @ 0x0
   273                           
   274                           
   275                           ; 2 bytes @ 0x0
   276  0070                     	ds	8
   277                           
   278                           	psect	cstackBANK0
   279  0031                     __pcstackBANK0:	
   280  0031                     ??_beep:	
   281  0031                     ??_rsend:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0031                     ??_rsget:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0031                     ??_write:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0031                     rsend@msg:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0031                     write@duty:	
   294                           ; 1 bytes @ 0x0
   295                           
   296                           
   297                           ; 1 bytes @ 0x0
   298  0031                     	ds	1
   299  0032                     ??_read_tmr1:	
   300  0032                     beep@dash:	
   301                           ; 1 bytes @ 0x1
   302                           
   303                           
   304                           ; 1 bytes @ 0x1
   305  0032                     	ds	1
   306  0033                     beep@j:	
   307                           
   308                           ; 2 bytes @ 0x2
   309  0033                     	ds	2
   310  0035                     beep@j_56:	
   311                           
   312                           ; 2 bytes @ 0x4
   313  0035                     	ds	2
   314  0037                     ??_main:	
   315                           
   316                           ; 1 bytes @ 0x6
   317  0037                     	ds	3
   318  003A                     main@x:	
   319                           
   320                           ; 1 bytes @ 0x9
   321  003A                     	ds	1
   322  003B                     main@msg:	
   323                           
   324                           ; 1 bytes @ 0xA
   325  003B                     	ds	1
   326  003C                     main@cmd:	
   327                           
   328                           ; 1 bytes @ 0xB
   329  003C                     	ds	1
   330                           
   331                           	psect	maintext
   332  002D                     __pmaintext:	
   333 ;;
   334 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   335 ;;
   336 ;; *************** function _main *****************
   337 ;; Defined at:
   338 ;;		line 85 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;  cmd             1   11[BANK0 ] unsigned char 
   343 ;;  msg             1   10[BANK0 ] unsigned char 
   344 ;;  x               1    9[BANK0 ] unsigned char 
   345 ;; Return value:  Size  Location     Type
   346 ;;                  2  109[None  ] int 
   347 ;; Registers used:
   348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : B00/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   354 ;;      Params:         0       0       0       0       0
   355 ;;      Locals:         0       3       0       0       0
   356 ;;      Temps:          0       3       0       0       0
   357 ;;      Totals:         0       6       0       0       0
   358 ;;Total ram usage:        6 bytes
   359 ;; Hardware stack levels required when called:    3
   360 ;; This function calls:
   361 ;;		_beep
   362 ;;		_read_tmr1
   363 ;;		_rsend
   364 ;;		_rsget
   365 ;;		_write
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           
   372                           ;psect for function _main
   373  002D                     _main:	
   374                           
   375                           ;main.c: 86: OPTION_REG = 0x83;
   376                           
   377                           ;incstack = 0
   378                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   379  002D  3083               	movlw	131
   380  002E  1683               	bsf	3,5	;RP0=1, select bank1
   381  002F  1303               	bcf	3,6	;RP1=0, select bank1
   382  0030  0081               	movwf	1	;volatile
   383                           
   384                           ;main.c: 87: INTCON = 0x80;
   385  0031  3080               	movlw	128
   386  0032  008B               	movwf	11	;volatile
   387                           
   388                           ;main.c: 88: T1CON = 0x03;
   389  0033  3003               	movlw	3
   390  0034  1283               	bcf	3,5	;RP0=0, select bank0
   391  0035  1303               	bcf	3,6	;RP1=0, select bank0
   392  0036  0090               	movwf	16	;volatile
   393                           
   394                           ;main.c: 89: CCP1CON = 0x0F;
   395  0037  300F               	movlw	15
   396  0038  0097               	movwf	23	;volatile
   397                           
   398                           ;main.c: 90: CCPR1L = 0;
   399  0039  0195               	clrf	21	;volatile
   400                           
   401                           ;main.c: 91: CCP2CON = 0x0F;
   402  003A  300F               	movlw	15
   403  003B  009D               	movwf	29	;volatile
   404                           
   405                           ;main.c: 92: CCPR2L = 0;
   406  003C  019B               	clrf	27	;volatile
   407                           
   408                           ;main.c: 93: PR2 = 100;
   409  003D  3064               	movlw	100
   410  003E  1683               	bsf	3,5	;RP0=1, select bank1
   411  003F  1303               	bcf	3,6	;RP1=0, select bank1
   412  0040  0092               	movwf	18	;volatile
   413                           
   414                           ;main.c: 94: T2CON = 0x04;
   415  0041  3004               	movlw	4
   416  0042  1283               	bcf	3,5	;RP0=0, select bank0
   417  0043  1303               	bcf	3,6	;RP1=0, select bank0
   418  0044  0092               	movwf	18	;volatile
   419                           
   420                           ;main.c: 95: ADCON1 = 0x05;
   421  0045  3005               	movlw	5
   422  0046  1683               	bsf	3,5	;RP0=1, select bank1
   423  0047  1303               	bcf	3,6	;RP1=0, select bank1
   424  0048  009F               	movwf	31	;volatile
   425                           
   426                           ;main.c: 96: TRISC = 0xFD;
   427  0049  30FD               	movlw	253
   428  004A  0087               	movwf	7	;volatile
   429                           
   430                           ;main.c: 97: TRISB = 0xFF;
   431  004B  30FF               	movlw	255
   432  004C  0086               	movwf	6	;volatile
   433                           
   434                           ;main.c: 98: TRISA = 0xDF;
   435  004D  30DF               	movlw	223
   436  004E  0085               	movwf	5	;volatile
   437                           
   438                           ;main.c: 99: RCSTA = 0x90;
   439  004F  3090               	movlw	144
   440  0050  1283               	bcf	3,5	;RP0=0, select bank0
   441  0051  1303               	bcf	3,6	;RP1=0, select bank0
   442  0052  0098               	movwf	24	;volatile
   443                           
   444                           ;main.c: 100: TXSTA = 0x24;
   445  0053  3024               	movlw	36
   446  0054  1683               	bsf	3,5	;RP0=1, select bank1
   447  0055  1303               	bcf	3,6	;RP1=0, select bank1
   448  0056  0098               	movwf	24	;volatile
   449                           
   450                           ;main.c: 101: SPBRG = 12;
   451  0057  300C               	movlw	12
   452  0058  0099               	movwf	25	;volatile
   453                           
   454                           ;main.c: 105: if (PORTB & 0x02) {
   455  0059  1283               	bcf	3,5	;RP0=0, select bank0
   456  005A  1303               	bcf	3,6	;RP1=0, select bank0
   457  005B  1C86               	btfss	6,1	;volatile
   458  005C  28F7               	goto	l893
   459                           
   460                           ;main.c: 106: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   461  005D  3000               	movlw	0
   462  005E  120A  118A  216A  120A  118A  	fcall	_beep
   463  0063  3082               	movlw	130
   464  0064  1283               	bcf	3,5	;RP0=0, select bank0
   465  0065  1303               	bcf	3,6	;RP1=0, select bank0
   466  0066  00B8               	movwf	??_main+1
   467  0067  30DD               	movlw	221
   468  0068  00B7               	movwf	??_main
   469  0069                     u337:	
   470  0069  0BB7               	decfsz	??_main,f
   471  006A  2869               	goto	u337
   472  006B  0BB8               	decfsz	??_main+1,f
   473  006C  2869               	goto	u337
   474                           
   475                           ;main.c: 107: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   476  006D  3000               	movlw	0
   477  006E  120A  118A  216A  120A  118A  	fcall	_beep
   478  0073  3082               	movlw	130
   479  0074  1283               	bcf	3,5	;RP0=0, select bank0
   480  0075  1303               	bcf	3,6	;RP1=0, select bank0
   481  0076  00B8               	movwf	??_main+1
   482  0077  30DD               	movlw	221
   483  0078  00B7               	movwf	??_main
   484  0079                     u347:	
   485  0079  0BB7               	decfsz	??_main,f
   486  007A  2879               	goto	u347
   487  007B  0BB8               	decfsz	??_main+1,f
   488  007C  2879               	goto	u347
   489                           
   490                           ;main.c: 108: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   491  007D  3000               	movlw	0
   492  007E  120A  118A  216A  120A  118A  	fcall	_beep
   493  0083  3082               	movlw	130
   494  0084  1283               	bcf	3,5	;RP0=0, select bank0
   495  0085  1303               	bcf	3,6	;RP1=0, select bank0
   496  0086  00B8               	movwf	??_main+1
   497  0087  30DD               	movlw	221
   498  0088  00B7               	movwf	??_main
   499  0089                     u357:	
   500  0089  0BB7               	decfsz	??_main,f
   501  008A  2889               	goto	u357
   502  008B  0BB8               	decfsz	??_main+1,f
   503  008C  2889               	goto	u357
   504  008D  28DC               	goto	l863
   505  008E                     l869:	
   506                           ;main.c: 114: case '7': read_tmr1(); break;
   507                           
   508                           ;main.c: 113: switch (BUF[0]) {
   509                           
   510  008E  120A  118A  2204  120A  118A  	fcall	_read_tmr1
   511  0093  28D9               	goto	l887
   512  0094                     l871:	
   513                           ;main.c: 115: case '5': write(BUF[1]); break;
   514                           
   515  0094  1283               	bcf	3,5	;RP0=0, select bank0
   516  0095  1303               	bcf	3,6	;RP1=0, select bank0
   517  0096  0821               	movf	_BUF+1,w
   518  0097  120A  118A  221D  120A  118A  	fcall	_write
   519  009C  28D9               	goto	l887
   520  009D                     l873:	
   521                           ;main.c: 116: case '1': write(BUF[1]); read_tmr1(); break;
   522                           
   523  009D  1283               	bcf	3,5	;RP0=0, select bank0
   524  009E  1303               	bcf	3,6	;RP1=0, select bank0
   525  009F  0821               	movf	_BUF+1,w
   526  00A0  120A  118A  221D  120A  118A  	fcall	_write
   527  00A5  120A  118A  2204  120A  118A  	fcall	_read_tmr1
   528  00AA  28D9               	goto	l887
   529  00AB                     l875:	
   530                           ;main.c: 117: case '2': write(0); _delay((unsigned long)((4000)*(4000000/4000.0))); beep
      +                          (0); TMR1 = 0; break;
   531                           
   532  00AB  3000               	movlw	0
   533  00AC  120A  118A  221D  120A  118A  	fcall	_write
   534  00B1  3015               	movlw	21
   535  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   536  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   537  00B4  00B9               	movwf	??_main+2
   538  00B5  304B               	movlw	75
   539  00B6  00B8               	movwf	??_main+1
   540  00B7  30BD               	movlw	189
   541  00B8  00B7               	movwf	??_main
   542  00B9                     u367:	
   543  00B9  0BB7               	decfsz	??_main,f
   544  00BA  28B9               	goto	u367
   545  00BB  0BB8               	decfsz	??_main+1,f
   546  00BC  28B9               	goto	u367
   547  00BD  0BB9               	decfsz	??_main+2,f
   548  00BE  28B9               	goto	u367
   549  00BF  28C0               	nop2
   550  00C0  3000               	movlw	0
   551  00C1  120A  118A  216A  120A  118A  	fcall	_beep
   552  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   553  00C7  1303               	bcf	3,6	;RP1=0, select bank0
   554  00C8  018E               	clrf	14	;volatile
   555  00C9  018F               	clrf	15	;volatile
   556                           
   557                           ;main.c: 118: }
   558  00CA  28D9               	goto	l887
   559  00CB                     l885:	
   560  00CB  0820               	movf	_BUF,w
   561                           
   562                           ; Switch size 1, requested type "space"
   563                           ; Number of cases is 4, Range of values is 49 to 55
   564                           ; switch strategies available:
   565                           ; Name         Instructions Cycles
   566                           ; simple_byte           13     7 (average)
   567                           ; direct_byte           32    11 (fixed)
   568                           ; jumptable            263     9 (fixed)
   569                           ;	Chosen strategy is simple_byte
   570  00CC  3A31               	xorlw	49	; case 49
   571  00CD  1903               	skipnz
   572  00CE  289D               	goto	l873
   573  00CF  3A03               	xorlw	3	; case 50
   574  00D0  1903               	skipnz
   575  00D1  28AB               	goto	l875
   576  00D2  3A07               	xorlw	7	; case 53
   577  00D3  1903               	skipnz
   578  00D4  2894               	goto	l871
   579  00D5  3A02               	xorlw	2	; case 55
   580  00D6  1903               	skipnz
   581  00D7  288E               	goto	l869
   582  00D8  28D9               	goto	l887
   583  00D9                     l887:	
   584                           
   585                           ;main.c: 119: RC = 0;
   586  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   587  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   588  00DB  01C1               	clrf	_RC
   589  00DC                     l863:	
   590                           ;main.c: 109: while (1) {
   591                           
   592                           ;main.c: 120: }
   593                           
   594                           
   595                           ;main.c: 111: char x = rsget();
   596  00DC  120A  118A  2259  120A  118A  	fcall	_rsget
   597  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   598  00E2  1303               	bcf	3,6	;RP1=0, select bank0
   599  00E3  00B7               	movwf	??_main
   600  00E4  0837               	movf	??_main,w
   601  00E5  00BA               	movwf	main@x
   602                           
   603                           ;main.c: 112: if (x == '\n') {
   604  00E6  300A               	movlw	10
   605  00E7  063A               	xorwf	main@x,w
   606  00E8  1903               	btfsc	3,2
   607  00E9  28CB               	goto	l885
   608                           
   609                           ;main.c: 121: else {
   610                           ;main.c: 122: BUF[RC] = x;
   611  00EA  083A               	movf	main@x,w
   612  00EB  00B7               	movwf	??_main
   613  00EC  0841               	movf	_RC,w
   614  00ED  3E20               	addlw	(low (_BUF| 0))& (0+255)
   615  00EE  0084               	movwf	4
   616  00EF  0837               	movf	??_main,w
   617  00F0  1383               	bcf	3,7	;select IRP bank0
   618  00F1  0080               	movwf	0
   619                           
   620                           ;main.c: 123: RC++;
   621  00F2  3001               	movlw	1
   622  00F3  00B7               	movwf	??_main
   623  00F4  0837               	movf	??_main,w
   624  00F5  07C1               	addwf	_RC,f
   625  00F6  28DC               	goto	l863
   626  00F7                     l893:	
   627                           ;main.c: 124: }
   628                           ;main.c: 125: }
   629                           ;main.c: 126: }
   630                           
   631                           
   632                           ;main.c: 128: else {
   633                           ;main.c: 129: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   634  00F7  3000               	movlw	0
   635  00F8  120A  118A  216A  120A  118A  	fcall	_beep
   636  00FD  3082               	movlw	130
   637  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   638  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   639  0100  00B8               	movwf	??_main+1
   640  0101  30DD               	movlw	221
   641  0102  00B7               	movwf	??_main
   642  0103                     u377:	
   643  0103  0BB7               	decfsz	??_main,f
   644  0104  2903               	goto	u377
   645  0105  0BB8               	decfsz	??_main+1,f
   646  0106  2903               	goto	u377
   647                           
   648                           ;main.c: 130: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   649  0107  3001               	movlw	1
   650  0108  120A  118A  216A  120A  118A  	fcall	_beep
   651  010D  3082               	movlw	130
   652  010E  1283               	bcf	3,5	;RP0=0, select bank0
   653  010F  1303               	bcf	3,6	;RP1=0, select bank0
   654  0110  00B8               	movwf	??_main+1
   655  0111  30DD               	movlw	221
   656  0112  00B7               	movwf	??_main
   657  0113                     u387:	
   658  0113  0BB7               	decfsz	??_main,f
   659  0114  2913               	goto	u387
   660  0115  0BB8               	decfsz	??_main+1,f
   661  0116  2913               	goto	u387
   662  0117  2934               	goto	l899
   663  0118                     l905:	
   664                           
   665                           ;main.c: 136: PWMZOH = msg;
   666  0118  083B               	movf	main@msg,w
   667  0119  00B7               	movwf	??_main
   668  011A  0837               	movf	??_main,w
   669  011B  00BF               	movwf	_PWMZOH
   670                           
   671                           ;main.c: 137: rsend(T1FOH);
   672  011C  083D               	movf	_T1FOH,w	;volatile
   673  011D  120A  118A  2251  120A  118A  	fcall	_rsend
   674                           
   675                           ;main.c: 138: rsend(T1FOH >> 8);
   676  0122  1283               	bcf	3,5	;RP0=0, select bank0
   677  0123  1303               	bcf	3,6	;RP1=0, select bank0
   678  0124  083E               	movf	_T1FOH+1,w	;volatile
   679  0125  120A  118A  2251  120A  118A  	fcall	_rsend
   680                           
   681                           ;main.c: 139: }
   682  012A  2934               	goto	l899
   683  012B                     l913:	
   684                           
   685                           ;main.c: 141: T0PS = msg;
   686  012B  083B               	movf	main@msg,w
   687  012C  00B7               	movwf	??_main
   688  012D  0837               	movf	??_main,w
   689  012E  00C0               	movwf	_T0PS
   690                           
   691                           ;main.c: 142: TMR1 = 0;
   692  012F  018E               	clrf	14	;volatile
   693  0130  018F               	clrf	15	;volatile
   694  0131  1410               	bsf	16,0	;# 
   695  0132  0181               	clrf	1	;# 
   696  0133  168B               	bsf	11,5	;# 
   697  0134                     l899:	
   698                           ;main.c: 131: while (1) {
   699                           
   700                           ;main.c: 146: }
   701                           
   702                           
   703                           ;main.c: 133: char cmd = rsget();
   704  0134  120A  118A  2259  120A  118A  	fcall	_rsget
   705  0139  1283               	bcf	3,5	;RP0=0, select bank0
   706  013A  1303               	bcf	3,6	;RP1=0, select bank0
   707  013B  00B7               	movwf	??_main
   708  013C  0837               	movf	??_main,w
   709  013D  00BC               	movwf	main@cmd
   710                           
   711                           ;main.c: 134: char msg = rsget();
   712  013E  120A  118A  2259  120A  118A  	fcall	_rsget
   713  0143  1283               	bcf	3,5	;RP0=0, select bank0
   714  0144  1303               	bcf	3,6	;RP1=0, select bank0
   715  0145  00B7               	movwf	??_main
   716  0146  0837               	movf	??_main,w
   717  0147  00BB               	movwf	main@msg
   718                           
   719                           ;main.c: 135: if (cmd == 'x') {
   720  0148  3078               	movlw	120
   721  0149  063C               	xorwf	main@cmd,w
   722  014A  1903               	btfsc	3,2
   723  014B  2918               	goto	l905
   724                           
   725                           ;main.c: 140: else if (cmd == 't') {
   726  014C  3074               	movlw	116
   727  014D  1283               	bcf	3,5	;RP0=0, select bank0
   728  014E  1303               	bcf	3,6	;RP1=0, select bank0
   729  014F  063C               	xorwf	main@cmd,w
   730  0150  1903               	btfsc	3,2
   731  0151  292B               	goto	l913
   732                           
   733                           ;main.c: 147: else if (cmd == 's') {
   734  0152  3073               	movlw	115
   735  0153  1283               	bcf	3,5	;RP0=0, select bank0
   736  0154  1303               	bcf	3,6	;RP1=0, select bank0
   737  0155  063C               	xorwf	main@cmd,w
   738  0156  1D03               	btfss	3,2
   739  0157  2934               	goto	l899
   740                           
   741                           ;main.c: 148: T1CON &= 0xFE;
   742  0158  30FE               	movlw	254
   743  0159  00B7               	movwf	??_main
   744  015A  0837               	movf	??_main,w
   745  015B  0590               	andwf	16,f	;volatile
   746                           
   747                           ;main.c: 149: INTCON &= 0xDF;
   748  015C  30DF               	movlw	223
   749  015D  00B7               	movwf	??_main
   750  015E  0837               	movf	??_main,w
   751  015F  058B               	andwf	11,f	;volatile
   752                           
   753                           ;main.c: 150: PWM = 0;
   754  0160  019B               	clrf	27
   755                           
   756                           ;main.c: 151: T1FOH = 0;
   757  0161  01BD               	clrf	_T1FOH	;volatile
   758  0162  01BE               	clrf	_T1FOH+1	;volatile
   759                           
   760                           ;main.c: 152: beep(0);
   761  0163  3000               	movlw	0
   762  0164  120A  118A  216A  120A  118A  	fcall	_beep
   763  0169  2934               	goto	l899
   764  016A                     __end_of_main:	
   765                           ;main.c: 153: }
   766                           ;main.c: 154: }
   767                           ;main.c: 155: }
   768                           ;main.c: 156: return 0;
   769                           ;	Return value of _main is never used
   770                           
   771                           
   772                           	psect	text1
   773  021D                     __ptext1:	
   774 ;; *************** function _write *****************
   775 ;; Defined at:
   776 ;;		line 61 in file "main.c"
   777 ;; Parameters:    Size  Location     Type
   778 ;;  duty            1    wreg     char 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  duty            1    0[BANK0 ] char 
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg, status,2
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   790 ;;      Params:         0       0       0       0       0
   791 ;;      Locals:         0       1       0       0       0
   792 ;;      Temps:          0       0       0       0       0
   793 ;;      Totals:         0       1       0       0       0
   794 ;;Total ram usage:        1 bytes
   795 ;; Hardware stack levels used:    1
   796 ;; Hardware stack levels required when called:    1
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_main
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           
   805                           ;psect for function _write
   806  021D                     _write:	
   807                           
   808                           ;incstack = 0
   809                           ; Regs used in _write: [wreg+status,2]
   810                           ;write@duty stored from wreg
   811  021D  1283               	bcf	3,5	;RP0=0, select bank0
   812  021E  1303               	bcf	3,6	;RP1=0, select bank0
   813  021F  00B1               	movwf	write@duty
   814                           
   815                           ;main.c: 62: if (duty > 100) PWM = 100;
   816  0220  0831               	movf	write@duty,w
   817  0221  3A80               	xorlw	128
   818  0222  3E1B               	addlw	-229
   819  0223  1C03               	skipc
   820  0224  2A28               	goto	l85
   821  0225  3064               	movlw	100
   822  0226  009B               	movwf	27
   823  0227  0008               	return
   824  0228                     l85:	
   825                           
   826                           ;main.c: 63: else if (duty < 0) PWM = 0;
   827  0228  1FB1               	btfss	write@duty,7
   828  0229  2A2C               	goto	l807
   829  022A  019B               	clrf	27
   830  022B  0008               	return
   831  022C                     l807:	
   832                           
   833                           ;main.c: 64: else PWM = duty;
   834  022C  0831               	movf	write@duty,w
   835  022D  009B               	movwf	27
   836  022E  0008               	return
   837  022F                     __end_of_write:	
   838                           
   839                           	psect	text2
   840  0259                     __ptext2:	
   841 ;; *************** function _rsget *****************
   842 ;; Defined at:
   843 ;;		line 47 in file "main.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      unsigned char 
   850 ;; Registers used:
   851 ;;		wreg
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   857 ;;      Params:         0       0       0       0       0
   858 ;;      Locals:         0       0       0       0       0
   859 ;;      Temps:          0       0       0       0       0
   860 ;;      Totals:         0       0       0       0       0
   861 ;;Total ram usage:        0 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function _rsget
   873  0259                     _rsget:	
   874  0259                     l76:	
   875                           ;main.c: 48: while (!RCIF) continue;
   876                           
   877                           ;incstack = 0
   878                           ; Regs used in _rsget: [wreg]
   879                           
   880  0259  1283               	bcf	3,5	;RP0=0, select bank0
   881  025A  1303               	bcf	3,6	;RP1=0, select bank0
   882  025B  1E8C               	btfss	12,5	;volatile
   883  025C  2A59               	goto	l76
   884                           
   885                           ;main.c: 49: return RCREG;
   886  025D  081A               	movf	26,w	;volatile
   887  025E  0008               	return
   888  025F                     __end_of_rsget:	
   889                           
   890                           	psect	text3
   891  0204                     __ptext3:	
   892 ;; *************** function _read_tmr1 *****************
   893 ;; Defined at:
   894 ;;		line 54 in file "main.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, status,2, status,0, pclath, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   908 ;;      Params:         0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    2
   915 ;; This function calls:
   916 ;;		_rsend
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _read_tmr1
   924  0204                     _read_tmr1:	
   925                           
   926                           ;main.c: 55: T1ZOH = TMR1;
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   930  0204  1283               	bcf	3,5	;RP0=0, select bank0
   931  0205  1303               	bcf	3,6	;RP1=0, select bank0
   932  0206  080F               	movf	15,w	;volatile
   933  0207  00F9               	movwf	_T1ZOH+1
   934  0208  080E               	movf	14,w	;volatile
   935  0209  00F8               	movwf	_T1ZOH
   936                           
   937                           ;main.c: 56: rsend(T1ZOH >> 8);
   938  020A  0879               	movf	_T1ZOH+1,w
   939  020B  120A  118A  2251  120A  118A  	fcall	_rsend
   940                           
   941                           ;main.c: 57: rsend(T1ZOH);
   942  0210  0878               	movf	_T1ZOH,w
   943  0211  120A  118A  2251   	fcall	_rsend
   944                           
   945                           ;main.c: 58: TMR1 -= T1ZOH;
   946  0214  0878               	movf	_T1ZOH,w
   947  0215  1283               	bcf	3,5	;RP0=0, select bank0
   948  0216  1303               	bcf	3,6	;RP1=0, select bank0
   949  0217  028E               	subwf	14,f	;volatile
   950  0218  0879               	movf	_T1ZOH+1,w
   951  0219  1C03               	skipc
   952  021A  038F               	decf	15,f	;volatile
   953  021B  028F               	subwf	15,f	;volatile
   954  021C  0008               	return
   955  021D                     __end_of_read_tmr1:	
   956                           
   957                           	psect	text4
   958  0251                     __ptext4:	
   959 ;; *************** function _rsend *****************
   960 ;; Defined at:
   961 ;;		line 42 in file "main.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  msg             1    wreg     unsigned char 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  msg             1    0[BANK0 ] unsigned char 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   975 ;;      Params:         0       0       0       0       0
   976 ;;      Locals:         0       1       0       0       0
   977 ;;      Temps:          0       0       0       0       0
   978 ;;      Totals:         0       1       0       0       0
   979 ;;Total ram usage:        1 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    1
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_read_tmr1
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           
   991                           ;psect for function _rsend
   992  0251                     _rsend:	
   993                           
   994                           ;incstack = 0
   995                           ; Regs used in _rsend: [wreg]
   996                           ;rsend@msg stored from wreg
   997  0251  1283               	bcf	3,5	;RP0=0, select bank0
   998  0252  1303               	bcf	3,6	;RP1=0, select bank0
   999  0253  00B1               	movwf	rsend@msg
  1000  0254                     l70:	
  1001                           ;main.c: 43: while (!TXIF) continue;
  1002                           
  1003  0254  1E0C               	btfss	12,4	;volatile
  1004  0255  2A54               	goto	l70
  1005                           
  1006                           ;main.c: 44: TXREG = msg;
  1007  0256  0831               	movf	rsend@msg,w
  1008  0257  0099               	movwf	25	;volatile
  1009  0258  0008               	return
  1010  0259                     __end_of_rsend:	
  1011                           
  1012                           	psect	text5
  1013  016A                     __ptext5:	
  1014 ;; *************** function _beep *****************
  1015 ;; Defined at:
  1016 ;;		line 31 in file "main.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;  dash            1    wreg     unsigned char 
  1019 ;; Auto vars:     Size  Location     Type
  1020 ;;  dash            1    1[BANK0 ] unsigned char 
  1021 ;;  j               2    4[BANK0 ] int 
  1022 ;;  j               2    2[BANK0 ] int 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  1    wreg      void 
  1025 ;; Registers used:
  1026 ;;		wreg, status,2, status,0, btemp+1
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1032 ;;      Params:         0       0       0       0       0
  1033 ;;      Locals:         0       5       0       0       0
  1034 ;;      Temps:          0       1       0       0       0
  1035 ;;      Totals:         0       6       0       0       0
  1036 ;;Total ram usage:        6 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    1
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_main
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           
  1047                           ;psect for function _beep
  1048  016A                     _beep:	
  1049                           
  1050                           ;incstack = 0
  1051                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1052                           ;beep@dash stored from wreg
  1053  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1054  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1055  016C  00B2               	movwf	beep@dash
  1056                           
  1057                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1058  016D  0832               	movf	beep@dash,w
  1059  016E  1D03               	btfss	3,2
  1060  016F  299B               	goto	l777
  1061  0170  01B3               	clrf	beep@j
  1062  0171  01B4               	clrf	beep@j+1
  1063  0172                     L1:	
  1064  0172  0834               	movf	beep@j+1,w
  1065  0173  3A80               	xorlw	128
  1066  0174  00FF               	movwf	127
  1067  0175  3080               	movlw	128
  1068  0176  027F               	subwf	127,w
  1069  0177  1D03               	skipz
  1070  0178  297B               	goto	u195
  1071  0179  3064               	movlw	100
  1072  017A  0233               	subwf	beep@j,w
  1073  017B                     u195:	
  1074  017B  1803               	btfsc	3,0
  1075  017C  0008               	return
  1076                           
  1077                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1078  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1079  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1080  017F  1685               	bsf	5,5
  1081  0180  30C7               	movlw	199
  1082  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1083  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1084  0183  00B1               	movwf	??_beep
  1085  0184                     u397:	
  1086  0184  2985               	nop2
  1087  0185  0BB1               	decfsz	??_beep,f
  1088  0186  2984               	goto	u397
  1089  0187  2988               	nop2
  1090                           
  1091                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1092  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1093  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1094  018A  1285               	bcf	5,5
  1095  018B  30A5               	movlw	165
  1096  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1097  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1098  018E  00B1               	movwf	??_beep
  1099  018F                     u407:	
  1100  018F  0BB1               	decfsz	??_beep,f
  1101  0190  298F               	goto	u407
  1102  0191  2992               	nop2
  1103  0192  3001               	movlw	1
  1104  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1106  0195  07B3               	addwf	beep@j,f
  1107  0196  1803               	skipnc
  1108  0197  0AB4               	incf	beep@j+1,f
  1109  0198  3000               	movlw	0
  1110  0199  07B4               	addwf	beep@j+1,f
  1111  019A  2972               	goto	L1
  1112  019B                     l777:	
  1113                           ;main.c: 35: }
  1114                           
  1115                           
  1116                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1117  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1118  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1119  019D  01B5               	clrf	beep@j_56
  1120  019E  01B6               	clrf	beep@j_56+1
  1121  019F                     L2:	
  1122  019F  0836               	movf	beep@j_56+1,w
  1123  01A0  3A80               	xorlw	128
  1124  01A1  00FF               	movwf	127
  1125  01A2  3081               	movlw	129
  1126  01A3  027F               	subwf	127,w
  1127  01A4  1D03               	skipz
  1128  01A5  29A8               	goto	u215
  1129  01A6  30F4               	movlw	244
  1130  01A7  0235               	subwf	beep@j_56,w
  1131  01A8                     u215:	
  1132  01A8  1803               	btfsc	3,0
  1133  01A9  0008               	return
  1134                           
  1135                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1136  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1137  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1138  01AC  1685               	bsf	5,5
  1139  01AD  30C7               	movlw	199
  1140  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1141  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1142  01B0  00B1               	movwf	??_beep
  1143  01B1                     u417:	
  1144  01B1  29B2               	nop2
  1145  01B2  0BB1               	decfsz	??_beep,f
  1146  01B3  29B1               	goto	u417
  1147  01B4  29B5               	nop2
  1148                           
  1149                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1150  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1151  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1152  01B7  1285               	bcf	5,5
  1153  01B8  30A5               	movlw	165
  1154  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1155  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1156  01BB  00B1               	movwf	??_beep
  1157  01BC                     u427:	
  1158  01BC  0BB1               	decfsz	??_beep,f
  1159  01BD  29BC               	goto	u427
  1160  01BE  29BF               	nop2
  1161  01BF  3001               	movlw	1
  1162  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1163  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1164  01C2  07B5               	addwf	beep@j_56,f
  1165  01C3  1803               	skipnc
  1166  01C4  0AB6               	incf	beep@j_56+1,f
  1167  01C5  3000               	movlw	0
  1168  01C6  07B6               	addwf	beep@j_56+1,f
  1169  01C7  299F               	goto	L2
  1170  01C8                     __end_of_beep:	
  1171                           
  1172                           	psect	text6
  1173  01C8                     __ptext6:	
  1174 ;; *************** function _oversampling *****************
  1175 ;; Defined at:
  1176 ;;		line 71 in file "main.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1190 ;;      Params:         0       0       0       0       0
  1191 ;;      Locals:         0       0       0       0       0
  1192 ;;      Temps:          8       0       0       0       0
  1193 ;;      Totals:         8       0       0       0       0
  1194 ;;Total ram usage:        8 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		Interrupt level 1
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           
  1204                           ;psect for function _oversampling
  1205  01C8                     _oversampling:	
  1206                           
  1207                           ;main.c: 72: kT0++;
  1208  01C8  3001               	movlw	1
  1209  01C9  00F0               	movwf	??_oversampling
  1210  01CA  0870               	movf	??_oversampling,w
  1211  01CB  07FA               	addwf	_kT0,f	;volatile
  1212                           
  1213                           ;main.c: 73: if (kT0 > T0PS) {
  1214  01CC  087A               	movf	_kT0,w	;volatile
  1215  01CD  0240               	subwf	_T0PS,w
  1216  01CE  1803               	skipnc
  1217  01CF  29DE               	goto	i1l821
  1218                           
  1219                           ;main.c: 74: kT0 = 0;
  1220  01D0  01FA               	clrf	_kT0	;volatile
  1221                           
  1222                           ;main.c: 75: T1FOH = TMR1;
  1223  01D1  080F               	movf	15,w	;volatile
  1224  01D2  00BE               	movwf	_T1FOH+1	;volatile
  1225  01D3  080E               	movf	14,w	;volatile
  1226  01D4  00BD               	movwf	_T1FOH	;volatile
  1227                           
  1228                           ;main.c: 76: PWM = PWMZOH;
  1229  01D5  083F               	movf	_PWMZOH,w
  1230  01D6  009B               	movwf	27
  1231                           
  1232                           ;main.c: 77: TMR1 -= T1FOH;
  1233  01D7  083D               	movf	_T1FOH,w	;volatile
  1234  01D8  028E               	subwf	14,f	;volatile
  1235  01D9  083E               	movf	_T1FOH+1,w	;volatile
  1236  01DA  1C03               	skipc
  1237  01DB  038F               	decf	15,f	;volatile
  1238  01DC  028F               	subwf	15,f	;volatile
  1239                           
  1240                           ;main.c: 78: }
  1241  01DD  29F8               	goto	i1l825
  1242  01DE                     i1l821:	
  1243                           
  1244                           ;main.c: 79: else if (kT0 == (T0PS >> 1)) {
  1245  01DE  0840               	movf	_T0PS,w
  1246  01DF  00F0               	movwf	??_oversampling
  1247  01E0  1003               	clrc
  1248  01E1  0C70               	rrf	??_oversampling,w
  1249  01E2  067A               	xorwf	_kT0,w	;volatile
  1250  01E3  1D03               	skipz
  1251  01E4  29F8               	goto	i1l825
  1252                           
  1253                           ;main.c: 80: T1FOH = (T1FOH >> 1) + TMR1;
  1254  01E5  083E               	movf	_T1FOH+1,w	;volatile
  1255  01E6  00F1               	movwf	??_oversampling+1
  1256  01E7  083D               	movf	_T1FOH,w	;volatile
  1257  01E8  00F0               	movwf	??_oversampling
  1258  01E9  1003               	clrc
  1259  01EA  0CF1               	rrf	??_oversampling+1,f
  1260  01EB  0CF0               	rrf	??_oversampling,f
  1261  01EC  080E               	movf	14,w	;volatile
  1262  01ED  0770               	addwf	??_oversampling,w
  1263  01EE  00F2               	movwf	??_oversampling+2
  1264  01EF  080F               	movf	15,w	;volatile
  1265  01F0  1803               	skipnc
  1266  01F1  0A0F               	incf	15,w	;volatile
  1267  01F2  0771               	addwf	??_oversampling+1,w
  1268  01F3  00F3               	movwf	??_oversampling+3
  1269  01F4  0872               	movf	??_oversampling+2,w
  1270  01F5  00BD               	movwf	_T1FOH	;volatile
  1271  01F6  0873               	movf	??_oversampling+3,w
  1272  01F7  00BE               	movwf	_T1FOH+1	;volatile
  1273  01F8                     i1l825:	
  1274                           
  1275                           ;main.c: 81: }
  1276                           ;main.c: 82: TMR0IF = 0;
  1277  01F8  110B               	bcf	11,2	;volatile
  1278  01F9  0877               	movf	??_oversampling+7,w
  1279  01FA  00FF               	movwf	127
  1280  01FB  0876               	movf	??_oversampling+6,w
  1281  01FC  008A               	movwf	10
  1282  01FD  0875               	movf	??_oversampling+5,w
  1283  01FE  0084               	movwf	4
  1284  01FF  0E74               	swapf	(??_oversampling+4)^(0+-128),w
  1285  0200  0083               	movwf	3
  1286  0201  0EFE               	swapf	126,f
  1287  0202  0E7E               	swapf	126,w
  1288  0203  0009               	retfie
  1289  0204                     __end_of_oversampling:	
  1290  007E                     btemp	set	126	;btemp
  1291  007E                     wtemp0	set	126
  1292                           
  1293                           	psect	intentry
  1294  0004                     __pintentry:	
  1295                           ;incstack = 0
  1296                           ; Regs used in _oversampling: [wreg+status,2+status,0]
  1297                           
  1298  0004                     interrupt_function:	
  1299  007E                     saved_w	set	btemp
  1300  0004  00FE               	movwf	btemp
  1301  0005  0E03               	swapf	3,w
  1302  0006  00F4               	movwf	??_oversampling+4
  1303  0007  0804               	movf	4,w
  1304  0008  00F5               	movwf	??_oversampling+5
  1305  0009  080A               	movf	10,w
  1306  000A  00F6               	movwf	??_oversampling+6
  1307  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1308  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1309  000D  087F               	movf	btemp+1,w
  1310  000E  00F7               	movwf	??_oversampling+7
  1311  000F  120A  118A  29C8   	ljmp	_oversampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     12      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _oversampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep
    _read_tmr1->_rsend

Critical Paths under _oversampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _oversampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _oversampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _oversampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     381
                                              6 BANK0      6     6      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _oversampling                                         8     8      0       0
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _oversampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      22       5       42.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2D      12        0.0%
ABS                  0      0      2D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Jan  3 10:48:07 2018

                      pc 0002              __CFG_CP$OFF 0000                       l70 0254  
                     l76 0259                       l85 0228                       _RC 0041  
                     fsr 0004                      TMR0 0001                      l807 022C  
                    l913 012B                      l905 0118                      l871 0094  
                    l863 00DC                      l777 019B                      l873 009D  
                    l875 00AB                      l869 008E                      l885 00CB  
                    l893 00F7                      l887 00D9                      l899 0134  
                    _BUF 0020                      _BUZ 002D                      u215 01A8  
                    _PR2 0092                      u407 018F                      u417 01B1  
                    u337 0069             __CFG_CPD$OFF 0000                      u427 01BC  
                    u195 017B                      u347 0079                      u357 0089  
                    u367 00B9                      u377 0103                      u387 0113  
                    u397 0184                      _PWM 001B                      _kT0 007A  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
                   T1CON 0010             __CFG_LVP$OFF 0000                     _T0PS 0040  
                   _RCIF 0065                     _TMR1 000E                     _TXIF 0064  
           __CFG_WRT$OFF 0000                     _beep 016A                     _main 002D  
                   btemp 007E                     start 0012                    INTCON 000B  
                  ?_beep 0070                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _T1CON 0010                    _T1FOH 003D                    _T2CON 0012  
                  _T1ZOH 0078                    i1l821 01DE                    i1l825 01F8  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0033                    _rsend 0251                    _rsget 0259  
                  main@x 003A                    _write 021D           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_beep 01C8             __end_of_main 016A  
                 ??_beep 0031                   ??_main 0037                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070                   _INTCON 000B  
                 _TMR0IF 005A                   _PWMZOH 003F           __CFG_PWRTE$OFF 0000  
                 saved_w 007E  __end_of__initialization 0029           __pcstackCOMMON 0070  
           __pidataBANK0 022F            __end_of_rsend 0259            __end_of_rsget 025F  
          __end_of_write 022F                  ??_rsend 0031                  ??_rsget 0031  
                ??_write 0031               __pbssBANK0 003D       __size_of_read_tmr1 0019  
             __pmaintext 002D               __pintentry 0004                  _CCP1CON 0017  
                _CCP2CON 001D                  __ptext1 021D                  __ptext2 0259  
                __ptext3 0204                  __ptext4 0251                  __ptext5 016A  
                __ptext6 01C8        __end_of_read_tmr1 021D                  main@cmd 003C  
                main@msg 003B     end_of_initialization 0029            ?_oversampling 0070  
    start_initialization 0015           ??_oversampling 0070               init_fetch0 0240  
            __pdataBANK0 0020              __pbssCOMMON 0078                ___latbits 0002  
          __pcstackBANK0 0031                _read_tmr1 0204           __size_of_rsend 0008  
         __size_of_rsget 0006           __size_of_write 0012        interrupt_function 0004  
   __end_of_oversampling 0204               ?_read_tmr1 0070                 beep@j_56 0035  
               beep@dash 0032            __size_of_beep 005E            __size_of_main 013D  
               init_ram0 0244              ??_read_tmr1 0032                 intlevel1 0000  
              write@duty 0031    __size_of_oversampling 003C                 rsend@msg 0031  
             _OPTION_REG 0081             _oversampling 01C8  
