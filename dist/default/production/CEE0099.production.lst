

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Jan  1 16:54:56 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0212                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0212  3420               	retlw	32
   122  0213  3420               	retlw	32
   123  0214  3420               	retlw	32
   124  0215  3420               	retlw	32
   125  0216  3420               	retlw	32
   126  0217  3420               	retlw	32
   127  0218  3420               	retlw	32
   128  0219  3420               	retlw	32
   129  021A  3420               	retlw	32
   130  021B  3420               	retlw	32
   131  021C  3420               	retlw	32
   132  021D  3420               	retlw	32
   133  021E  3420               	retlw	32
   134  021F  3420               	retlw	32
   135  0220  3420               	retlw	32
   136  0221  3420               	retlw	32
   137  0222  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  3012               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  2227   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01BC               	clrf	__pbssBANK0& (0+127)
   184  0022  01BD               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BE               	clrf	(__pbssBANK0+2)& (0+127)
   186  0024  01BF               	clrf	(__pbssBANK0+3)& (0+127)
   187  0025  01C0               	clrf	(__pbssBANK0+4)& (0+127)
   188                           
   189                           ; Clear objects allocated to COMMON
   190  0026  01F6               	clrf	__pbssCOMMON& (0+127)
   191  0027                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0027                     __end_of__initialization:	
   195  0027  0183               	clrf	3
   196  0028  120A  118A  282B   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssCOMMON
   199  0076                     __pbssCOMMON:	
   200  0076                     _kT0:	
   201  0076                     	ds	1
   202                           
   203                           	psect	bssBANK0
   204  003C                     __pbssBANK0:	
   205  003C                     _T1ZOH:	
   206  003C                     	ds	2
   207  003E                     _PWMZOH:	
   208  003E                     	ds	1
   209  003F                     _T0PS:	
   210  003F                     	ds	1
   211  0040                     _RC:	
   212  0040                     	ds	1
   213                           
   214                           	psect	dataBANK0
   215  0020                     __pdataBANK0:	
   216  0020                     _BUF:	
   217  0020                     	ds	17
   218                           
   219                           	psect	inittext
   220  0223                     init_fetch0:	
   221                           ;	Called with low address in FSR and high address in W
   222                           
   223  0223  087E               	movf	126,w
   224  0224  008A               	movwf	10
   225  0225  087F               	movf	127,w
   226  0226  0082               	movwf	2
   227  0227                     init_ram0:	
   228                           ;Called with:
   229                           ;	high address of idata address in btemp 
   230                           ;	low address of idata address in btemp+1 
   231                           ;	low address of data in FSR
   232                           ;	high address + 1 of data in btemp-1
   233                           
   234  0227  2223  120A  118A   	fcall	init_fetch0
   235  022A  0080               	movwf	0
   236  022B  0A84               	incf	4,f
   237  022C  0804               	movf	4,w
   238  022D  067D               	xorwf	125,w
   239  022E  1903               	btfsc	3,2
   240  022F  3400               	retlw	0
   241  0230  0AFF               	incf	127,f
   242  0231  1903               	btfsc	3,2
   243  0232  0AFE               	incf	126,f
   244  0233  2A27               	goto	init_ram0
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:	
   248  0070                     ?_beep:	
   249  0070                     ?_rsend:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_rsget:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_read_tmr1:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_write:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_sampling:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ??_sampling:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_main:	
   268                           ; 1 bytes @ 0x0
   269                           
   270                           
   271                           ; 2 bytes @ 0x0
   272  0070                     	ds	5
   273  0075                     ??_beep:	
   274  0075                     ??_rsend:	
   275                           ; 1 bytes @ 0x5
   276                           
   277  0075                     ??_rsget:	
   278                           ; 1 bytes @ 0x5
   279                           
   280  0075                     ??_write:	
   281                           ; 1 bytes @ 0x5
   282                           
   283  0075                     rsend@msg:	
   284                           ; 1 bytes @ 0x5
   285                           
   286  0075                     write@duty:	
   287                           ; 1 bytes @ 0x5
   288                           
   289                           
   290                           ; 1 bytes @ 0x5
   291  0075                     	ds	1
   292  0076                     ??_read_tmr1:	
   293                           
   294                           	psect	cstackBANK0
   295  0031                     __pcstackBANK0:	
   296                           ; 1 bytes @ 0x6
   297                           
   298  0031                     beep@dash:	
   299                           
   300                           ; 1 bytes @ 0x0
   301  0031                     	ds	1
   302  0032                     beep@j:	
   303                           
   304                           ; 2 bytes @ 0x1
   305  0032                     	ds	2
   306  0034                     beep@j_56:	
   307                           
   308                           ; 2 bytes @ 0x3
   309  0034                     	ds	2
   310  0036                     ??_main:	
   311                           
   312                           ; 1 bytes @ 0x5
   313  0036                     	ds	3
   314  0039                     main@x:	
   315                           
   316                           ; 1 bytes @ 0x8
   317  0039                     	ds	1
   318  003A                     main@msg:	
   319                           
   320                           ; 1 bytes @ 0x9
   321  003A                     	ds	1
   322  003B                     main@cmd:	
   323                           
   324                           ; 1 bytes @ 0xA
   325  003B                     	ds	1
   326                           
   327                           	psect	maintext
   328  002B                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 81 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  cmd             1   10[BANK0 ] unsigned char 
   339 ;;  msg             1    9[BANK0 ] unsigned char 
   340 ;;  x               1    8[BANK0 ] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2  105[None  ] int 
   343 ;; Registers used:
   344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : B00/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   350 ;;      Params:         0       0       0       0       0
   351 ;;      Locals:         0       3       0       0       0
   352 ;;      Temps:          0       3       0       0       0
   353 ;;      Totals:         0       6       0       0       0
   354 ;;Total ram usage:        6 bytes
   355 ;; Hardware stack levels required when called:    3
   356 ;; This function calls:
   357 ;;		_beep
   358 ;;		_read_tmr1
   359 ;;		_rsend
   360 ;;		_rsget
   361 ;;		_write
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _main
   369  002B                     _main:	
   370                           
   371                           ;main.c: 82: OPTION_REG = 0x83;
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   375  002B  3083               	movlw	131
   376  002C  1683               	bsf	3,5	;RP0=1, select bank1
   377  002D  1303               	bcf	3,6	;RP1=0, select bank1
   378  002E  0081               	movwf	1	;volatile
   379                           
   380                           ;main.c: 83: INTCON = 0x80;
   381  002F  3080               	movlw	128
   382  0030  008B               	movwf	11	;volatile
   383                           
   384                           ;main.c: 84: T1CON = 0x03;
   385  0031  3003               	movlw	3
   386  0032  1283               	bcf	3,5	;RP0=0, select bank0
   387  0033  1303               	bcf	3,6	;RP1=0, select bank0
   388  0034  0090               	movwf	16	;volatile
   389                           
   390                           ;main.c: 85: CCP1CON = 0x0F;
   391  0035  300F               	movlw	15
   392  0036  0097               	movwf	23	;volatile
   393                           
   394                           ;main.c: 86: CCPR1L = 0;
   395  0037  0195               	clrf	21	;volatile
   396                           
   397                           ;main.c: 87: CCP2CON = 0x0F;
   398  0038  300F               	movlw	15
   399  0039  009D               	movwf	29	;volatile
   400                           
   401                           ;main.c: 88: CCPR2L = 0;
   402  003A  019B               	clrf	27	;volatile
   403                           
   404                           ;main.c: 89: PR2 = 100;
   405  003B  3064               	movlw	100
   406  003C  1683               	bsf	3,5	;RP0=1, select bank1
   407  003D  1303               	bcf	3,6	;RP1=0, select bank1
   408  003E  0092               	movwf	18	;volatile
   409                           
   410                           ;main.c: 90: T2CON = 0x04;
   411  003F  3004               	movlw	4
   412  0040  1283               	bcf	3,5	;RP0=0, select bank0
   413  0041  1303               	bcf	3,6	;RP1=0, select bank0
   414  0042  0092               	movwf	18	;volatile
   415                           
   416                           ;main.c: 91: ADCON1 = 0x05;
   417  0043  3005               	movlw	5
   418  0044  1683               	bsf	3,5	;RP0=1, select bank1
   419  0045  1303               	bcf	3,6	;RP1=0, select bank1
   420  0046  009F               	movwf	31	;volatile
   421                           
   422                           ;main.c: 92: TRISC = 0xFD;
   423  0047  30FD               	movlw	253
   424  0048  0087               	movwf	7	;volatile
   425                           
   426                           ;main.c: 93: TRISB = 0xFF;
   427  0049  30FF               	movlw	255
   428  004A  0086               	movwf	6	;volatile
   429                           
   430                           ;main.c: 94: TRISA = 0xDF;
   431  004B  30DF               	movlw	223
   432  004C  0085               	movwf	5	;volatile
   433                           
   434                           ;main.c: 95: RCSTA = 0x90;
   435  004D  3090               	movlw	144
   436  004E  1283               	bcf	3,5	;RP0=0, select bank0
   437  004F  1303               	bcf	3,6	;RP1=0, select bank0
   438  0050  0098               	movwf	24	;volatile
   439                           
   440                           ;main.c: 96: TXSTA = 0x24;
   441  0051  3024               	movlw	36
   442  0052  1683               	bsf	3,5	;RP0=1, select bank1
   443  0053  1303               	bcf	3,6	;RP1=0, select bank1
   444  0054  0098               	movwf	24	;volatile
   445                           
   446                           ;main.c: 97: SPBRG = 12;
   447  0055  300C               	movlw	12
   448  0056  0099               	movwf	25	;volatile
   449                           
   450                           ;main.c: 101: if (PORTB & 0x02) {
   451  0057  1283               	bcf	3,5	;RP0=0, select bank0
   452  0058  1303               	bcf	3,6	;RP1=0, select bank0
   453  0059  1C86               	btfss	6,1	;volatile
   454  005A  28F5               	goto	l981
   455                           
   456                           ;main.c: 102: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   457  005B  3000               	movlw	0
   458  005C  120A  118A  2168  120A  118A  	fcall	_beep
   459  0061  3082               	movlw	130
   460  0062  1283               	bcf	3,5	;RP0=0, select bank0
   461  0063  1303               	bcf	3,6	;RP1=0, select bank0
   462  0064  00B7               	movwf	??_main+1
   463  0065  30DD               	movlw	221
   464  0066  00B6               	movwf	??_main
   465  0067                     u367:	
   466  0067  0BB6               	decfsz	??_main,f
   467  0068  2867               	goto	u367
   468  0069  0BB7               	decfsz	??_main+1,f
   469  006A  2867               	goto	u367
   470                           
   471                           ;main.c: 103: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   472  006B  3000               	movlw	0
   473  006C  120A  118A  2168  120A  118A  	fcall	_beep
   474  0071  3082               	movlw	130
   475  0072  1283               	bcf	3,5	;RP0=0, select bank0
   476  0073  1303               	bcf	3,6	;RP1=0, select bank0
   477  0074  00B7               	movwf	??_main+1
   478  0075  30DD               	movlw	221
   479  0076  00B6               	movwf	??_main
   480  0077                     u377:	
   481  0077  0BB6               	decfsz	??_main,f
   482  0078  2877               	goto	u377
   483  0079  0BB7               	decfsz	??_main+1,f
   484  007A  2877               	goto	u377
   485                           
   486                           ;main.c: 104: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   487  007B  3000               	movlw	0
   488  007C  120A  118A  2168  120A  118A  	fcall	_beep
   489  0081  3082               	movlw	130
   490  0082  1283               	bcf	3,5	;RP0=0, select bank0
   491  0083  1303               	bcf	3,6	;RP1=0, select bank0
   492  0084  00B7               	movwf	??_main+1
   493  0085  30DD               	movlw	221
   494  0086  00B6               	movwf	??_main
   495  0087                     u387:	
   496  0087  0BB6               	decfsz	??_main,f
   497  0088  2887               	goto	u387
   498  0089  0BB7               	decfsz	??_main+1,f
   499  008A  2887               	goto	u387
   500  008B  28DA               	goto	l951
   501  008C                     l957:	
   502                           ;main.c: 110: case '7': read_tmr1(); break;
   503                           
   504                           ;main.c: 109: switch (BUF[0]) {
   505                           
   506  008C  120A  118A  21E1  120A  118A  	fcall	_read_tmr1
   507  0091  28D7               	goto	l975
   508  0092                     l959:	
   509                           ;main.c: 111: case '5': write(BUF[1]); break;
   510                           
   511  0092  1283               	bcf	3,5	;RP0=0, select bank0
   512  0093  1303               	bcf	3,6	;RP1=0, select bank0
   513  0094  0821               	movf	_BUF+1,w
   514  0095  120A  118A  21FC  120A  118A  	fcall	_write
   515  009A  28D7               	goto	l975
   516  009B                     l961:	
   517                           ;main.c: 112: case '1': write(BUF[1]); read_tmr1(); break;
   518                           
   519  009B  1283               	bcf	3,5	;RP0=0, select bank0
   520  009C  1303               	bcf	3,6	;RP1=0, select bank0
   521  009D  0821               	movf	_BUF+1,w
   522  009E  120A  118A  21FC  120A  118A  	fcall	_write
   523  00A3  120A  118A  21E1  120A  118A  	fcall	_read_tmr1
   524  00A8  28D7               	goto	l975
   525  00A9                     l963:	
   526                           ;main.c: 113: case '2': write(0); _delay((unsigned long)((4000)*(4000000/4000.0))); beep
      +                          (0); TMR1 = 0; break;
   527                           
   528  00A9  3000               	movlw	0
   529  00AA  120A  118A  21FC  120A  118A  	fcall	_write
   530  00AF  3015               	movlw	21
   531  00B0  1283               	bcf	3,5	;RP0=0, select bank0
   532  00B1  1303               	bcf	3,6	;RP1=0, select bank0
   533  00B2  00B8               	movwf	??_main+2
   534  00B3  304B               	movlw	75
   535  00B4  00B7               	movwf	??_main+1
   536  00B5  30BD               	movlw	189
   537  00B6  00B6               	movwf	??_main
   538  00B7                     u397:	
   539  00B7  0BB6               	decfsz	??_main,f
   540  00B8  28B7               	goto	u397
   541  00B9  0BB7               	decfsz	??_main+1,f
   542  00BA  28B7               	goto	u397
   543  00BB  0BB8               	decfsz	??_main+2,f
   544  00BC  28B7               	goto	u397
   545  00BD  28BE               	nop2
   546  00BE  3000               	movlw	0
   547  00BF  120A  118A  2168  120A  118A  	fcall	_beep
   548  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   549  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   550  00C6  018E               	clrf	14	;volatile
   551  00C7  018F               	clrf	15	;volatile
   552                           
   553                           ;main.c: 114: }
   554  00C8  28D7               	goto	l975
   555  00C9                     l973:	
   556  00C9  0820               	movf	_BUF,w
   557                           
   558                           ; Switch size 1, requested type "space"
   559                           ; Number of cases is 4, Range of values is 49 to 55
   560                           ; switch strategies available:
   561                           ; Name         Instructions Cycles
   562                           ; simple_byte           13     7 (average)
   563                           ; direct_byte           32    11 (fixed)
   564                           ; jumptable            263     9 (fixed)
   565                           ;	Chosen strategy is simple_byte
   566  00CA  3A31               	xorlw	49	; case 49
   567  00CB  1903               	skipnz
   568  00CC  289B               	goto	l961
   569  00CD  3A03               	xorlw	3	; case 50
   570  00CE  1903               	skipnz
   571  00CF  28A9               	goto	l963
   572  00D0  3A07               	xorlw	7	; case 53
   573  00D1  1903               	skipnz
   574  00D2  2892               	goto	l959
   575  00D3  3A02               	xorlw	2	; case 55
   576  00D4  1903               	skipnz
   577  00D5  288C               	goto	l957
   578  00D6  28D7               	goto	l975
   579  00D7                     l975:	
   580                           
   581                           ;main.c: 115: RC = 0;
   582  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   583  00D8  1303               	bcf	3,6	;RP1=0, select bank0
   584  00D9  01C0               	clrf	_RC
   585  00DA                     l951:	
   586                           ;main.c: 105: while (1) {
   587                           
   588                           ;main.c: 116: }
   589                           
   590                           
   591                           ;main.c: 107: char x = rsget();
   592  00DA  120A  118A  223C  120A  118A  	fcall	_rsget
   593  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   594  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   595  00E1  00B6               	movwf	??_main
   596  00E2  0836               	movf	??_main,w
   597  00E3  00B9               	movwf	main@x
   598                           
   599                           ;main.c: 108: if (x == '\n') {
   600  00E4  300A               	movlw	10
   601  00E5  0639               	xorwf	main@x,w
   602  00E6  1903               	btfsc	3,2
   603  00E7  28C9               	goto	l973
   604                           
   605                           ;main.c: 117: else {
   606                           ;main.c: 118: BUF[RC] = x;
   607  00E8  0839               	movf	main@x,w
   608  00E9  00B6               	movwf	??_main
   609  00EA  0840               	movf	_RC,w
   610  00EB  3E20               	addlw	(low (_BUF| 0))& (0+255)
   611  00EC  0084               	movwf	4
   612  00ED  0836               	movf	??_main,w
   613  00EE  1383               	bcf	3,7	;select IRP bank0
   614  00EF  0080               	movwf	0
   615                           
   616                           ;main.c: 119: RC++;
   617  00F0  3001               	movlw	1
   618  00F1  00B6               	movwf	??_main
   619  00F2  0836               	movf	??_main,w
   620  00F3  07C0               	addwf	_RC,f
   621  00F4  28DA               	goto	l951
   622  00F5                     l981:	
   623                           ;main.c: 120: }
   624                           ;main.c: 121: }
   625                           ;main.c: 122: }
   626                           
   627                           
   628                           ;main.c: 124: else {
   629                           ;main.c: 125: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   630  00F5  3000               	movlw	0
   631  00F6  120A  118A  2168  120A  118A  	fcall	_beep
   632  00FB  3082               	movlw	130
   633  00FC  1283               	bcf	3,5	;RP0=0, select bank0
   634  00FD  1303               	bcf	3,6	;RP1=0, select bank0
   635  00FE  00B7               	movwf	??_main+1
   636  00FF  30DD               	movlw	221
   637  0100  00B6               	movwf	??_main
   638  0101                     u407:	
   639  0101  0BB6               	decfsz	??_main,f
   640  0102  2901               	goto	u407
   641  0103  0BB7               	decfsz	??_main+1,f
   642  0104  2901               	goto	u407
   643                           
   644                           ;main.c: 126: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   645  0105  3001               	movlw	1
   646  0106  120A  118A  2168  120A  118A  	fcall	_beep
   647  010B  3082               	movlw	130
   648  010C  1283               	bcf	3,5	;RP0=0, select bank0
   649  010D  1303               	bcf	3,6	;RP1=0, select bank0
   650  010E  00B7               	movwf	??_main+1
   651  010F  30DD               	movlw	221
   652  0110  00B6               	movwf	??_main
   653  0111                     u417:	
   654  0111  0BB6               	decfsz	??_main,f
   655  0112  2911               	goto	u417
   656  0113  0BB7               	decfsz	??_main+1,f
   657  0114  2911               	goto	u417
   658  0115  2932               	goto	l987
   659  0116                     l993:	
   660                           
   661                           ;main.c: 132: PWMZOH = msg;
   662  0116  083A               	movf	main@msg,w
   663  0117  00B6               	movwf	??_main
   664  0118  0836               	movf	??_main,w
   665  0119  00BE               	movwf	_PWMZOH
   666                           
   667                           ;main.c: 133: rsend(T1ZOH);
   668  011A  083C               	movf	_T1ZOH,w
   669  011B  120A  118A  2234  120A  118A  	fcall	_rsend
   670                           
   671                           ;main.c: 134: rsend(T1ZOH >> 8);
   672  0120  1283               	bcf	3,5	;RP0=0, select bank0
   673  0121  1303               	bcf	3,6	;RP1=0, select bank0
   674  0122  083D               	movf	_T1ZOH+1,w
   675  0123  120A  118A  2234  120A  118A  	fcall	_rsend
   676                           
   677                           ;main.c: 135: }
   678  0128  2932               	goto	l987
   679  0129                     l1001:	
   680                           
   681                           ;main.c: 137: T0PS = msg;
   682  0129  083A               	movf	main@msg,w
   683  012A  00B6               	movwf	??_main
   684  012B  0836               	movf	??_main,w
   685  012C  00BF               	movwf	_T0PS
   686                           
   687                           ;main.c: 138: TMR1 = 0;
   688  012D  018E               	clrf	14	;volatile
   689  012E  018F               	clrf	15	;volatile
   690  012F  1410               	bsf	16,0	;# 
   691  0130  0181               	clrf	1	;# 
   692  0131  168B               	bsf	11,5	;# 
   693  0132                     l987:	
   694                           ;main.c: 127: while (1) {
   695                           
   696                           ;main.c: 142: }
   697                           
   698                           
   699                           ;main.c: 129: char cmd = rsget();
   700  0132  120A  118A  223C  120A  118A  	fcall	_rsget
   701  0137  1283               	bcf	3,5	;RP0=0, select bank0
   702  0138  1303               	bcf	3,6	;RP1=0, select bank0
   703  0139  00B6               	movwf	??_main
   704  013A  0836               	movf	??_main,w
   705  013B  00BB               	movwf	main@cmd
   706                           
   707                           ;main.c: 130: char msg = rsget();
   708  013C  120A  118A  223C  120A  118A  	fcall	_rsget
   709  0141  1283               	bcf	3,5	;RP0=0, select bank0
   710  0142  1303               	bcf	3,6	;RP1=0, select bank0
   711  0143  00B6               	movwf	??_main
   712  0144  0836               	movf	??_main,w
   713  0145  00BA               	movwf	main@msg
   714                           
   715                           ;main.c: 131: if (cmd == 'x') {
   716  0146  3078               	movlw	120
   717  0147  063B               	xorwf	main@cmd,w
   718  0148  1903               	btfsc	3,2
   719  0149  2916               	goto	l993
   720                           
   721                           ;main.c: 136: else if (cmd == 't') {
   722  014A  3074               	movlw	116
   723  014B  1283               	bcf	3,5	;RP0=0, select bank0
   724  014C  1303               	bcf	3,6	;RP1=0, select bank0
   725  014D  063B               	xorwf	main@cmd,w
   726  014E  1903               	btfsc	3,2
   727  014F  2929               	goto	l1001
   728                           
   729                           ;main.c: 143: else if (cmd == 's') {
   730  0150  3073               	movlw	115
   731  0151  1283               	bcf	3,5	;RP0=0, select bank0
   732  0152  1303               	bcf	3,6	;RP1=0, select bank0
   733  0153  063B               	xorwf	main@cmd,w
   734  0154  1D03               	btfss	3,2
   735  0155  2932               	goto	l987
   736                           
   737                           ;main.c: 144: T1CON &= 0xFE;
   738  0156  30FE               	movlw	254
   739  0157  00B6               	movwf	??_main
   740  0158  0836               	movf	??_main,w
   741  0159  0590               	andwf	16,f	;volatile
   742                           
   743                           ;main.c: 145: INTCON &= 0xDF;
   744  015A  30DF               	movlw	223
   745  015B  00B6               	movwf	??_main
   746  015C  0836               	movf	??_main,w
   747  015D  058B               	andwf	11,f	;volatile
   748                           
   749                           ;main.c: 146: PWM = 0;
   750  015E  019B               	clrf	27
   751                           
   752                           ;main.c: 147: T1ZOH = 0;
   753  015F  01BC               	clrf	_T1ZOH
   754  0160  01BD               	clrf	_T1ZOH+1
   755                           
   756                           ;main.c: 148: beep(0);
   757  0161  3000               	movlw	0
   758  0162  120A  118A  2168  120A  118A  	fcall	_beep
   759  0167  2932               	goto	l987
   760  0168                     __end_of_main:	
   761                           ;main.c: 149: }
   762                           ;main.c: 150: }
   763                           ;main.c: 151: }
   764                           ;main.c: 152: return 0;
   765                           ;	Return value of _main is never used
   766                           
   767                           
   768                           	psect	text1
   769  01FC                     __ptext1:	
   770 ;; *************** function _write *****************
   771 ;; Defined at:
   772 ;;		line 61 in file "main.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;  duty            1    wreg     char 
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  duty            1    5[COMMON] char 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, status,2
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   786 ;;      Params:         0       0       0       0       0
   787 ;;      Locals:         1       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0
   789 ;;      Totals:         1       0       0       0       0
   790 ;;Total ram usage:        1 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:    1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           
   801                           ;psect for function _write
   802  01FC                     _write:	
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _write: [wreg+status,2]
   806                           ;write@duty stored from wreg
   807  01FC  00F5               	movwf	write@duty
   808                           
   809                           ;main.c: 62: if (duty > 100) PWM = 100;
   810  01FD  0875               	movf	write@duty,w
   811  01FE  3A80               	xorlw	128
   812  01FF  3E1B               	addlw	-229
   813  0200  1C03               	skipc
   814  0201  2A07               	goto	l85
   815  0202  3064               	movlw	100
   816  0203  1283               	bcf	3,5	;RP0=0, select bank0
   817  0204  1303               	bcf	3,6	;RP1=0, select bank0
   818  0205  009B               	movwf	27
   819  0206  0008               	return
   820  0207                     l85:	
   821                           
   822                           ;main.c: 63: else if (duty < 0) PWM = 0;
   823  0207  1FF5               	btfss	write@duty,7
   824  0208  2A0D               	goto	l799
   825  0209  1283               	bcf	3,5	;RP0=0, select bank0
   826  020A  1303               	bcf	3,6	;RP1=0, select bank0
   827  020B  019B               	clrf	27
   828  020C  0008               	return
   829  020D                     l799:	
   830                           
   831                           ;main.c: 64: else PWM = duty;
   832  020D  0875               	movf	write@duty,w
   833  020E  1283               	bcf	3,5	;RP0=0, select bank0
   834  020F  1303               	bcf	3,6	;RP1=0, select bank0
   835  0210  009B               	movwf	27
   836  0211  0008               	return
   837  0212                     __end_of_write:	
   838                           
   839                           	psect	text2
   840  023C                     __ptext2:	
   841 ;; *************** function _rsget *****************
   842 ;; Defined at:
   843 ;;		line 47 in file "main.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      unsigned char 
   850 ;; Registers used:
   851 ;;		wreg
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   857 ;;      Params:         0       0       0       0       0
   858 ;;      Locals:         0       0       0       0       0
   859 ;;      Temps:          0       0       0       0       0
   860 ;;      Totals:         0       0       0       0       0
   861 ;;Total ram usage:        0 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function _rsget
   873  023C                     _rsget:	
   874  023C                     l76:	
   875                           ;main.c: 48: while (!RCIF) continue;
   876                           
   877                           ;incstack = 0
   878                           ; Regs used in _rsget: [wreg]
   879                           
   880  023C  1283               	bcf	3,5	;RP0=0, select bank0
   881  023D  1303               	bcf	3,6	;RP1=0, select bank0
   882  023E  1E8C               	btfss	12,5	;volatile
   883  023F  2A3C               	goto	l76
   884                           
   885                           ;main.c: 49: return RCREG;
   886  0240  081A               	movf	26,w	;volatile
   887  0241  0008               	return
   888  0242                     __end_of_rsget:	
   889                           
   890                           	psect	text3
   891  01E1                     __ptext3:	
   892 ;; *************** function _read_tmr1 *****************
   893 ;; Defined at:
   894 ;;		line 54 in file "main.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, status,2, status,0, pclath, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   908 ;;      Params:         0       0       0       0       0
   909 ;;      Locals:         0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0
   911 ;;      Totals:         0       0       0       0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    2
   915 ;; This function calls:
   916 ;;		_rsend
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _read_tmr1
   924  01E1                     _read_tmr1:	
   925                           
   926                           ;main.c: 55: T1ZOH = TMR1;
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   930  01E1  1283               	bcf	3,5	;RP0=0, select bank0
   931  01E2  1303               	bcf	3,6	;RP1=0, select bank0
   932  01E3  080F               	movf	15,w	;volatile
   933  01E4  00BD               	movwf	_T1ZOH+1
   934  01E5  080E               	movf	14,w	;volatile
   935  01E6  00BC               	movwf	_T1ZOH
   936                           
   937                           ;main.c: 56: rsend(T1ZOH >> 8);
   938  01E7  083D               	movf	_T1ZOH+1,w
   939  01E8  120A  118A  2234  120A  118A  	fcall	_rsend
   940                           
   941                           ;main.c: 57: rsend(T1ZOH);
   942  01ED  1283               	bcf	3,5	;RP0=0, select bank0
   943  01EE  1303               	bcf	3,6	;RP1=0, select bank0
   944  01EF  083C               	movf	_T1ZOH,w
   945  01F0  120A  118A  2234   	fcall	_rsend
   946                           
   947                           ;main.c: 58: TMR1 -= T1ZOH;
   948  01F3  1283               	bcf	3,5	;RP0=0, select bank0
   949  01F4  1303               	bcf	3,6	;RP1=0, select bank0
   950  01F5  083C               	movf	_T1ZOH,w
   951  01F6  028E               	subwf	14,f	;volatile
   952  01F7  083D               	movf	_T1ZOH+1,w
   953  01F8  1C03               	skipc
   954  01F9  038F               	decf	15,f	;volatile
   955  01FA  028F               	subwf	15,f	;volatile
   956  01FB  0008               	return
   957  01FC                     __end_of_read_tmr1:	
   958                           
   959                           	psect	text4
   960  0234                     __ptext4:	
   961 ;; *************** function _rsend *****************
   962 ;; Defined at:
   963 ;;		line 42 in file "main.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  msg             1    wreg     unsigned char 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  msg             1    5[COMMON] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   977 ;;      Params:         0       0       0       0       0
   978 ;;      Locals:         1       0       0       0       0
   979 ;;      Temps:          0       0       0       0       0
   980 ;;      Totals:         1       0       0       0       0
   981 ;;Total ram usage:        1 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    1
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_read_tmr1
   988 ;;		_main
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           
   993                           ;psect for function _rsend
   994  0234                     _rsend:	
   995                           
   996                           ;incstack = 0
   997                           ; Regs used in _rsend: [wreg]
   998                           ;rsend@msg stored from wreg
   999  0234  00F5               	movwf	rsend@msg
  1000  0235                     l70:	
  1001                           ;main.c: 43: while (!TXIF) continue;
  1002                           
  1003  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1004  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1005  0237  1E0C               	btfss	12,4	;volatile
  1006  0238  2A35               	goto	l70
  1007                           
  1008                           ;main.c: 44: TXREG = msg;
  1009  0239  0875               	movf	rsend@msg,w
  1010  023A  0099               	movwf	25	;volatile
  1011  023B  0008               	return
  1012  023C                     __end_of_rsend:	
  1013                           
  1014                           	psect	text5
  1015  0168                     __ptext5:	
  1016 ;; *************** function _beep *****************
  1017 ;; Defined at:
  1018 ;;		line 31 in file "main.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  dash            1    wreg     unsigned char 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;  dash            1    0[BANK0 ] unsigned char 
  1023 ;;  j               2    3[BANK0 ] int 
  1024 ;;  j               2    1[BANK0 ] int 
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		wreg, status,2, status,0, btemp+1
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1034 ;;      Params:         0       0       0       0       0
  1035 ;;      Locals:         0       5       0       0       0
  1036 ;;      Temps:          1       0       0       0       0
  1037 ;;      Totals:         1       5       0       0       0
  1038 ;;Total ram usage:        6 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    1
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_main
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           
  1049                           ;psect for function _beep
  1050  0168                     _beep:	
  1051                           
  1052                           ;incstack = 0
  1053                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1054                           ;beep@dash stored from wreg
  1055  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1056  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1057  016A  00B1               	movwf	beep@dash
  1058                           
  1059                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1060  016B  0831               	movf	beep@dash,w
  1061  016C  1D03               	btfss	3,2
  1062  016D  2996               	goto	l769
  1063  016E  01B2               	clrf	beep@j
  1064  016F  01B3               	clrf	beep@j+1
  1065  0170                     L1:	
  1066  0170  0833               	movf	beep@j+1,w
  1067  0171  3A80               	xorlw	128
  1068  0172  00FF               	movwf	127
  1069  0173  3080               	movlw	128
  1070  0174  027F               	subwf	127,w
  1071  0175  1D03               	skipz
  1072  0176  2979               	goto	u185
  1073  0177  3064               	movlw	100
  1074  0178  0232               	subwf	beep@j,w
  1075  0179                     u185:	
  1076  0179  1803               	btfsc	3,0
  1077  017A  0008               	return
  1078                           
  1079                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1080  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1081  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1082  017D  1685               	bsf	5,5
  1083  017E  30C7               	movlw	199
  1084  017F  00F5               	movwf	??_beep
  1085  0180                     u427:	
  1086  0180  2981               	nop2
  1087  0181  0BF5               	decfsz	??_beep,f
  1088  0182  2980               	goto	u427
  1089  0183  2984               	nop2
  1090  0184  2985               	nop2
  1091                           
  1092                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1093  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1094  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1095  0187  1285               	bcf	5,5
  1096  0188  30A6               	movlw	166
  1097  0189  00F5               	movwf	??_beep
  1098  018A                     u437:	
  1099  018A  0BF5               	decfsz	??_beep,f
  1100  018B  298A               	goto	u437
  1101  018C  0000               	nop
  1102  018D  3001               	movlw	1
  1103  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1104  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0190  07B2               	addwf	beep@j,f
  1106  0191  1803               	skipnc
  1107  0192  0AB3               	incf	beep@j+1,f
  1108  0193  3000               	movlw	0
  1109  0194  07B3               	addwf	beep@j+1,f
  1110  0195  2970               	goto	L1
  1111  0196                     l769:	
  1112                           ;main.c: 35: }
  1113                           
  1114                           
  1115                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1116  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0198  01B4               	clrf	beep@j_56
  1119  0199  01B5               	clrf	beep@j_56+1
  1120  019A                     L2:	
  1121  019A  0835               	movf	beep@j_56+1,w
  1122  019B  3A80               	xorlw	128
  1123  019C  00FF               	movwf	127
  1124  019D  3081               	movlw	129
  1125  019E  027F               	subwf	127,w
  1126  019F  1D03               	skipz
  1127  01A0  29A3               	goto	u205
  1128  01A1  30F4               	movlw	244
  1129  01A2  0234               	subwf	beep@j_56,w
  1130  01A3                     u205:	
  1131  01A3  1803               	btfsc	3,0
  1132  01A4  0008               	return
  1133                           
  1134                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1135  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1136  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1137  01A7  1685               	bsf	5,5
  1138  01A8  30C7               	movlw	199
  1139  01A9  00F5               	movwf	??_beep
  1140  01AA                     u447:	
  1141  01AA  29AB               	nop2
  1142  01AB  0BF5               	decfsz	??_beep,f
  1143  01AC  29AA               	goto	u447
  1144  01AD  29AE               	nop2
  1145  01AE  29AF               	nop2
  1146                           
  1147                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1148  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1149  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1150  01B1  1285               	bcf	5,5
  1151  01B2  30A6               	movlw	166
  1152  01B3  00F5               	movwf	??_beep
  1153  01B4                     u457:	
  1154  01B4  0BF5               	decfsz	??_beep,f
  1155  01B5  29B4               	goto	u457
  1156  01B6  0000               	nop
  1157  01B7  3001               	movlw	1
  1158  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1159  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1160  01BA  07B4               	addwf	beep@j_56,f
  1161  01BB  1803               	skipnc
  1162  01BC  0AB5               	incf	beep@j_56+1,f
  1163  01BD  3000               	movlw	0
  1164  01BE  07B5               	addwf	beep@j_56+1,f
  1165  01BF  299A               	goto	L2
  1166  01C0                     __end_of_beep:	
  1167                           
  1168                           	psect	text6
  1169  01C0                     __ptext6:	
  1170 ;; *************** function _sampling *****************
  1171 ;; Defined at:
  1172 ;;		line 70 in file "main.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1186 ;;      Params:         0       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0
  1188 ;;      Temps:          5       0       0       0       0
  1189 ;;      Totals:         5       0       0       0       0
  1190 ;;Total ram usage:        5 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; This function calls:
  1193 ;;		Nothing
  1194 ;; This function is called by:
  1195 ;;		Interrupt level 1
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           
  1200                           ;psect for function _sampling
  1201  01C0                     _sampling:	
  1202                           
  1203                           ;main.c: 71: kT0++;
  1204  01C0  3001               	movlw	1
  1205  01C1  00F0               	movwf	??_sampling
  1206  01C2  0870               	movf	??_sampling,w
  1207  01C3  07F6               	addwf	_kT0,f	;volatile
  1208                           
  1209                           ;main.c: 72: if (kT0 > T0PS) {
  1210  01C4  0876               	movf	_kT0,w	;volatile
  1211  01C5  023F               	subwf	_T0PS,w
  1212  01C6  1803               	skipnc
  1213  01C7  29D5               	goto	i1l813
  1214                           
  1215                           ;main.c: 73: kT0 = 0;
  1216  01C8  01F6               	clrf	_kT0	;volatile
  1217                           
  1218                           ;main.c: 74: T1ZOH = TMR1;
  1219  01C9  080F               	movf	15,w	;volatile
  1220  01CA  00BD               	movwf	_T1ZOH+1
  1221  01CB  080E               	movf	14,w	;volatile
  1222  01CC  00BC               	movwf	_T1ZOH
  1223                           
  1224                           ;main.c: 75: PWM = PWMZOH;
  1225  01CD  083E               	movf	_PWMZOH,w
  1226  01CE  009B               	movwf	27
  1227                           
  1228                           ;main.c: 76: TMR1 -= T1ZOH;
  1229  01CF  083C               	movf	_T1ZOH,w
  1230  01D0  028E               	subwf	14,f	;volatile
  1231  01D1  083D               	movf	_T1ZOH+1,w
  1232  01D2  1C03               	skipc
  1233  01D3  038F               	decf	15,f	;volatile
  1234  01D4  028F               	subwf	15,f	;volatile
  1235  01D5                     i1l813:	
  1236                           
  1237                           ;main.c: 77: }
  1238                           ;main.c: 78: TMR0IF = 0;
  1239  01D5  110B               	bcf	11,2	;volatile
  1240  01D6  0874               	movf	??_sampling+4,w
  1241  01D7  00FF               	movwf	127
  1242  01D8  0873               	movf	??_sampling+3,w
  1243  01D9  008A               	movwf	10
  1244  01DA  0872               	movf	??_sampling+2,w
  1245  01DB  0084               	movwf	4
  1246  01DC  0E71               	swapf	(??_sampling+1)^(0+-128),w
  1247  01DD  0083               	movwf	3
  1248  01DE  0EFE               	swapf	126,f
  1249  01DF  0E7E               	swapf	126,w
  1250  01E0  0009               	retfie
  1251  01E1                     __end_of_sampling:	
  1252  007E                     btemp	set	126	;btemp
  1253  007E                     wtemp0	set	126
  1254                           
  1255                           	psect	intentry
  1256  0004                     __pintentry:	
  1257                           ;incstack = 0
  1258                           ; Regs used in _sampling: [wreg+status,2+status,0]
  1259                           
  1260  0004                     interrupt_function:	
  1261  007E                     saved_w	set	btemp
  1262  0004  00FE               	movwf	btemp
  1263  0005  0E03               	swapf	3,w
  1264  0006  00F1               	movwf	??_sampling+1
  1265  0007  0804               	movf	4,w
  1266  0008  00F2               	movwf	??_sampling+2
  1267  0009  080A               	movf	10,w
  1268  000A  00F3               	movwf	??_sampling+3
  1269  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1270  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1271  000D  087F               	movf	btemp+1,w
  1272  000E  00F4               	movwf	??_sampling+4
  1273  000F  120A  118A  29C0   	ljmp	_sampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       7
    BANK0            80     11      33
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_rsend
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     450
                                              5 BANK0      6     6      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              5 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _sampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      B      21       5       41.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       7       1       50.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      28      12        0.0%
ABS                  0      0      28       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Jan  1 16:54:56 2018

                      pc 0002              __CFG_CP$OFF 0000                       l70 0235  
                     l76 023C                       l85 0207                       _RC 0040  
                     fsr 0004                      TMR0 0001                      l951 00DA  
                    l769 0196                      l961 009B                      l963 00A9  
                    l957 008C                      l973 00C9                      l981 00F5  
                    l799 020D                      l959 0092                      l975 00D7  
                    l993 0116                      l987 0132                      _BUF 0020  
                    _BUZ 002D                      u205 01A3                      _PR2 0092  
                    u407 0101                      u185 0179                      u417 0111  
           __CFG_CPD$OFF 0000                      u427 0180                      u437 018A  
                    u447 01AA                      u367 0067                      u457 01B4  
                    u377 0077                      u387 0087                      u397 00B7  
                    _PWM 001B                      _kT0 0076                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000                     T1CON 0010  
           __CFG_LVP$OFF 0000                     l1001 0129                     _T0PS 003F  
                   _RCIF 0065                     _TMR1 000E                     _TXIF 0064  
           __CFG_WRT$OFF 0000                     _beep 0168                     _main 002B  
                   btemp 007E                     start 0012                    INTCON 000B  
                  ?_beep 0070                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _T1CON 0010                    _T2CON 0012                    _T1ZOH 003C  
                  i1l813 01D5                    _RCREG 001A                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TXREG 0019  
                  _TXSTA 0098                    beep@j 0032                    _rsend 0234  
                  _rsget 023C                    main@x 0039                    _write 01FC  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0015             __end_of_beep 01C0  
           __end_of_main 0168                   ??_beep 0075                   ??_main 0036  
                 _ADCON1 009F                   _CCPR1L 0015                   _CCPR2L 001B  
                 ?_rsend 0070                   ?_rsget 0070                   ?_write 0070  
                 _INTCON 000B                   _TMR0IF 005A                   _PWMZOH 003E  
         __CFG_PWRTE$OFF 0000         __end_of_sampling 01E1                   saved_w 007E  
__end_of__initialization 0027           __pcstackCOMMON 0070             __pidataBANK0 0212  
          __end_of_rsend 023C            __end_of_rsget 0242            __end_of_write 0212  
                ??_rsend 0075                  ??_rsget 0075                  ??_write 0075  
             __pbssBANK0 003C       __size_of_read_tmr1 001B               __pmaintext 002B  
             __pintentry 0004                  _CCP1CON 0017                  _CCP2CON 001D  
              ?_sampling 0070                  __ptext1 01FC                  __ptext2 023C  
                __ptext3 01E1                  __ptext4 0234                  __ptext5 0168  
                __ptext6 01C0        __end_of_read_tmr1 01FC                  main@cmd 003B  
                main@msg 003A     end_of_initialization 0027               ??_sampling 0070  
    start_initialization 0015               init_fetch0 0223              __pdataBANK0 0020  
            __pbssCOMMON 0076                ___latbits 0002            __pcstackBANK0 0031  
      __size_of_sampling 0021                _read_tmr1 01E1           __size_of_rsend 0008  
         __size_of_rsget 0006           __size_of_write 0016        interrupt_function 0004  
             ?_read_tmr1 0070                 beep@j_56 0034                 beep@dash 0031  
          __size_of_beep 0058            __size_of_main 013D                 _sampling 01C0  
               init_ram0 0227              ??_read_tmr1 0076                 intlevel1 0000  
              write@duty 0075                 rsend@msg 0075               _OPTION_REG 0081  
