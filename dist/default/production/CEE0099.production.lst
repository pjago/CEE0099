

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Jan  3 18:08:19 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0226                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0226  3420               	retlw	32
   122  0227  3420               	retlw	32
   123  0228  3420               	retlw	32
   124  0229  3420               	retlw	32
   125  022A  3420               	retlw	32
   126  022B  3420               	retlw	32
   127  022C  3420               	retlw	32
   128  022D  3420               	retlw	32
   129  022E  3420               	retlw	32
   130  022F  3420               	retlw	32
   131  0230  3420               	retlw	32
   132  0231  3420               	retlw	32
   133  0232  3420               	retlw	32
   134  0233  3420               	retlw	32
   135  0234  3420               	retlw	32
   136  0235  3420               	retlw	32
   137  0236  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0001                     _TMR0	set	1
   141  0006                     _PORTB	set	6
   142  0018                     _RCSTA	set	24
   143  0012                     _T2CON	set	18
   144  001B                     _CCPR2L	set	27
   145  001D                     _CCP2CON	set	29
   146  0015                     _CCPR1L	set	21
   147  0017                     _CCP1CON	set	23
   148  0010                     _T1CON	set	16
   149  000B                     _INTCON	set	11
   150  001A                     _RCREG	set	26
   151  0019                     _TXREG	set	25
   152  002D                     _BUZ	set	45
   153  005A                     _TMR0IF	set	90
   154  0065                     _RCIF	set	101
   155  0064                     _TXIF	set	100
   156  0099                     _SPBRG	set	153
   157  0098                     _TXSTA	set	152
   158  0085                     _TRISA	set	133
   159  0086                     _TRISB	set	134
   160  0087                     _TRISC	set	135
   161  009F                     _ADCON1	set	159
   162  0092                     _PR2	set	146
   163  0081                     _OPTION_REG	set	129
   164                           
   165                           ; #config settings
   166  0000                     
   167                           	psect	cinit
   168  0015                     start_initialization:	
   169  0015                     __initialization:	
   170                           
   171                           ; Initialize objects allocated to BANK0
   172  0015  1383               	bcf	3,7	;select IRP bank0
   173  0016  3031               	movlw	low (__pdataBANK0+17)
   174  0017  00FD               	movwf	btemp+-1
   175  0018  3002               	movlw	high __pidataBANK0
   176  0019  00FE               	movwf	btemp
   177  001A  3026               	movlw	low __pidataBANK0
   178  001B  00FF               	movwf	btemp+1
   179  001C  3020               	movlw	low __pdataBANK0
   180  001D  0084               	movwf	4
   181  001E  120A  118A  223B   	fcall	init_ram0
   182                           
   183                           ; Clear objects allocated to BANK0
   184  0021  01BB               	clrf	__pbssBANK0& (0+127)
   185  0022  01BC               	clrf	(__pbssBANK0+1)& (0+127)
   186  0023  01BD               	clrf	(__pbssBANK0+2)& (0+127)
   187  0024  01BE               	clrf	(__pbssBANK0+3)& (0+127)
   188  0025  01BF               	clrf	(__pbssBANK0+4)& (0+127)
   189  0026  01C0               	clrf	(__pbssBANK0+5)& (0+127)
   190  0027  01C1               	clrf	(__pbssBANK0+6)& (0+127)
   191  0028                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0028                     __end_of__initialization:	
   195  0028  0183               	clrf	3
   196  0029  120A  118A  282C   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssBANK0
   199  003B                     __pbssBANK0:	
   200  003B                     _T1ZOH:	
   201  003B                     	ds	2
   202  003D                     _T0PS:	
   203  003D                     	ds	1
   204  003E                     _kT0:	
   205  003E                     	ds	1
   206  003F                     _PWMZOH:	
   207  003F                     	ds	1
   208  0040                     _RUN:	
   209  0040                     	ds	1
   210  0041                     _RC:	
   211  0041                     	ds	1
   212                           
   213                           	psect	dataBANK0
   214  0020                     __pdataBANK0:	
   215  0020                     _BUF:	
   216  0020                     	ds	17
   217                           
   218                           	psect	inittext
   219  0237                     init_fetch0:	
   220                           ;	Called with low address in FSR and high address in W
   221                           
   222  0237  087E               	movf	126,w
   223  0238  008A               	movwf	10
   224  0239  087F               	movf	127,w
   225  023A  0082               	movwf	2
   226  023B                     init_ram0:	
   227                           ;Called with:
   228                           ;	high address of idata address in btemp 
   229                           ;	low address of idata address in btemp+1 
   230                           ;	low address of data in FSR
   231                           ;	high address + 1 of data in btemp-1
   232                           
   233  023B  2237  120A  118A   	fcall	init_fetch0
   234  023E  0080               	movwf	0
   235  023F  0A84               	incf	4,f
   236  0240  0804               	movf	4,w
   237  0241  067D               	xorwf	125,w
   238  0242  1903               	btfsc	3,2
   239  0243  3400               	retlw	0
   240  0244  0AFF               	incf	127,f
   241  0245  1903               	btfsc	3,2
   242  0246  0AFE               	incf	126,f
   243  0247  2A3B               	goto	init_ram0
   244                           
   245                           	psect	cstackCOMMON
   246  0070                     __pcstackCOMMON:	
   247  0070                     ?_beep:	
   248  0070                     ?_rsend:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_rsget:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_read_tmr1:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_write:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_sampling:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?i1_rsend:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ??i1_rsend:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_main:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     i1rsend@msg:	
   273                           ; 2 bytes @ 0x0
   274                           
   275                           
   276                           ; 1 bytes @ 0x0
   277  0070                     	ds	1
   278  0071                     ??_sampling:	
   279                           
   280                           ; 1 bytes @ 0x1
   281  0071                     	ds	5
   282  0076                     ??_beep:	
   283  0076                     ??_rsend:	
   284                           ; 1 bytes @ 0x6
   285                           
   286  0076                     ??_rsget:	
   287                           ; 1 bytes @ 0x6
   288                           
   289  0076                     ??_write:	
   290                           ; 1 bytes @ 0x6
   291                           
   292  0076                     rsend@msg:	
   293                           ; 1 bytes @ 0x6
   294                           
   295  0076                     write@duty:	
   296                           ; 1 bytes @ 0x6
   297                           
   298                           
   299                           ; 1 bytes @ 0x6
   300  0076                     	ds	1
   301  0077                     ??_read_tmr1:	
   302                           
   303                           	psect	cstackBANK0
   304  0031                     __pcstackBANK0:	
   305                           ; 1 bytes @ 0x7
   306                           
   307  0031                     beep@dash:	
   308                           
   309                           ; 1 bytes @ 0x0
   310  0031                     	ds	1
   311  0032                     beep@j:	
   312                           
   313                           ; 2 bytes @ 0x1
   314  0032                     	ds	2
   315  0034                     beep@j_57:	
   316                           
   317                           ; 2 bytes @ 0x3
   318  0034                     	ds	2
   319  0036                     ??_main:	
   320                           
   321                           ; 1 bytes @ 0x5
   322  0036                     	ds	2
   323  0038                     main@x:	
   324                           
   325                           ; 1 bytes @ 0x7
   326  0038                     	ds	1
   327  0039                     main@msg:	
   328                           
   329                           ; 1 bytes @ 0x8
   330  0039                     	ds	1
   331  003A                     main@cmd:	
   332                           
   333                           ; 1 bytes @ 0x9
   334  003A                     	ds	1
   335                           
   336                           	psect	maintext
   337  002C                     __pmaintext:	
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 87 in file "main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;  cmd             1    9[BANK0 ] unsigned char 
   348 ;;  msg             1    8[BANK0 ] unsigned char 
   349 ;;  x               1    7[BANK0 ] unsigned char 
   350 ;; Return value:  Size  Location     Type
   351 ;;                  2  110[None  ] int 
   352 ;; Registers used:
   353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : B00/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   359 ;;      Params:         0       0       0       0       0
   360 ;;      Locals:         0       3       0       0       0
   361 ;;      Temps:          0       2       0       0       0
   362 ;;      Totals:         0       5       0       0       0
   363 ;;Total ram usage:        5 bytes
   364 ;; Hardware stack levels required when called:    4
   365 ;; This function calls:
   366 ;;		_beep
   367 ;;		_read_tmr1
   368 ;;		_rsget
   369 ;;		_write
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           
   376                           ;psect for function _main
   377  002C                     _main:	
   378                           
   379                           ;main.c: 88: OPTION_REG = 0x83;
   380                           
   381                           ;incstack = 0
   382                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   383  002C  3083               	movlw	131
   384  002D  1683               	bsf	3,5	;RP0=1, select bank1
   385  002E  1303               	bcf	3,6	;RP1=0, select bank1
   386  002F  0081               	movwf	1	;volatile
   387                           
   388                           ;main.c: 89: INTCON = 0x80;
   389  0030  3080               	movlw	128
   390  0031  008B               	movwf	11	;volatile
   391                           
   392                           ;main.c: 90: T1CON = 0x03;
   393  0032  3003               	movlw	3
   394  0033  1283               	bcf	3,5	;RP0=0, select bank0
   395  0034  1303               	bcf	3,6	;RP1=0, select bank0
   396  0035  0090               	movwf	16	;volatile
   397                           
   398                           ;main.c: 91: CCP1CON = 0x0F;
   399  0036  300F               	movlw	15
   400  0037  0097               	movwf	23	;volatile
   401                           
   402                           ;main.c: 92: CCPR1L = 0;
   403  0038  0195               	clrf	21	;volatile
   404                           
   405                           ;main.c: 93: CCP2CON = 0x0F;
   406  0039  300F               	movlw	15
   407  003A  009D               	movwf	29	;volatile
   408                           
   409                           ;main.c: 94: CCPR2L = 0;
   410  003B  019B               	clrf	27	;volatile
   411                           
   412                           ;main.c: 95: PR2 = 100;
   413  003C  3064               	movlw	100
   414  003D  1683               	bsf	3,5	;RP0=1, select bank1
   415  003E  1303               	bcf	3,6	;RP1=0, select bank1
   416  003F  0092               	movwf	18	;volatile
   417                           
   418                           ;main.c: 96: T2CON = 0x04;
   419  0040  3004               	movlw	4
   420  0041  1283               	bcf	3,5	;RP0=0, select bank0
   421  0042  1303               	bcf	3,6	;RP1=0, select bank0
   422  0043  0092               	movwf	18	;volatile
   423                           
   424                           ;main.c: 97: ADCON1 = 0x05;
   425  0044  3005               	movlw	5
   426  0045  1683               	bsf	3,5	;RP0=1, select bank1
   427  0046  1303               	bcf	3,6	;RP1=0, select bank1
   428  0047  009F               	movwf	31	;volatile
   429                           
   430                           ;main.c: 98: TRISC = 0xFD;
   431  0048  30FD               	movlw	253
   432  0049  0087               	movwf	7	;volatile
   433                           
   434                           ;main.c: 99: TRISB = 0xFF;
   435  004A  30FF               	movlw	255
   436  004B  0086               	movwf	6	;volatile
   437                           
   438                           ;main.c: 100: TRISA = 0xDF;
   439  004C  30DF               	movlw	223
   440  004D  0085               	movwf	5	;volatile
   441                           
   442                           ;main.c: 101: RCSTA = 0x90;
   443  004E  3090               	movlw	144
   444  004F  1283               	bcf	3,5	;RP0=0, select bank0
   445  0050  1303               	bcf	3,6	;RP1=0, select bank0
   446  0051  0098               	movwf	24	;volatile
   447                           
   448                           ;main.c: 102: TXSTA = 0x24;
   449  0052  3024               	movlw	36
   450  0053  1683               	bsf	3,5	;RP0=1, select bank1
   451  0054  1303               	bcf	3,6	;RP1=0, select bank1
   452  0055  0098               	movwf	24	;volatile
   453                           
   454                           ;main.c: 103: SPBRG = 12;
   455  0056  300C               	movlw	12
   456  0057  0099               	movwf	25	;volatile
   457                           
   458                           ;main.c: 107: if (PORTB & 0x02) {
   459  0058  1283               	bcf	3,5	;RP0=0, select bank0
   460  0059  1303               	bcf	3,6	;RP1=0, select bank0
   461  005A  1C86               	btfss	6,1	;volatile
   462  005B  28E7               	goto	l908
   463                           
   464                           ;main.c: 108: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   465  005C  3000               	movlw	0
   466  005D  120A  118A  2168  120A  118A  	fcall	_beep
   467  0062  3082               	movlw	130
   468  0063  1283               	bcf	3,5	;RP0=0, select bank0
   469  0064  1303               	bcf	3,6	;RP1=0, select bank0
   470  0065  00B7               	movwf	??_main+1
   471  0066  30DD               	movlw	221
   472  0067  00B6               	movwf	??_main
   473  0068                     u377:	
   474  0068  0BB6               	decfsz	??_main,f
   475  0069  2868               	goto	u377
   476  006A  0BB7               	decfsz	??_main+1,f
   477  006B  2868               	goto	u377
   478                           
   479                           ;main.c: 109: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   480  006C  3000               	movlw	0
   481  006D  120A  118A  2168  120A  118A  	fcall	_beep
   482  0072  3082               	movlw	130
   483  0073  1283               	bcf	3,5	;RP0=0, select bank0
   484  0074  1303               	bcf	3,6	;RP1=0, select bank0
   485  0075  00B7               	movwf	??_main+1
   486  0076  30DD               	movlw	221
   487  0077  00B6               	movwf	??_main
   488  0078                     u387:	
   489  0078  0BB6               	decfsz	??_main,f
   490  0079  2878               	goto	u387
   491  007A  0BB7               	decfsz	??_main+1,f
   492  007B  2878               	goto	u387
   493                           
   494                           ;main.c: 110: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   495  007C  3000               	movlw	0
   496  007D  120A  118A  2168  120A  118A  	fcall	_beep
   497  0082  3082               	movlw	130
   498  0083  1283               	bcf	3,5	;RP0=0, select bank0
   499  0084  1303               	bcf	3,6	;RP1=0, select bank0
   500  0085  00B7               	movwf	??_main+1
   501  0086  30DD               	movlw	221
   502  0087  00B6               	movwf	??_main
   503  0088                     u397:	
   504  0088  0BB6               	decfsz	??_main,f
   505  0089  2888               	goto	u397
   506  008A  0BB7               	decfsz	??_main+1,f
   507  008B  2888               	goto	u397
   508  008C  28CC               	goto	l880
   509  008D                     l886:	
   510                           ;main.c: 116: case '7': read_tmr1(); break;
   511                           
   512                           ;main.c: 115: switch (BUF[0]) {
   513                           
   514  008D  120A  118A  21F5  120A  118A  	fcall	_read_tmr1
   515  0092  28C9               	goto	l902
   516  0093                     l888:	
   517                           ;main.c: 117: case '5': write(BUF[1]); break;
   518                           
   519  0093  1283               	bcf	3,5	;RP0=0, select bank0
   520  0094  1303               	bcf	3,6	;RP1=0, select bank0
   521  0095  0821               	movf	_BUF+1,w
   522  0096  120A  118A  2210  120A  118A  	fcall	_write
   523  009B  28C9               	goto	l902
   524  009C                     l890:	
   525                           ;main.c: 118: case '1': write(BUF[1]); read_tmr1(); break;
   526                           
   527  009C  1283               	bcf	3,5	;RP0=0, select bank0
   528  009D  1303               	bcf	3,6	;RP1=0, select bank0
   529  009E  0821               	movf	_BUF+1,w
   530  009F  120A  118A  2210  120A  118A  	fcall	_write
   531  00A4  120A  118A  21F5  120A  118A  	fcall	_read_tmr1
   532  00A9  28C9               	goto	l902
   533  00AA                     l892:	
   534                           ;main.c: 119: case '2': write(0); beep(0); TMR1 = 0; break;
   535                           
   536  00AA  3000               	movlw	0
   537  00AB  120A  118A  2210  120A  118A  	fcall	_write
   538  00B0  3000               	movlw	0
   539  00B1  120A  118A  2168  120A  118A  	fcall	_beep
   540  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   541  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   542  00B8  018E               	clrf	14	;volatile
   543  00B9  018F               	clrf	15	;volatile
   544                           
   545                           ;main.c: 120: }
   546  00BA  28C9               	goto	l902
   547  00BB                     l900:	
   548  00BB  0820               	movf	_BUF,w
   549                           
   550                           ; Switch size 1, requested type "space"
   551                           ; Number of cases is 4, Range of values is 49 to 55
   552                           ; switch strategies available:
   553                           ; Name         Instructions Cycles
   554                           ; simple_byte           13     7 (average)
   555                           ; direct_byte           32    11 (fixed)
   556                           ; jumptable            263     9 (fixed)
   557                           ;	Chosen strategy is simple_byte
   558  00BC  3A31               	xorlw	49	; case 49
   559  00BD  1903               	skipnz
   560  00BE  289C               	goto	l890
   561  00BF  3A03               	xorlw	3	; case 50
   562  00C0  1903               	skipnz
   563  00C1  28AA               	goto	l892
   564  00C2  3A07               	xorlw	7	; case 53
   565  00C3  1903               	skipnz
   566  00C4  2893               	goto	l888
   567  00C5  3A02               	xorlw	2	; case 55
   568  00C6  1903               	skipnz
   569  00C7  288D               	goto	l886
   570  00C8  28C9               	goto	l902
   571  00C9                     l902:	
   572                           
   573                           ;main.c: 121: RC = 0;
   574  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   575  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   576  00CB  01C1               	clrf	_RC
   577  00CC                     l880:	
   578                           ;main.c: 111: while (1) {
   579                           
   580                           ;main.c: 122: }
   581                           
   582                           
   583                           ;main.c: 113: char x = rsget();
   584  00CC  120A  118A  2258  120A  118A  	fcall	_rsget
   585  00D1  1283               	bcf	3,5	;RP0=0, select bank0
   586  00D2  1303               	bcf	3,6	;RP1=0, select bank0
   587  00D3  00B6               	movwf	??_main
   588  00D4  0836               	movf	??_main,w
   589  00D5  00B8               	movwf	main@x
   590                           
   591                           ;main.c: 114: if (x == '\n') {
   592  00D6  300A               	movlw	10
   593  00D7  0638               	xorwf	main@x,w
   594  00D8  1903               	btfsc	3,2
   595  00D9  28BB               	goto	l900
   596                           
   597                           ;main.c: 123: else {
   598                           ;main.c: 124: BUF[RC] = x;
   599  00DA  0838               	movf	main@x,w
   600  00DB  00B6               	movwf	??_main
   601  00DC  0841               	movf	_RC,w
   602  00DD  3E20               	addlw	(low (_BUF| 0))& (0+255)
   603  00DE  0084               	movwf	4
   604  00DF  0836               	movf	??_main,w
   605  00E0  1383               	bcf	3,7	;select IRP bank0
   606  00E1  0080               	movwf	0
   607                           
   608                           ;main.c: 125: RC++;
   609  00E2  3001               	movlw	1
   610  00E3  00B6               	movwf	??_main
   611  00E4  0836               	movf	??_main,w
   612  00E5  07C1               	addwf	_RC,f
   613  00E6  28CC               	goto	l880
   614  00E7                     l908:	
   615                           ;main.c: 126: }
   616                           ;main.c: 127: }
   617                           ;main.c: 128: }
   618                           
   619                           
   620                           ;main.c: 130: else {
   621                           ;main.c: 131: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   622  00E7  3000               	movlw	0
   623  00E8  120A  118A  2168  120A  118A  	fcall	_beep
   624  00ED  3082               	movlw	130
   625  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   626  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   627  00F0  00B7               	movwf	??_main+1
   628  00F1  30DD               	movlw	221
   629  00F2  00B6               	movwf	??_main
   630  00F3                     u407:	
   631  00F3  0BB6               	decfsz	??_main,f
   632  00F4  28F3               	goto	u407
   633  00F5  0BB7               	decfsz	??_main+1,f
   634  00F6  28F3               	goto	u407
   635                           
   636                           ;main.c: 132: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   637  00F7  3001               	movlw	1
   638  00F8  120A  118A  2168  120A  118A  	fcall	_beep
   639  00FD  3082               	movlw	130
   640  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   641  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   642  0100  00B7               	movwf	??_main+1
   643  0101  30DD               	movlw	221
   644  0102  00B6               	movwf	??_main
   645  0103                     u417:	
   646  0103  0BB6               	decfsz	??_main,f
   647  0104  2903               	goto	u417
   648  0105  0BB7               	decfsz	??_main+1,f
   649  0106  2903               	goto	u417
   650  0107  2931               	goto	l914
   651  0108                     l920:	
   652                           
   653                           ;main.c: 138: RUN = 1;
   654  0108  3001               	movlw	1
   655  0109  00B6               	movwf	??_main
   656  010A  0836               	movf	??_main,w
   657  010B  00C0               	movwf	_RUN	;volatile
   658                           
   659                           ;main.c: 139: PWMZOH = msg;
   660  010C  0839               	movf	main@msg,w
   661  010D  00B6               	movwf	??_main
   662  010E  0836               	movf	??_main,w
   663  010F  00BF               	movwf	_PWMZOH
   664                           
   665                           ;main.c: 140: }
   666  0110  2931               	goto	l914
   667  0111                     l924:	
   668                           
   669                           ;main.c: 142: read_tmr1();
   670  0111  120A  118A  21F5  120A  118A  	fcall	_read_tmr1
   671                           
   672                           ;main.c: 143: write(msg);
   673  0116  1283               	bcf	3,5	;RP0=0, select bank0
   674  0117  1303               	bcf	3,6	;RP1=0, select bank0
   675  0118  0839               	movf	main@msg,w
   676  0119  120A  118A  2210  120A  118A  	fcall	_write
   677                           
   678                           ;main.c: 144: }
   679  011E  2931               	goto	l914
   680  011F                     l928:	
   681                           
   682                           ;main.c: 146: PWM = 0;
   683  011F  019B               	clrf	27
   684                           
   685                           ;main.c: 147: PWMZOH = 0;
   686  0120  01BF               	clrf	_PWMZOH
   687                           
   688                           ;main.c: 148: T1CON &= 0xFE;
   689  0121  30FE               	movlw	254
   690  0122  00B6               	movwf	??_main
   691  0123  0836               	movf	??_main,w
   692  0124  0590               	andwf	16,f	;volatile
   693                           
   694                           ;main.c: 149: INTCON &= 0xDF;
   695  0125  30DF               	movlw	223
   696  0126  00B6               	movwf	??_main
   697  0127  0836               	movf	??_main,w
   698  0128  058B               	andwf	11,f	;volatile
   699                           
   700                           ;main.c: 150: T1ZOH = 0;
   701  0129  01BB               	clrf	_T1ZOH	;volatile
   702  012A  01BC               	clrf	_T1ZOH+1	;volatile
   703                           
   704                           ;main.c: 151: beep(0);
   705  012B  3000               	movlw	0
   706  012C  120A  118A  2168  120A  118A  	fcall	_beep
   707  0131                     l914:	
   708                           ;main.c: 133: while (1) {
   709                           
   710                           ;main.c: 152: }
   711                           
   712                           
   713                           ;main.c: 135: char cmd = rsget();
   714  0131  120A  118A  2258  120A  118A  	fcall	_rsget
   715  0136  1283               	bcf	3,5	;RP0=0, select bank0
   716  0137  1303               	bcf	3,6	;RP1=0, select bank0
   717  0138  00B6               	movwf	??_main
   718  0139  0836               	movf	??_main,w
   719  013A  00BA               	movwf	main@cmd
   720                           
   721                           ;main.c: 136: char msg = rsget();
   722  013B  120A  118A  2258  120A  118A  	fcall	_rsget
   723  0140  1283               	bcf	3,5	;RP0=0, select bank0
   724  0141  1303               	bcf	3,6	;RP1=0, select bank0
   725  0142  00B6               	movwf	??_main
   726  0143  0836               	movf	??_main,w
   727  0144  00B9               	movwf	main@msg
   728                           
   729                           ;main.c: 137: if (cmd == 'x') {
   730  0145  3078               	movlw	120
   731  0146  063A               	xorwf	main@cmd,w
   732  0147  1903               	btfsc	3,2
   733  0148  2908               	goto	l920
   734                           
   735                           ;main.c: 141: else if (cmd == 'r') {
   736  0149  3072               	movlw	114
   737  014A  063A               	xorwf	main@cmd,w
   738  014B  1903               	btfsc	3,2
   739  014C  2911               	goto	l924
   740                           
   741                           ;main.c: 145: else if (cmd == 's') {
   742  014D  3073               	movlw	115
   743  014E  1283               	bcf	3,5	;RP0=0, select bank0
   744  014F  1303               	bcf	3,6	;RP1=0, select bank0
   745  0150  063A               	xorwf	main@cmd,w
   746  0151  1903               	btfsc	3,2
   747  0152  291F               	goto	l928
   748                           
   749                           ;main.c: 153: else if (cmd == 't') {
   750  0153  3074               	movlw	116
   751  0154  1283               	bcf	3,5	;RP0=0, select bank0
   752  0155  1303               	bcf	3,6	;RP1=0, select bank0
   753  0156  063A               	xorwf	main@cmd,w
   754  0157  1D03               	btfss	3,2
   755  0158  2931               	goto	l914
   756                           
   757                           ;main.c: 154: T0PS = msg;
   758  0159  0839               	movf	main@msg,w
   759  015A  00B6               	movwf	??_main
   760  015B  0836               	movf	??_main,w
   761  015C  00BD               	movwf	_T0PS
   762                           
   763                           ;main.c: 155: kT0 = T0PS;
   764  015D  083D               	movf	_T0PS,w
   765  015E  00B6               	movwf	??_main
   766  015F  0836               	movf	??_main,w
   767  0160  00BE               	movwf	_kT0
   768                           
   769                           ;main.c: 156: TMR1 = 0;
   770  0161  018E               	clrf	14	;volatile
   771  0162  018F               	clrf	15	;volatile
   772                           
   773                           ;main.c: 157: T1CON |= 0x01;
   774  0163  1410               	bsf	16,0	;volatile
   775                           
   776                           ;main.c: 158: TMR0 = 255;
   777  0164  30FF               	movlw	255
   778  0165  0081               	movwf	1	;volatile
   779  0166  168B               	bsf	11,5	;# 
   780  0167  2931               	goto	l914
   781  0168                     __end_of_main:	
   782                           ;main.c: 160: }
   783                           ;main.c: 161: }
   784                           ;main.c: 162: }
   785                           ;main.c: 163: return 0;
   786                           ;	Return value of _main is never used
   787                           
   788                           
   789                           	psect	text1
   790  0210                     __ptext1:	
   791 ;; *************** function _write *****************
   792 ;; Defined at:
   793 ;;		line 61 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;  duty            1    wreg     char 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  duty            1    6[COMMON] char 
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   807 ;;      Params:         0       0       0       0       0
   808 ;;      Locals:         1       0       0       0       0
   809 ;;      Temps:          0       0       0       0       0
   810 ;;      Totals:         1       0       0       0       0
   811 ;;Total ram usage:        1 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    2
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           
   822                           ;psect for function _write
   823  0210                     _write:	
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _write: [wreg+status,2]
   827                           ;write@duty stored from wreg
   828  0210  00F6               	movwf	write@duty
   829                           
   830                           ;main.c: 62: if (duty > 100) PWM = 100;
   831  0211  0876               	movf	write@duty,w
   832  0212  3A80               	xorlw	128
   833  0213  3E1B               	addlw	-229
   834  0214  1C03               	skipc
   835  0215  2A1B               	goto	l87
   836  0216  3064               	movlw	100
   837  0217  1283               	bcf	3,5	;RP0=0, select bank0
   838  0218  1303               	bcf	3,6	;RP1=0, select bank0
   839  0219  009B               	movwf	27
   840  021A  0008               	return
   841  021B                     l87:	
   842                           
   843                           ;main.c: 63: else if (duty < 0) PWM = 0;
   844  021B  1FF6               	btfss	write@duty,7
   845  021C  2A21               	goto	l818
   846  021D  1283               	bcf	3,5	;RP0=0, select bank0
   847  021E  1303               	bcf	3,6	;RP1=0, select bank0
   848  021F  019B               	clrf	27
   849  0220  0008               	return
   850  0221                     l818:	
   851                           
   852                           ;main.c: 64: else PWM = duty;
   853  0221  0876               	movf	write@duty,w
   854  0222  1283               	bcf	3,5	;RP0=0, select bank0
   855  0223  1303               	bcf	3,6	;RP1=0, select bank0
   856  0224  009B               	movwf	27
   857  0225  0008               	return
   858  0226                     __end_of_write:	
   859                           
   860                           	psect	text2
   861  0258                     __ptext2:	
   862 ;; *************** function _rsget *****************
   863 ;; Defined at:
   864 ;;		line 47 in file "main.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      unsigned char 
   871 ;; Registers used:
   872 ;;		wreg
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   878 ;;      Params:         0       0       0       0       0
   879 ;;      Locals:         0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0
   881 ;;      Totals:         0       0       0       0       0
   882 ;;Total ram usage:        0 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    2
   885 ;; This function calls:
   886 ;;		Nothing
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           
   893                           ;psect for function _rsget
   894  0258                     _rsget:	
   895  0258                     l78:	
   896                           ;main.c: 48: while (!RCIF) continue;
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _rsget: [wreg]
   900                           
   901  0258  1283               	bcf	3,5	;RP0=0, select bank0
   902  0259  1303               	bcf	3,6	;RP1=0, select bank0
   903  025A  1E8C               	btfss	12,5	;volatile
   904  025B  2A58               	goto	l78
   905                           
   906                           ;main.c: 49: return RCREG;
   907  025C  081A               	movf	26,w	;volatile
   908  025D  0008               	return
   909  025E                     __end_of_rsget:	
   910                           
   911                           	psect	text3
   912  01F5                     __ptext3:	
   913 ;; *************** function _read_tmr1 *****************
   914 ;; Defined at:
   915 ;;		line 54 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		wreg, status,2, status,0, pclath, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   929 ;;      Params:         0       0       0       0       0
   930 ;;      Locals:         0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0
   932 ;;      Totals:         0       0       0       0       0
   933 ;;Total ram usage:        0 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    3
   936 ;; This function calls:
   937 ;;		_rsend
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _read_tmr1
   945  01F5                     _read_tmr1:	
   946                           
   947                           ;main.c: 55: T1ZOH = TMR1;
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   951  01F5  1283               	bcf	3,5	;RP0=0, select bank0
   952  01F6  1303               	bcf	3,6	;RP1=0, select bank0
   953  01F7  080F               	movf	15,w	;volatile
   954  01F8  00BC               	movwf	_T1ZOH+1	;volatile
   955  01F9  080E               	movf	14,w	;volatile
   956  01FA  00BB               	movwf	_T1ZOH	;volatile
   957                           
   958                           ;main.c: 56: rsend(T1ZOH >> 8);
   959  01FB  083C               	movf	_T1ZOH+1,w	;volatile
   960  01FC  120A  118A  2248  120A  118A  	fcall	_rsend
   961                           
   962                           ;main.c: 57: rsend(T1ZOH);
   963  0201  1283               	bcf	3,5	;RP0=0, select bank0
   964  0202  1303               	bcf	3,6	;RP1=0, select bank0
   965  0203  083B               	movf	_T1ZOH,w	;volatile
   966  0204  120A  118A  2248   	fcall	_rsend
   967                           
   968                           ;main.c: 58: TMR1 -= T1ZOH;
   969  0207  1283               	bcf	3,5	;RP0=0, select bank0
   970  0208  1303               	bcf	3,6	;RP1=0, select bank0
   971  0209  083B               	movf	_T1ZOH,w	;volatile
   972  020A  028E               	subwf	14,f	;volatile
   973  020B  083C               	movf	_T1ZOH+1,w	;volatile
   974  020C  1C03               	skipc
   975  020D  038F               	decf	15,f	;volatile
   976  020E  028F               	subwf	15,f	;volatile
   977  020F  0008               	return
   978  0210                     __end_of_read_tmr1:	
   979                           
   980                           	psect	text4
   981  0248                     __ptext4:	
   982 ;; *************** function _rsend *****************
   983 ;; Defined at:
   984 ;;		line 42 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  msg             1    wreg     unsigned char 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  msg             1    6[COMMON] unsigned char 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   998 ;;      Params:         0       0       0       0       0
   999 ;;      Locals:         1       0       0       0       0
  1000 ;;      Temps:          0       0       0       0       0
  1001 ;;      Totals:         1       0       0       0       0
  1002 ;;Total ram usage:        1 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    2
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_read_tmr1
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           
  1013                           ;psect for function _rsend
  1014  0248                     _rsend:	
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _rsend: [wreg]
  1018                           ;rsend@msg stored from wreg
  1019  0248  00F6               	movwf	rsend@msg
  1020  0249                     l72:	
  1021                           ;main.c: 43: while (!TXIF) continue;
  1022                           
  1023  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1024  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1025  024B  1E0C               	btfss	12,4	;volatile
  1026  024C  2A49               	goto	l72
  1027                           
  1028                           ;main.c: 44: TXREG = msg;
  1029  024D  0876               	movf	rsend@msg,w
  1030  024E  0099               	movwf	25	;volatile
  1031  024F  0008               	return
  1032  0250                     __end_of_rsend:	
  1033                           
  1034                           	psect	text5
  1035  0168                     __ptext5:	
  1036 ;; *************** function _beep *****************
  1037 ;; Defined at:
  1038 ;;		line 31 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  dash            1    wreg     unsigned char 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;  dash            1    0[BANK0 ] unsigned char 
  1043 ;;  j               2    3[BANK0 ] int 
  1044 ;;  j               2    1[BANK0 ] int 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2, status,0, btemp+1
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1054 ;;      Params:         0       0       0       0       0
  1055 ;;      Locals:         0       5       0       0       0
  1056 ;;      Temps:          1       0       0       0       0
  1057 ;;      Totals:         1       5       0       0       0
  1058 ;;Total ram usage:        6 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    2
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           
  1069                           ;psect for function _beep
  1070  0168                     _beep:	
  1071                           
  1072                           ;incstack = 0
  1073                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1074                           ;beep@dash stored from wreg
  1075  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1076  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1077  016A  00B1               	movwf	beep@dash
  1078                           
  1079                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1080  016B  0831               	movf	beep@dash,w
  1081  016C  1D03               	btfss	3,2
  1082  016D  2996               	goto	l788
  1083  016E  01B2               	clrf	beep@j
  1084  016F  01B3               	clrf	beep@j+1
  1085  0170                     L1:	
  1086  0170  0833               	movf	beep@j+1,w
  1087  0171  3A80               	xorlw	128
  1088  0172  00FF               	movwf	127
  1089  0173  3080               	movlw	128
  1090  0174  027F               	subwf	127,w
  1091  0175  1D03               	skipz
  1092  0176  2979               	goto	u215
  1093  0177  3064               	movlw	100
  1094  0178  0232               	subwf	beep@j,w
  1095  0179                     u215:	
  1096  0179  1803               	btfsc	3,0
  1097  017A  0008               	return
  1098                           
  1099                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1100  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1101  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1102  017D  1685               	bsf	5,5
  1103  017E  30C7               	movlw	199
  1104  017F  00F6               	movwf	??_beep
  1105  0180                     u427:	
  1106  0180  2981               	nop2
  1107  0181  0BF6               	decfsz	??_beep,f
  1108  0182  2980               	goto	u427
  1109  0183  2984               	nop2
  1110  0184  2985               	nop2
  1111                           
  1112                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1113  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0187  1285               	bcf	5,5
  1116  0188  30A6               	movlw	166
  1117  0189  00F6               	movwf	??_beep
  1118  018A                     u437:	
  1119  018A  0BF6               	decfsz	??_beep,f
  1120  018B  298A               	goto	u437
  1121  018C  0000               	nop
  1122  018D  3001               	movlw	1
  1123  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1124  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0190  07B2               	addwf	beep@j,f
  1126  0191  1803               	skipnc
  1127  0192  0AB3               	incf	beep@j+1,f
  1128  0193  3000               	movlw	0
  1129  0194  07B3               	addwf	beep@j+1,f
  1130  0195  2970               	goto	L1
  1131  0196                     l788:	
  1132                           ;main.c: 35: }
  1133                           
  1134                           
  1135                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1136  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1137  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1138  0198  01B4               	clrf	beep@j_57
  1139  0199  01B5               	clrf	beep@j_57+1
  1140  019A                     L2:	
  1141  019A  0835               	movf	beep@j_57+1,w
  1142  019B  3A80               	xorlw	128
  1143  019C  00FF               	movwf	127
  1144  019D  3081               	movlw	129
  1145  019E  027F               	subwf	127,w
  1146  019F  1D03               	skipz
  1147  01A0  29A3               	goto	u235
  1148  01A1  30F4               	movlw	244
  1149  01A2  0234               	subwf	beep@j_57,w
  1150  01A3                     u235:	
  1151  01A3  1803               	btfsc	3,0
  1152  01A4  0008               	return
  1153                           
  1154                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1155  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1156  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1157  01A7  1685               	bsf	5,5
  1158  01A8  30C7               	movlw	199
  1159  01A9  00F6               	movwf	??_beep
  1160  01AA                     u447:	
  1161  01AA  29AB               	nop2
  1162  01AB  0BF6               	decfsz	??_beep,f
  1163  01AC  29AA               	goto	u447
  1164  01AD  29AE               	nop2
  1165  01AE  29AF               	nop2
  1166                           
  1167                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1168  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1169  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1170  01B1  1285               	bcf	5,5
  1171  01B2  30A6               	movlw	166
  1172  01B3  00F6               	movwf	??_beep
  1173  01B4                     u457:	
  1174  01B4  0BF6               	decfsz	??_beep,f
  1175  01B5  29B4               	goto	u457
  1176  01B6  0000               	nop
  1177  01B7  3001               	movlw	1
  1178  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1179  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1180  01BA  07B4               	addwf	beep@j_57,f
  1181  01BB  1803               	skipnc
  1182  01BC  0AB5               	incf	beep@j_57+1,f
  1183  01BD  3000               	movlw	0
  1184  01BE  07B5               	addwf	beep@j_57+1,f
  1185  01BF  299A               	goto	L2
  1186  01C0                     __end_of_beep:	
  1187                           
  1188                           	psect	text6
  1189  01C0                     __ptext6:	
  1190 ;; *************** function _sampling *****************
  1191 ;; Defined at:
  1192 ;;		line 71 in file "main.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0, pclath, cstack
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1206 ;;      Params:         0       0       0       0       0
  1207 ;;      Locals:         0       0       0       0       0
  1208 ;;      Temps:          5       0       0       0       0
  1209 ;;      Totals:         5       0       0       0       0
  1210 ;;Total ram usage:        5 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    1
  1213 ;; This function calls:
  1214 ;;		i1_rsend
  1215 ;; This function is called by:
  1216 ;;		Interrupt level 1
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           
  1221                           ;psect for function _sampling
  1222  01C0                     _sampling:	
  1223                           
  1224                           ;main.c: 72: kT0++;
  1225  01C0  3001               	movlw	1
  1226  01C1  00F1               	movwf	??_sampling
  1227  01C2  0871               	movf	??_sampling,w
  1228  01C3  07BE               	addwf	_kT0,f
  1229                           
  1230                           ;main.c: 73: if (kT0 > T0PS) {
  1231  01C4  083E               	movf	_kT0,w
  1232  01C5  023D               	subwf	_T0PS,w
  1233  01C6  1803               	skipnc
  1234  01C7  29E9               	goto	i1l842
  1235                           
  1236                           ;main.c: 74: kT0 = 0;
  1237  01C8  01BE               	clrf	_kT0
  1238                           
  1239                           ;main.c: 75: T1ZOH = TMR1;
  1240  01C9  080F               	movf	15,w	;volatile
  1241  01CA  00BC               	movwf	_T1ZOH+1	;volatile
  1242  01CB  080E               	movf	14,w	;volatile
  1243  01CC  00BB               	movwf	_T1ZOH	;volatile
  1244                           
  1245                           ;main.c: 76: PWM = PWMZOH;
  1246  01CD  083F               	movf	_PWMZOH,w
  1247  01CE  009B               	movwf	27
  1248                           
  1249                           ;main.c: 77: TMR1 -= T1ZOH;
  1250  01CF  083B               	movf	_T1ZOH,w	;volatile
  1251  01D0  028E               	subwf	14,f	;volatile
  1252  01D1  083C               	movf	_T1ZOH+1,w	;volatile
  1253  01D2  1C03               	skipc
  1254  01D3  038F               	decf	15,f	;volatile
  1255  01D4  028F               	subwf	15,f	;volatile
  1256                           
  1257                           ;main.c: 78: if (RUN) {
  1258  01D5  0840               	movf	_RUN,w	;volatile
  1259  01D6  1903               	btfsc	3,2
  1260  01D7  29E9               	goto	i1l842
  1261                           
  1262                           ;main.c: 79: rsend(T1ZOH);
  1263  01D8  083B               	movf	_T1ZOH,w	;volatile
  1264  01D9  120A  118A  2250  120A  118A  	fcall	i1_rsend
  1265                           
  1266                           ;main.c: 80: rsend(T1ZOH >> 8);
  1267  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1268  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1269  01E0  083C               	movf	_T1ZOH+1,w	;volatile
  1270  01E1  120A  118A  2250  120A  118A  	fcall	i1_rsend
  1271                           
  1272                           ;main.c: 81: RUN = 0;
  1273  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1274  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  1275  01E8  01C0               	clrf	_RUN	;volatile
  1276  01E9                     i1l842:	
  1277                           
  1278                           ;main.c: 82: }
  1279                           ;main.c: 83: }
  1280                           ;main.c: 84: TMR0IF = 0;
  1281  01E9  110B               	bcf	11,2	;volatile
  1282  01EA  0875               	movf	??_sampling+4,w
  1283  01EB  00FF               	movwf	127
  1284  01EC  0874               	movf	??_sampling+3,w
  1285  01ED  008A               	movwf	10
  1286  01EE  0873               	movf	??_sampling+2,w
  1287  01EF  0084               	movwf	4
  1288  01F0  0E72               	swapf	(??_sampling+1)^(0+-128),w
  1289  01F1  0083               	movwf	3
  1290  01F2  0EFE               	swapf	126,f
  1291  01F3  0E7E               	swapf	126,w
  1292  01F4  0009               	retfie
  1293  01F5                     __end_of_sampling:	
  1294                           
  1295                           	psect	intentry
  1296  0004                     __pintentry:	
  1297                           ;incstack = 0
  1298                           ; Regs used in _sampling: [wreg+status,2+status,0+pclath+cstack]
  1299                           
  1300  0004                     interrupt_function:	
  1301  007E                     saved_w	set	btemp
  1302  0004  00FE               	movwf	btemp
  1303  0005  0E03               	swapf	3,w
  1304  0006  00F2               	movwf	??_sampling+1
  1305  0007  0804               	movf	4,w
  1306  0008  00F3               	movwf	??_sampling+2
  1307  0009  080A               	movf	10,w
  1308  000A  00F4               	movwf	??_sampling+3
  1309  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1310  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1311  000D  087F               	movf	btemp+1,w
  1312  000E  00F5               	movwf	??_sampling+4
  1313  000F  120A  118A  29C0   	ljmp	_sampling
  1314                           
  1315                           	psect	text7
  1316  0250                     __ptext7:	
  1317 ;; *************** function i1_rsend *****************
  1318 ;; Defined at:
  1319 ;;		line 42 in file "main.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  msg             1    wreg     unsigned char 
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;  msg             1    0[COMMON] unsigned char 
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  1    wreg      void 
  1326 ;; Registers used:
  1327 ;;		wreg
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1333 ;;      Params:         0       0       0       0       0
  1334 ;;      Locals:         1       0       0       0       0
  1335 ;;      Temps:          0       0       0       0       0
  1336 ;;      Totals:         1       0       0       0       0
  1337 ;;Total ram usage:        1 bytes
  1338 ;; Hardware stack levels used:    1
  1339 ;; This function calls:
  1340 ;;		Nothing
  1341 ;; This function is called by:
  1342 ;;		_sampling
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           
  1347                           ;psect for function i1_rsend
  1348  0250                     i1_rsend:	
  1349                           
  1350                           ;incstack = 0
  1351                           ; Regs used in i1_rsend: [wreg]
  1352                           ;i1rsend@msg stored from wreg
  1353  0250  00F0               	movwf	i1rsend@msg
  1354  0251                     i1l72:	
  1355                           ;main.c: 43: while (!TXIF) continue;
  1356                           
  1357  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1358  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1359  0253  1E0C               	btfss	12,4	;volatile
  1360  0254  2A51               	goto	i1l72
  1361                           
  1362                           ;main.c: 44: TXREG = msg;
  1363  0255  0870               	movf	i1rsend@msg,w
  1364  0256  0099               	movwf	25	;volatile
  1365  0257  0008               	return
  1366  0258                     __end_ofi1_rsend:	
  1367  007E                     btemp	set	126	;btemp
  1368  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     10      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    _sampling->i1_rsend

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     403
                                              5 BANK0      5     5      0
                               _beep
                          _read_tmr1
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                1     1      0      22
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              6 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0      22
                                              1 COMMON     5     5      0
                            i1_rsend
 ---------------------------------------------------------------------------------
 (4) i1_rsend                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsget
   _write

 _sampling (ROOT)
   i1_rsend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      22       5       42.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       7       1       50.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      29      12        0.0%
ABS                  0      0      29       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Jan  3 18:08:19 2018

                      pc 0002              __CFG_CP$OFF 0000                       l72 0249  
                     l78 0258                       l87 021B                       _RC 0041  
                     fsr 0004                      l900 00BB                      l902 00C9  
                    l920 0108                      l818 0221                      l914 0131  
                    l924 0111                      l908 00E7                      l928 011F  
                    l880 00CC                      l890 009C                      l788 0196  
                    l892 00AA                      l886 008D                      l888 0093  
                    _BUF 0020                      _BUZ 002D                      u215 0179  
                    u235 01A3                      _PR2 0092                      u407 00F3  
                    u417 0103             __CFG_CPD$OFF 0000                      u427 0180  
                    u437 018A                      u447 01AA                      u457 01B4  
                    u377 0068                      u387 0078                      u397 0088  
                    _PWM 001B                      _RUN 0040                      _kT0 003E  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     _T0PS 003D                     _RCIF 0065  
                   i1l72 0251                     _TMR0 0001                     _TMR1 000E  
                   _TXIF 0064             __CFG_WRT$OFF 0000                     _beep 0168  
                   _main 002C                     btemp 007E                     start 0012  
        __end_ofi1_rsend 0258                    INTCON 000B                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 003B                    i1l842 01E9  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0032                    _rsend 0248                    _rsget 0258  
                  main@x 0038                    _write 0210           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
             i1rsend@msg 0070          __initialization 0015             __end_of_beep 01C0  
           __end_of_main 0168                   ??_beep 0076                   ??_main 0036  
                 _ADCON1 009F                   _CCPR1L 0015                   _CCPR2L 001B  
                 ?_rsend 0070                   ?_rsget 0070                   ?_write 0070  
                 _INTCON 000B                ??i1_rsend 0070                   _TMR0IF 005A  
                 _PWMZOH 003F           __CFG_PWRTE$OFF 0000         __end_of_sampling 01F5  
                 saved_w 007E  __end_of__initialization 0028           __pcstackCOMMON 0070  
           __pidataBANK0 0226            __end_of_rsend 0250            __end_of_rsget 025E  
          __end_of_write 0226                  ??_rsend 0076                  ??_rsget 0076  
                ??_write 0076               __pbssBANK0 003B       __size_of_read_tmr1 001B  
             __pmaintext 002C               __pintentry 0004                  _CCP1CON 0017  
                _CCP2CON 001D                  i1_rsend 0250                ?_sampling 0070  
                __ptext1 0210                  __ptext2 0258                  __ptext3 01F5  
                __ptext4 0248                  __ptext5 0168                  __ptext6 01C0  
                __ptext7 0250        __end_of_read_tmr1 0210                  main@cmd 003A  
                main@msg 0039     end_of_initialization 0028               ??_sampling 0071  
    start_initialization 0015               init_fetch0 0237              __pdataBANK0 0020  
              ___latbits 0002            __pcstackBANK0 0031                 ?i1_rsend 0070  
      __size_of_sampling 0035                _read_tmr1 01F5           __size_of_rsend 0008  
         __size_of_rsget 0006           __size_of_write 0016        interrupt_function 0004  
             ?_read_tmr1 0070         __size_ofi1_rsend 0008                 beep@j_57 0034  
               beep@dash 0031            __size_of_beep 0058            __size_of_main 013C  
               _sampling 01C0                 init_ram0 023B              ??_read_tmr1 0077  
               intlevel1 0000                write@duty 0076                 rsend@msg 0076  
             _OPTION_REG 0081  
