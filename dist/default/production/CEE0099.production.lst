

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Dec 20 02:23:20 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	12F683
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.43
    17                           ; Generated 25/07/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F683 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0013                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0018                     	;# 
    70  0019                     	;# 
    71  001A                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  008C                     	;# 
    77  008E                     	;# 
    78  008F                     	;# 
    79  0090                     	;# 
    80  0092                     	;# 
    81  0095                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0096                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93                           
    94                           	psect	idataBANK0
    95  06B2                     __pidataBANK0:	
    96                           
    97                           ;initializer for _BUF
    98  06B2  3420               	retlw	32
    99  06B3  3420               	retlw	32
   100  06B4  3420               	retlw	32
   101  06B5  3420               	retlw	32
   102  06B6  3420               	retlw	32
   103  06B7  3420               	retlw	32
   104  06B8  3420               	retlw	32
   105  06B9  3420               	retlw	32
   106  06BA  3420               	retlw	32
   107  06BB  3420               	retlw	32
   108  06BC  3420               	retlw	32
   109  06BD  3420               	retlw	32
   110  06BE  3420               	retlw	32
   111  06BF  3420               	retlw	32
   112  06C0  3420               	retlw	32
   113  06C1  3420               	retlw	32
   114  06C2  3400               	retlw	0
   115  000E                     _TMR1	set	14
   116  0013                     _PWM	set	19
   117  001F                     _ADCON0	set	31
   118  0019                     _CMCON0	set	25
   119  0015                     _CCP1CON	set	21
   120  0012                     _T2CON	set	18
   121  0010                     _T1CON	set	16
   122  0029                     _RX	set	41
   123  0028                     _TX	set	40
   124  0085                     _TRISIO	set	133
   125  0095                     _WPU	set	149
   126  009F                     _ANSEL	set	159
   127  0092                     _PR2	set	146
   128  0081                     _OPTION_REG	set	129
   129  008F                     _OSCCON	set	143
   130                           
   131                           ; #config settings
   132  0000                     
   133                           	psect	cinit
   134  07D8                     start_initialization:	
   135  07D8                     __initialization:	
   136                           
   137                           ; Initialize objects allocated to BANK0
   138  07D8  26B2               	fcall	__pidataBANK0	;fetch initializer
   139  07D9  00A0               	movwf	__pdataBANK0& (0+127)
   140  07DA  26B3               	fcall	__pidataBANK0+1	;fetch initializer
   141  07DB  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   142  07DC  26B4               	fcall	__pidataBANK0+2	;fetch initializer
   143  07DD  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   144  07DE  26B5               	fcall	__pidataBANK0+3	;fetch initializer
   145  07DF  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   146  07E0  26B6               	fcall	__pidataBANK0+4	;fetch initializer
   147  07E1  00A4               	movwf	(__pdataBANK0+4)& (0+127)
   148  07E2  26B7               	fcall	__pidataBANK0+5	;fetch initializer
   149  07E3  00A5               	movwf	(__pdataBANK0+5)& (0+127)
   150  07E4  26B8               	fcall	__pidataBANK0+6	;fetch initializer
   151  07E5  00A6               	movwf	(__pdataBANK0+6)& (0+127)
   152  07E6  26B9               	fcall	__pidataBANK0+7	;fetch initializer
   153  07E7  00A7               	movwf	(__pdataBANK0+7)& (0+127)
   154  07E8  26BA               	fcall	__pidataBANK0+8	;fetch initializer
   155  07E9  00A8               	movwf	(__pdataBANK0+8)& (0+127)
   156  07EA  26BB               	fcall	__pidataBANK0+9	;fetch initializer
   157  07EB  00A9               	movwf	(__pdataBANK0+9)& (0+127)
   158  07EC  26BC               	fcall	__pidataBANK0+10	;fetch initializer
   159  07ED  00AA               	movwf	(__pdataBANK0+10)& (0+127)
   160  07EE  26BD               	fcall	__pidataBANK0+11	;fetch initializer
   161  07EF  00AB               	movwf	(__pdataBANK0+11)& (0+127)
   162  07F0  26BE               	fcall	__pidataBANK0+12	;fetch initializer
   163  07F1  00AC               	movwf	(__pdataBANK0+12)& (0+127)
   164  07F2  26BF               	fcall	__pidataBANK0+13	;fetch initializer
   165  07F3  00AD               	movwf	(__pdataBANK0+13)& (0+127)
   166  07F4  26C0               	fcall	__pidataBANK0+14	;fetch initializer
   167  07F5  00AE               	movwf	(__pdataBANK0+14)& (0+127)
   168  07F6  26C1               	fcall	__pidataBANK0+15	;fetch initializer
   169  07F7  00AF               	movwf	(__pdataBANK0+15)& (0+127)
   170  07F8  26C2               	fcall	__pidataBANK0+16	;fetch initializer
   171  07F9  00B0               	movwf	(__pdataBANK0+16)& (0+127)
   172                           
   173                           ; Clear objects allocated to COMMON
   174  07FA  01F0               	clrf	__pbssCOMMON& (0+127)
   175  07FB  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   176  07FC  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   177  07FD  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   178  07FE                     end_of_initialization:	
   179                           ;End of C runtime variable initialization code
   180                           
   181  07FE                     __end_of__initialization:	
   182  07FE  0183               	clrf	3
   183  07FF  2F78               	ljmp	_main	;jump to C main() function
   184                           
   185                           	psect	bssCOMMON
   186  0070                     __pbssCOMMON:	
   187  0070                     _T1ZOH:	
   188  0070                     	ds	2
   189  0072                     _SENT:	
   190  0072                     	ds	1
   191  0073                     _RC:	
   192  0073                     	ds	1
   193                           
   194                           	psect	dataBANK0
   195  0020                     __pdataBANK0:	
   196  0020                     _BUF:	
   197  0020                     	ds	17
   198                           
   199                           	psect	cstackCOMMON
   200  0074                     __pcstackCOMMON:	
   201  0074                     ?_rsend:	
   202  0074                     ??_rsend:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0074                     ?_rsget:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0074                     ??_rsget:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0074                     ?_read_tmr1:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0074                     ?_write:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0074                     ??_write:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0074                     ?_main:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0074                     write@duty:	
   224                           ; 2 bytes @ 0x0
   225                           
   226                           
   227                           ; 1 bytes @ 0x0
   228  0074                     	ds	1
   229  0075                     rsend@msg:	
   230  0075                     rsget@msg:	
   231                           ; 1 bytes @ 0x1
   232                           
   233                           
   234                           ; 1 bytes @ 0x1
   235  0075                     	ds	1
   236  0076                     ??_read_tmr1:	
   237  0076                     ??_main:	
   238                           ; 1 bytes @ 0x2
   239                           
   240                           
   241                           ; 1 bytes @ 0x2
   242  0076                     	ds	1
   243  0077                     main@x:	
   244                           
   245                           ; 1 bytes @ 0x3
   246  0077                     	ds	1
   247                           
   248                           	psect	maintext
   249  0778                     __pmaintext:	
   250 ;;
   251 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   252 ;;
   253 ;; *************** function _main *****************
   254 ;; Defined at:
   255 ;;		line 101 in file "main.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;		None
   258 ;; Auto vars:     Size  Location     Type
   259 ;;  x               1    3[COMMON] unsigned char 
   260 ;; Return value:  Size  Location     Type
   261 ;;                  2   63[None  ] int 
   262 ;; Registers used:
   263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   264 ;; Tracked objects:
   265 ;;		On entry : B00/0
   266 ;;		On exit  : 0/0
   267 ;;		Unchanged: 0/0
   268 ;; Data sizes:     COMMON   BANK0   BANK1
   269 ;;      Params:         0       0       0
   270 ;;      Locals:         1       0       0
   271 ;;      Temps:          1       0       0
   272 ;;      Totals:         2       0       0
   273 ;;Total ram usage:        2 bytes
   274 ;; Hardware stack levels required when called:    2
   275 ;; This function calls:
   276 ;;		_read_tmr1
   277 ;;		_rsget
   278 ;;		_write
   279 ;; This function is called by:
   280 ;;		Startup code after reset
   281 ;; This function uses a non-reentrant model
   282 ;;
   283                           
   284                           
   285                           ;psect for function _main
   286  0778                     _main:	
   287                           
   288                           ;main.c: 102: OSCCON = 0x77;
   289                           
   290                           ;incstack = 0
   291                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   292  0778  3077               	movlw	119
   293  0779  1683               	bsf	3,5	;RP0=1, select bank1
   294  077A  008F               	movwf	15	;volatile
   295                           
   296                           ;main.c: 103: OPTION_REG = 0x07;
   297  077B  3007               	movlw	7
   298  077C  0081               	movwf	1	;volatile
   299                           
   300                           ;main.c: 104: T1CON = 0x03;
   301  077D  3003               	movlw	3
   302  077E  1283               	bcf	3,5	;RP0=0, select bank0
   303  077F  0090               	movwf	16	;volatile
   304                           
   305                           ;main.c: 105: PR2 = 100;
   306  0780  3064               	movlw	100
   307  0781  1683               	bsf	3,5	;RP0=1, select bank1
   308  0782  0092               	movwf	18	;volatile
   309                           
   310                           ;main.c: 106: T2CON = 0x04;
   311  0783  3004               	movlw	4
   312  0784  1283               	bcf	3,5	;RP0=0, select bank0
   313  0785  0092               	movwf	18	;volatile
   314                           
   315                           ;main.c: 107: CCP1CON = 0x0C;
   316  0786  300C               	movlw	12
   317  0787  0095               	movwf	21	;volatile
   318                           
   319                           ;main.c: 108: CMCON0 = 0x07;
   320  0788  3007               	movlw	7
   321  0789  0099               	movwf	25	;volatile
   322                           
   323                           ;main.c: 109: ANSEL = 0x00;
   324  078A  1683               	bsf	3,5	;RP0=1, select bank1
   325  078B  019F               	clrf	31	;volatile
   326                           
   327                           ;main.c: 110: ADCON0 = 0x00;
   328  078C  1283               	bcf	3,5	;RP0=0, select bank0
   329  078D  019F               	clrf	31	;volatile
   330                           
   331                           ;main.c: 111: WPU = 0x22;
   332  078E  3022               	movlw	34
   333  078F  1683               	bsf	3,5	;RP0=1, select bank1
   334  0790  0095               	movwf	21	;volatile
   335                           
   336                           ;main.c: 112: TRISIO = 0x2A;
   337  0791  302A               	movlw	42
   338  0792  0085               	movwf	5	;volatile
   339                           
   340                           ;main.c: 113: TMR1 = 0;
   341  0793  1283               	bcf	3,5	;RP0=0, select bank0
   342  0794  018E               	clrf	14	;volatile
   343  0795  018F               	clrf	15	;volatile
   344                           
   345                           ;main.c: 114: PWM = 0;
   346  0796  0193               	clrf	19
   347                           
   348                           ;main.c: 115: TX = 1;
   349  0797  1405               	bsf	5,0
   350  0798  2FC3               	goto	l575
   351  0799                     l581:	
   352                           ;main.c: 120: case 'r': case '7': read_tmr1(); break;
   353                           
   354                           ;main.c: 119: switch (BUF[0]) {
   355                           
   356  0799  26A1               	fcall	_read_tmr1
   357  079A  2FC2               	goto	l593
   358  079B                     l583:	
   359                           ;main.c: 121: case 'w': case '5': write(BUF[1]); break;
   360                           
   361  079B  1283               	bcf	3,5	;RP0=0, select bank0
   362  079C  0821               	movf	_BUF+1,w
   363  079D  26C3               	fcall	_write
   364  079E  2FC2               	goto	l593
   365  079F                     l585:	
   366                           ;main.c: 122: case 'x': case '1': write(BUF[1]); read_tmr1(); break;
   367                           
   368  079F  1283               	bcf	3,5	;RP0=0, select bank0
   369  07A0  0821               	movf	_BUF+1,w
   370  07A1  26C3               	fcall	_write
   371  07A2  26A1               	fcall	_read_tmr1
   372  07A3  2FC2               	goto	l593
   373  07A4                     l587:	
   374                           ;main.c: 123: case 's': case '2': write(0); break;
   375                           
   376  07A4  3000               	movlw	0
   377  07A5  26C3               	fcall	_write
   378                           
   379                           ;main.c: 124: }
   380  07A6  2FC2               	goto	l593
   381  07A7                     l591:	
   382  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   383  07A8  0820               	movf	_BUF,w
   384                           
   385                           ; Switch size 1, requested type "space"
   386                           ; Number of cases is 8, Range of values is 49 to 120
   387                           ; switch strategies available:
   388                           ; Name         Instructions Cycles
   389                           ; simple_byte           25    13 (average)
   390                           ; direct_byte           81     9 (fixed)
   391                           ; jumptable            263     9 (fixed)
   392                           ;	Chosen strategy is simple_byte
   393  07A9  3A31               	xorlw	49	; case 49
   394  07AA  1903               	skipnz
   395  07AB  2F9F               	goto	l585
   396  07AC  3A03               	xorlw	3	; case 50
   397  07AD  1903               	skipnz
   398  07AE  2FA4               	goto	l587
   399  07AF  3A07               	xorlw	7	; case 53
   400  07B0  1903               	skipnz
   401  07B1  2F9B               	goto	l583
   402  07B2  3A02               	xorlw	2	; case 55
   403  07B3  1903               	skipnz
   404  07B4  2F99               	goto	l581
   405  07B5  3A45               	xorlw	69	; case 114
   406  07B6  1903               	skipnz
   407  07B7  2F99               	goto	l581
   408  07B8  3A01               	xorlw	1	; case 115
   409  07B9  1903               	skipnz
   410  07BA  2FA4               	goto	l587
   411  07BB  3A04               	xorlw	4	; case 119
   412  07BC  1903               	skipnz
   413  07BD  2F9B               	goto	l583
   414  07BE  3A0F               	xorlw	15	; case 120
   415  07BF  1903               	skipnz
   416  07C0  2F9F               	goto	l585
   417  07C1  2FC2               	goto	l593
   418  07C2                     l593:	
   419                           
   420                           ;main.c: 125: RC = 0;
   421  07C2  01F3               	clrf	_RC
   422  07C3                     l575:	
   423                           ;main.c: 116: while (1) {
   424                           
   425                           ;main.c: 126: }
   426                           
   427                           
   428                           ;main.c: 117: char x = rsget();
   429  07C3  2726               	fcall	_rsget
   430  07C4  00F6               	movwf	??_main
   431  07C5  0876               	movf	??_main,w
   432  07C6  00F7               	movwf	main@x
   433                           
   434                           ;main.c: 118: if (x == '\n') {
   435  07C7  300A               	movlw	10
   436  07C8  0677               	xorwf	main@x,w
   437  07C9  1903               	btfsc	3,2
   438  07CA  2FA7               	goto	l591
   439                           
   440                           ;main.c: 127: else {
   441                           ;main.c: 128: BUF[RC] = x;
   442  07CB  0877               	movf	main@x,w
   443  07CC  00F6               	movwf	??_main
   444  07CD  0873               	movf	_RC,w
   445  07CE  3E20               	addlw	(low (_BUF| 0))& (0+255)
   446  07CF  0084               	movwf	4
   447  07D0  0876               	movf	??_main,w
   448  07D1  1383               	bcf	3,7	;select IRP bank0
   449  07D2  0080               	movwf	0
   450                           
   451                           ;main.c: 129: RC++;
   452  07D3  3001               	movlw	1
   453  07D4  00F6               	movwf	??_main
   454  07D5  0876               	movf	??_main,w
   455  07D6  07F3               	addwf	_RC,f
   456  07D7  2FC3               	goto	l575
   457  07D8                     __end_of_main:	
   458                           ;main.c: 130: }
   459                           ;main.c: 131: }
   460                           ;main.c: 132: return 0;
   461                           ;	Return value of _main is never used
   462                           
   463                           
   464                           	psect	text1
   465  06C3                     __ptext1:	
   466 ;; *************** function _write *****************
   467 ;; Defined at:
   468 ;;		line 94 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;  duty            1    wreg     char 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  duty            1    0[COMMON] char 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, status,2
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1
   482 ;;      Params:         0       0       0
   483 ;;      Locals:         1       0       0
   484 ;;      Temps:          0       0       0
   485 ;;      Totals:         1       0       0
   486 ;;Total ram usage:        1 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; This function calls:
   489 ;;		Nothing
   490 ;; This function is called by:
   491 ;;		_main
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           
   496                           ;psect for function _write
   497  06C3                     _write:	
   498                           
   499                           ;incstack = 0
   500                           ; Regs used in _write: [wreg+status,2]
   501                           ;write@duty stored from wreg
   502  06C3  00F4               	movwf	write@duty
   503                           
   504                           ;main.c: 95: if (duty > 100) PWM = 100;
   505  06C4  0874               	movf	write@duty,w
   506  06C5  3A80               	xorlw	128
   507  06C6  3E1B               	addlw	-229
   508  06C7  1C03               	skipc
   509  06C8  2ECD               	goto	l55
   510  06C9  3064               	movlw	100
   511  06CA  1283               	bcf	3,5	;RP0=0, select bank0
   512  06CB  0093               	movwf	19
   513  06CC  0008               	return
   514  06CD                     l55:	
   515                           
   516                           ;main.c: 96: else if (duty < 0) PWM = 0;
   517  06CD  1FF4               	btfss	write@duty,7
   518  06CE  2ED2               	goto	l561
   519  06CF  1283               	bcf	3,5	;RP0=0, select bank0
   520  06D0  0193               	clrf	19
   521  06D1  0008               	return
   522  06D2                     l561:	
   523                           
   524                           ;main.c: 97: else PWM = duty;
   525  06D2  0874               	movf	write@duty,w
   526  06D3  1283               	bcf	3,5	;RP0=0, select bank0
   527  06D4  0093               	movwf	19
   528  06D5  0008               	return
   529  06D6                     __end_of_write:	
   530                           
   531                           	psect	text2
   532  0726                     __ptext2:	
   533 ;; *************** function _rsget *****************
   534 ;; Defined at:
   535 ;;		line 67 in file "main.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  msg             1    1[COMMON] unsigned char 
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      unsigned char 
   542 ;; Registers used:
   543 ;;		wreg, status,2
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMMON   BANK0   BANK1
   549 ;;      Params:         0       0       0
   550 ;;      Locals:         1       0       0
   551 ;;      Temps:          1       0       0
   552 ;;      Totals:         2       0       0
   553 ;;Total ram usage:        2 bytes
   554 ;; Hardware stack levels used:    1
   555 ;; This function calls:
   556 ;;		Nothing
   557 ;; This function is called by:
   558 ;;		_main
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           
   563                           ;psect for function _rsget
   564  0726                     _rsget:	
   565                           
   566                           ;main.c: 68: unsigned char msg = 0;
   567                           
   568                           ;incstack = 0
   569                           ; Regs used in _rsget: [wreg+status,2]
   570  0726  01F5               	clrf	rsget@msg
   571  0727                     l46:	
   572                           ;main.c: 69: while (RX==1) continue;
   573                           
   574  0727  1283               	bcf	3,5	;RP0=0, select bank0
   575  0728  1885               	btfsc	5,1
   576  0729  2F27               	goto	l46
   577                           
   578                           ;main.c: 70: _delay(104 - 1);
   579  072A  3022               	movlw	34
   580  072B  00F4               	movwf	??_rsget
   581  072C                     u57:	
   582  072C  0BF4               	decfsz	??_rsget,f
   583  072D  2F2C               	goto	u57
   584                           
   585                           ;main.c: 71: _delay(104 >> 1);
   586  072E  3011               	movlw	17
   587  072F  00F4               	movwf	??_rsget
   588  0730                     u67:	
   589  0730  0BF4               	decfsz	??_rsget,f
   590  0731  2F30               	goto	u67
   591  0732  0CF5               	rrf	rsget@msg,f	;# 
   592  0733  1885               	btfsc	5,1	;# 
   593  0734  17F5               	bsf	rsget@msg,7	;# 
   594  0735  3021               	movlw	33
   595  0736  00F4               	movwf	??_rsget
   596  0737                     u77:	
   597  0737  0BF4               	decfsz	??_rsget,f
   598  0738  2F37               	goto	u77
   599  0739  0000               	nop
   600  073A  0CF5               	rrf	rsget@msg,f	;# 
   601  073B  1885               	btfsc	5,1	;# 
   602  073C  17F5               	bsf	rsget@msg,7	;# 
   603  073D  3021               	movlw	33
   604  073E  00F4               	movwf	??_rsget
   605  073F                     u87:	
   606  073F  0BF4               	decfsz	??_rsget,f
   607  0740  2F3F               	goto	u87
   608  0741  0000               	nop
   609  0742  0CF5               	rrf	rsget@msg,f	;# 
   610  0743  1885               	btfsc	5,1	;# 
   611  0744  17F5               	bsf	rsget@msg,7	;# 
   612  0745  3021               	movlw	33
   613  0746  00F4               	movwf	??_rsget
   614  0747                     u97:	
   615  0747  0BF4               	decfsz	??_rsget,f
   616  0748  2F47               	goto	u97
   617  0749  0000               	nop
   618  074A  0CF5               	rrf	rsget@msg,f	;# 
   619  074B  1885               	btfsc	5,1	;# 
   620  074C  17F5               	bsf	rsget@msg,7	;# 
   621  074D  3021               	movlw	33
   622  074E  00F4               	movwf	??_rsget
   623  074F                     u107:	
   624  074F  0BF4               	decfsz	??_rsget,f
   625  0750  2F4F               	goto	u107
   626  0751  0000               	nop
   627  0752  0CF5               	rrf	rsget@msg,f	;# 
   628  0753  1885               	btfsc	5,1	;# 
   629  0754  17F5               	bsf	rsget@msg,7	;# 
   630  0755  3021               	movlw	33
   631  0756  00F4               	movwf	??_rsget
   632  0757                     u117:	
   633  0757  0BF4               	decfsz	??_rsget,f
   634  0758  2F57               	goto	u117
   635  0759  0000               	nop
   636  075A  0CF5               	rrf	rsget@msg,f	;# 
   637  075B  1885               	btfsc	5,1	;# 
   638  075C  17F5               	bsf	rsget@msg,7	;# 
   639  075D  3021               	movlw	33
   640  075E  00F4               	movwf	??_rsget
   641  075F                     u127:	
   642  075F  0BF4               	decfsz	??_rsget,f
   643  0760  2F5F               	goto	u127
   644  0761  0000               	nop
   645  0762  0CF5               	rrf	rsget@msg,f	;# 
   646  0763  1885               	btfsc	5,1	;# 
   647  0764  17F5               	bsf	rsget@msg,7	;# 
   648  0765  3021               	movlw	33
   649  0766  00F4               	movwf	??_rsget
   650  0767                     u137:	
   651  0767  0BF4               	decfsz	??_rsget,f
   652  0768  2F67               	goto	u137
   653  0769  0000               	nop
   654  076A  0CF5               	rrf	rsget@msg,f	;# 
   655  076B  1885               	btfsc	5,1	;# 
   656  076C  17F5               	bsf	rsget@msg,7	;# 
   657  076D  3021               	movlw	33
   658  076E  00F4               	movwf	??_rsget
   659  076F                     u147:	
   660  076F  0BF4               	decfsz	??_rsget,f
   661  0770  2F6F               	goto	u147
   662  0771  0000               	nop
   663                           
   664                           ;main.c: 80: _delay(104 >> 1);
   665  0772  3011               	movlw	17
   666  0773  00F4               	movwf	??_rsget
   667  0774                     u157:	
   668  0774  0BF4               	decfsz	??_rsget,f
   669  0775  2F74               	goto	u157
   670                           
   671                           ;main.c: 81: return msg;
   672  0776  0875               	movf	rsget@msg,w
   673  0777  0008               	return
   674  0778                     __end_of_rsget:	
   675                           
   676                           	psect	text3
   677  06A1                     __ptext3:	
   678 ;; *************** function _read_tmr1 *****************
   679 ;; Defined at:
   680 ;;		line 86 in file "main.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, status,2, status,0, pclath, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMMON   BANK0   BANK1
   694 ;;      Params:         0       0       0
   695 ;;      Locals:         0       0       0
   696 ;;      Temps:          0       0       0
   697 ;;      Totals:         0       0       0
   698 ;;Total ram usage:        0 bytes
   699 ;; Hardware stack levels used:    1
   700 ;; Hardware stack levels required when called:    1
   701 ;; This function calls:
   702 ;;		_rsend
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           
   709                           ;psect for function _read_tmr1
   710  06A1                     _read_tmr1:	
   711                           
   712                           ;main.c: 87: T1ZOH = TMR1;
   713                           
   714                           ;incstack = 0
   715                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   716  06A1  1283               	bcf	3,5	;RP0=0, select bank0
   717  06A2  080F               	movf	15,w	;volatile
   718  06A3  00F1               	movwf	_T1ZOH+1
   719  06A4  080E               	movf	14,w	;volatile
   720  06A5  00F0               	movwf	_T1ZOH
   721                           
   722                           ;main.c: 88: rsend(T1ZOH >> 8);
   723  06A6  0871               	movf	_T1ZOH+1,w
   724  06A7  26D6               	fcall	_rsend
   725                           
   726                           ;main.c: 89: rsend(T1ZOH);
   727  06A8  0870               	movf	_T1ZOH,w
   728  06A9  26D6               	fcall	_rsend
   729                           
   730                           ;main.c: 90: TMR1 -= T1ZOH;
   731  06AA  0870               	movf	_T1ZOH,w
   732  06AB  1283               	bcf	3,5	;RP0=0, select bank0
   733  06AC  028E               	subwf	14,f	;volatile
   734  06AD  0871               	movf	_T1ZOH+1,w
   735  06AE  1C03               	skipc
   736  06AF  038F               	decf	15,f	;volatile
   737  06B0  028F               	subwf	15,f	;volatile
   738  06B1  0008               	return
   739  06B2                     __end_of_read_tmr1:	
   740                           ;main.c: 91: return;
   741                           
   742                           
   743                           	psect	text4
   744  06D6                     __ptext4:	
   745 ;; *************** function _rsend *****************
   746 ;; Defined at:
   747 ;;		line 48 in file "main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  msg             1    wreg     unsigned char 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  msg             1    1[COMMON] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1
   761 ;;      Params:         0       0       0
   762 ;;      Locals:         1       0       0
   763 ;;      Temps:          1       0       0
   764 ;;      Totals:         2       0       0
   765 ;;Total ram usage:        2 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; This function calls:
   768 ;;		Nothing
   769 ;; This function is called by:
   770 ;;		_read_tmr1
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           
   775                           ;psect for function _rsend
   776  06D6                     _rsend:	
   777                           
   778                           ;incstack = 0
   779                           ; Regs used in _rsend: [wreg]
   780                           ;rsend@msg stored from wreg
   781  06D6  00F5               	movwf	rsend@msg
   782                           
   783                           ;main.c: 54: SENT = msg;
   784  06D7  0875               	movf	rsend@msg,w
   785  06D8  00F4               	movwf	??_rsend
   786  06D9  0874               	movf	??_rsend,w
   787  06DA  00F2               	movwf	_SENT
   788  06DB  1005               	bcf	5,0	;# 
   789  06DC  3022               	movlw	34
   790  06DD  00F4               	movwf	??_rsend
   791  06DE                     u167:	
   792  06DE  0BF4               	decfsz	??_rsend,f
   793  06DF  2EDE               	goto	u167
   794  06E0  0CF5               	rrf	rsend@msg,f	;# 
   795  06E1  0803               	movf	3,w	;# 
   796  06E2  0085               	movwf	5	;# 
   797  06E3  3021               	movlw	33
   798  06E4  00F4               	movwf	??_rsend
   799  06E5                     u177:	
   800  06E5  0BF4               	decfsz	??_rsend,f
   801  06E6  2EE5               	goto	u177
   802  06E7  0000               	nop
   803  06E8  0CF5               	rrf	rsend@msg,f	;# 
   804  06E9  0803               	movf	3,w	;# 
   805  06EA  0085               	movwf	5	;# 
   806  06EB  3021               	movlw	33
   807  06EC  00F4               	movwf	??_rsend
   808  06ED                     u187:	
   809  06ED  0BF4               	decfsz	??_rsend,f
   810  06EE  2EED               	goto	u187
   811  06EF  0000               	nop
   812  06F0  0CF5               	rrf	rsend@msg,f	;# 
   813  06F1  0803               	movf	3,w	;# 
   814  06F2  0085               	movwf	5	;# 
   815  06F3  3021               	movlw	33
   816  06F4  00F4               	movwf	??_rsend
   817  06F5                     u197:	
   818  06F5  0BF4               	decfsz	??_rsend,f
   819  06F6  2EF5               	goto	u197
   820  06F7  0000               	nop
   821  06F8  0CF5               	rrf	rsend@msg,f	;# 
   822  06F9  0803               	movf	3,w	;# 
   823  06FA  0085               	movwf	5	;# 
   824  06FB  3021               	movlw	33
   825  06FC  00F4               	movwf	??_rsend
   826  06FD                     u207:	
   827  06FD  0BF4               	decfsz	??_rsend,f
   828  06FE  2EFD               	goto	u207
   829  06FF  0000               	nop
   830  0700  0CF5               	rrf	rsend@msg,f	;# 
   831  0701  0803               	movf	3,w	;# 
   832  0702  0085               	movwf	5	;# 
   833  0703  3021               	movlw	33
   834  0704  00F4               	movwf	??_rsend
   835  0705                     u217:	
   836  0705  0BF4               	decfsz	??_rsend,f
   837  0706  2F05               	goto	u217
   838  0707  0000               	nop
   839  0708  0CF5               	rrf	rsend@msg,f	;# 
   840  0709  0803               	movf	3,w	;# 
   841  070A  0085               	movwf	5	;# 
   842  070B  3021               	movlw	33
   843  070C  00F4               	movwf	??_rsend
   844  070D                     u227:	
   845  070D  0BF4               	decfsz	??_rsend,f
   846  070E  2F0D               	goto	u227
   847  070F  0000               	nop
   848  0710  0CF5               	rrf	rsend@msg,f	;# 
   849  0711  0803               	movf	3,w	;# 
   850  0712  0085               	movwf	5	;# 
   851  0713  3021               	movlw	33
   852  0714  00F4               	movwf	??_rsend
   853  0715                     u237:	
   854  0715  0BF4               	decfsz	??_rsend,f
   855  0716  2F15               	goto	u237
   856  0717  0000               	nop
   857  0718  0CF5               	rrf	rsend@msg,f	;# 
   858  0719  0803               	movf	3,w	;# 
   859  071A  0085               	movwf	5	;# 
   860  071B  3021               	movlw	33
   861  071C  00F4               	movwf	??_rsend
   862  071D                     u247:	
   863  071D  0BF4               	decfsz	??_rsend,f
   864  071E  2F1D               	goto	u247
   865  071F  0000               	nop
   866  0720  1405               	bsf	5,0	;# 
   867  0721  3022               	movlw	34
   868  0722  00F4               	movwf	??_rsend
   869  0723                     u257:	
   870  0723  0BF4               	decfsz	??_rsend,f
   871  0724  2F23               	goto	u257
   872  0725  0008               	return
   873  0726                     __end_of_rsend:	
   874  007E                     btemp	set	126	;btemp
   875  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       8
    BANK0            80      0      17
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_rsget
    _read_tmr1->_rsend

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     105
                                              2 COMMON     2     2      0
                          _read_tmr1
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      15
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _read_tmr1
     _rsend
   _rsget
   _write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      11       4       21.3%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      19       8        0.0%
ABS                  0      0      19       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Dec 20 02:23:20 2017

            __CFG_CP$OFF 0000                       l46 0727                       l55 06CD  
                     _RC 0073                       u57 072C                       u67 0730  
                     _RX 0029                       u77 0737                       u87 073F  
                     _TX 0028                       u97 0747                      GPIO 0005  
                    l561 06D2                      l581 0799                      l583 079B  
                    l591 07A7                      l575 07C3                      l585 079F  
                    l593 07C2                      l587 07A4                      _BUF 0020  
                    u107 074F                      u117 0757                      u207 06FD  
                    u127 075F                      u217 0705                      u137 0767  
                    u227 070D                      u147 076F                      u237 0715  
                    u157 0774                      _PR2 0092                      u247 071D  
                    u167 06DE                      u257 0723                      u177 06E5  
           __CFG_CPD$OFF 0000                      u187 06ED                      u197 06F5  
                    _PWM 0013                      _WPU 0095                      fsr0 0004  
                    indf 0000                     _SENT 0072                     _TMR1 000E  
                   _main 0778                     btemp 007E                     start 0000  
          __CFG_IESO$OFF 0000                    STATUS 0003                    ?_main 0074  
          __CFG_WDTE$OFF 0000                    _ANSEL 009F                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 0070           __CFG_FCMEN$OFF 0000  
                  _rsend 06D6                    _rsget 0726                    main@x 0077  
                  _write 06C3           __CFG_BOREN$OFF 0000                    status 0003  
                  wtemp0 007E           __CFG_MCLRE$OFF 0000          __initialization 07D8  
           __end_of_main 07D8                   ??_main 0076                   _ADCON0 001F  
                 _CMCON0 0019                   ?_rsend 0074                   ?_rsget 0074  
                 ?_write 0074                   _OSCCON 008F                   _TRISIO 0085  
         __CFG_PWRTE$OFF 0000  __end_of__initialization 07FE           __pcstackCOMMON 0074  
           __pidataBANK0 06B2            __end_of_rsend 0726            __end_of_rsget 0778  
          __end_of_write 06D6                  ??_rsend 0074                  ??_rsget 0074  
                ??_write 0074       __size_of_read_tmr1 0011               __pmaintext 0778  
                _CCP1CON 0015                  __ptext1 06C3                  __ptext2 0726  
                __ptext3 06A1                  __ptext4 06D6        __end_of_read_tmr1 06B2  
   end_of_initialization 07FE      start_initialization 07D8              __pdataBANK0 0020  
            __pbssCOMMON 0070                ___latbits 0000                _read_tmr1 06A1  
         __size_of_rsend 0050           __size_of_rsget 0052           __size_of_write 0013  
             ?_read_tmr1 0074            __size_of_main 0060              ??_read_tmr1 0076  
              write@duty 0074                 rsend@msg 0075                 rsget@msg 0075  
             _OPTION_REG 0081       __CFG_FOSC$INTOSCIO 0000  
