

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Dec 28 20:59:32 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.43
    19                           ; Generated 25/07/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112                           
   113                           	psect	idataBANK0
   114  06D4                     __pidataBANK0:	
   115                           
   116                           ;initializer for _BUF
   117  06D4  3420               	retlw	32
   118  06D5  3420               	retlw	32
   119  06D6  3420               	retlw	32
   120  06D7  3420               	retlw	32
   121  06D8  3420               	retlw	32
   122  06D9  3420               	retlw	32
   123  06DA  3420               	retlw	32
   124  06DB  3420               	retlw	32
   125  06DC  3420               	retlw	32
   126  06DD  3420               	retlw	32
   127  06DE  3420               	retlw	32
   128  06DF  3420               	retlw	32
   129  06E0  3420               	retlw	32
   130  06E1  3420               	retlw	32
   131  06E2  3420               	retlw	32
   132  06E3  3420               	retlw	32
   133  06E4  3400               	retlw	0
   134  000E                     _TMR1	set	14
   135  001B                     _PWM	set	27
   136  0018                     _RCSTA	set	24
   137  0012                     _T2CON	set	18
   138  001B                     _CCPR2L	set	27
   139  001D                     _CCP2CON	set	29
   140  0015                     _CCPR1L	set	21
   141  0017                     _CCP1CON	set	23
   142  0010                     _T1CON	set	16
   143  001A                     _RCREG	set	26
   144  0019                     _TXREG	set	25
   145  002D                     _BUZ	set	45
   146  0065                     _RCIF	set	101
   147  0064                     _TXIF	set	100
   148  0099                     _SPBRG	set	153
   149  0098                     _TXSTA	set	152
   150  0085                     _TRISA	set	133
   151  0087                     _TRISC	set	135
   152  009F                     _ADCON1	set	159
   153  0092                     _PR2	set	146
   154                           
   155                           ; #config settings
   156  0000                     
   157                           	psect	cinit
   158  07ED                     start_initialization:	
   159  07ED                     __initialization:	
   160                           
   161                           ; Initialize objects allocated to BANK0
   162  07ED  1383               	bcf	3,7	;select IRP bank0
   163  07EE  3031               	movlw	low (__pdataBANK0+17)
   164  07EF  00FD               	movwf	btemp+-1
   165  07F0  3006               	movlw	high __pidataBANK0
   166  07F1  00FE               	movwf	btemp
   167  07F2  30D4               	movlw	low __pidataBANK0
   168  07F3  00FF               	movwf	btemp+1
   169  07F4  3020               	movlw	low __pdataBANK0
   170  07F5  0084               	movwf	4
   171  07F6  120A  118A  26C7   	fcall	init_ram0
   172                           
   173                           ; Clear objects allocated to COMMON
   174  07F9  01F6               	clrf	__pbssCOMMON& (0+127)
   175  07FA  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   176  07FB  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   177  07FC                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  07FC                     __end_of__initialization:	
   181  07FC  0183               	clrf	3
   182  07FD  120A  118A  2F3A   	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	bssCOMMON
   185  0076                     __pbssCOMMON:	
   186  0076                     _T1ZOH:	
   187  0076                     	ds	2
   188  0078                     _RC:	
   189  0078                     	ds	1
   190                           
   191                           	psect	dataBANK0
   192  0020                     __pdataBANK0:	
   193  0020                     _BUF:	
   194  0020                     	ds	17
   195                           
   196                           	psect	inittext
   197  06C3                     init_fetch0:	
   198                           ;	Called with low address in FSR and high address in W
   199                           
   200  06C3  087E               	movf	126,w
   201  06C4  008A               	movwf	10
   202  06C5  087F               	movf	127,w
   203  06C6  0082               	movwf	2
   204  06C7                     init_ram0:	
   205                           ;Called with:
   206                           ;	high address of idata address in btemp 
   207                           ;	low address of idata address in btemp+1 
   208                           ;	low address of data in FSR
   209                           ;	high address + 1 of data in btemp-1
   210                           
   211  06C7  26C3  120A  118A   	fcall	init_fetch0
   212  06CA  0080               	movwf	0
   213  06CB  0A84               	incf	4,f
   214  06CC  0804               	movf	4,w
   215  06CD  067D               	xorwf	125,w
   216  06CE  1903               	btfsc	3,2
   217  06CF  3400               	retlw	0
   218  06D0  0AFF               	incf	127,f
   219  06D1  1903               	btfsc	3,2
   220  06D2  0AFE               	incf	126,f
   221  06D3  2EC7               	goto	init_ram0
   222                           
   223                           	psect	cstackCOMMON
   224  0070                     __pcstackCOMMON:	
   225  0070                     ?_beep:	
   226  0070                     ??_beep:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_rsend:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ??_rsend:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_rsget:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ??_rsget:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_read_tmr1:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_write:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ??_write:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_main:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     rsend@msg:	
   254                           ; 2 bytes @ 0x0
   255                           
   256  0070                     write@duty:	
   257                           ; 1 bytes @ 0x0
   258                           
   259                           
   260                           ; 1 bytes @ 0x0
   261  0070                     	ds	1
   262  0071                     ??_read_tmr1:	
   263  0071                     beep@j:	
   264                           ; 1 bytes @ 0x1
   265                           
   266                           
   267                           ; 2 bytes @ 0x1
   268  0071                     	ds	2
   269  0073                     ??_main:	
   270                           
   271                           ; 1 bytes @ 0x3
   272  0073                     	ds	2
   273  0075                     main@x:	
   274                           
   275                           ; 1 bytes @ 0x5
   276  0075                     	ds	1
   277                           
   278                           	psect	maintext
   279  073A                     __pmaintext:	
   280 ;;
   281 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   282 ;;
   283 ;; *************** function _main *****************
   284 ;; Defined at:
   285 ;;		line 64 in file "main.c"
   286 ;; Parameters:    Size  Location     Type
   287 ;;		None
   288 ;; Auto vars:     Size  Location     Type
   289 ;;  x               1    5[COMMON] unsigned char 
   290 ;; Return value:  Size  Location     Type
   291 ;;                  2   79[None  ] int 
   292 ;; Registers used:
   293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   294 ;; Tracked objects:
   295 ;;		On entry : B00/0
   296 ;;		On exit  : 0/0
   297 ;;		Unchanged: 0/0
   298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   299 ;;      Params:         0       0       0       0       0
   300 ;;      Locals:         1       0       0       0       0
   301 ;;      Temps:          2       0       0       0       0
   302 ;;      Totals:         3       0       0       0       0
   303 ;;Total ram usage:        3 bytes
   304 ;; Hardware stack levels required when called:    2
   305 ;; This function calls:
   306 ;;		_beep
   307 ;;		_read_tmr1
   308 ;;		_rsget
   309 ;;		_write
   310 ;; This function is called by:
   311 ;;		Startup code after reset
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           
   316                           ;psect for function _main
   317  073A                     _main:	
   318                           
   319                           ;main.c: 65: T1CON = 0x03;
   320                           
   321                           ;incstack = 0
   322                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   323  073A  3003               	movlw	3
   324  073B  1283               	bcf	3,5	;RP0=0, select bank0
   325  073C  1303               	bcf	3,6	;RP1=0, select bank0
   326  073D  0090               	movwf	16	;volatile
   327                           
   328                           ;main.c: 66: CCP1CON = 0x0F;
   329  073E  300F               	movlw	15
   330  073F  0097               	movwf	23	;volatile
   331                           
   332                           ;main.c: 67: CCPR1L = 0;
   333  0740  0195               	clrf	21	;volatile
   334                           
   335                           ;main.c: 68: CCP2CON = 0x0F;
   336  0741  300F               	movlw	15
   337  0742  009D               	movwf	29	;volatile
   338                           
   339                           ;main.c: 69: CCPR2L = 0;
   340  0743  019B               	clrf	27	;volatile
   341                           
   342                           ;main.c: 70: PR2 = 100;
   343  0744  3064               	movlw	100
   344  0745  1683               	bsf	3,5	;RP0=1, select bank1
   345  0746  1303               	bcf	3,6	;RP1=0, select bank1
   346  0747  0092               	movwf	18	;volatile
   347                           
   348                           ;main.c: 71: T2CON = 0x04;
   349  0748  3004               	movlw	4
   350  0749  1283               	bcf	3,5	;RP0=0, select bank0
   351  074A  1303               	bcf	3,6	;RP1=0, select bank0
   352  074B  0092               	movwf	18	;volatile
   353                           
   354                           ;main.c: 72: ADCON1 = 0x07;
   355  074C  3007               	movlw	7
   356  074D  1683               	bsf	3,5	;RP0=1, select bank1
   357  074E  1303               	bcf	3,6	;RP1=0, select bank1
   358  074F  009F               	movwf	31	;volatile
   359                           
   360                           ;main.c: 73: TRISC = 0xFD;
   361  0750  30FD               	movlw	253
   362  0751  0087               	movwf	7	;volatile
   363                           
   364                           ;main.c: 74: TRISA = 0xDF;
   365  0752  30DF               	movlw	223
   366  0753  0085               	movwf	5	;volatile
   367                           
   368                           ;main.c: 75: RCSTA = 0x90;
   369  0754  3090               	movlw	144
   370  0755  1283               	bcf	3,5	;RP0=0, select bank0
   371  0756  1303               	bcf	3,6	;RP1=0, select bank0
   372  0757  0098               	movwf	24	;volatile
   373                           
   374                           ;main.c: 76: TXSTA = 0x24;
   375  0758  3024               	movlw	36
   376  0759  1683               	bsf	3,5	;RP0=1, select bank1
   377  075A  1303               	bcf	3,6	;RP1=0, select bank1
   378  075B  0098               	movwf	24	;volatile
   379                           
   380                           ;main.c: 77: SPBRG = 12;
   381  075C  300C               	movlw	12
   382  075D  0099               	movwf	25	;volatile
   383                           
   384                           ;main.c: 78: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   385  075E  120A  118A  2714  120A  118A  	fcall	_beep
   386  0763  3082               	movlw	130
   387  0764  00F4               	movwf	??_main+1
   388  0765  30DD               	movlw	221
   389  0766  00F3               	movwf	??_main
   390  0767                     u87:	
   391  0767  0BF3               	decfsz	??_main,f
   392  0768  2F67               	goto	u87
   393  0769  0BF4               	decfsz	??_main+1,f
   394  076A  2F67               	goto	u87
   395  076B  2F6C               	nop2
   396                           
   397                           ;main.c: 79: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   398  076C  120A  118A  2714  120A  118A  	fcall	_beep
   399  0771  3082               	movlw	130
   400  0772  00F4               	movwf	??_main+1
   401  0773  30DD               	movlw	221
   402  0774  00F3               	movwf	??_main
   403  0775                     u97:	
   404  0775  0BF3               	decfsz	??_main,f
   405  0776  2F75               	goto	u97
   406  0777  0BF4               	decfsz	??_main+1,f
   407  0778  2F75               	goto	u97
   408  0779  2F7A               	nop2
   409                           
   410                           ;main.c: 80: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   411  077A  120A  118A  2714  120A  118A  	fcall	_beep
   412  077F  3082               	movlw	130
   413  0780  00F4               	movwf	??_main+1
   414  0781  30DD               	movlw	221
   415  0782  00F3               	movwf	??_main
   416  0783                     u107:	
   417  0783  0BF3               	decfsz	??_main,f
   418  0784  2F83               	goto	u107
   419  0785  0BF4               	decfsz	??_main+1,f
   420  0786  2F83               	goto	u107
   421  0787  2F88               	nop2
   422  0788  2FD4               	goto	l627
   423  0789                     l633:	
   424                           ;main.c: 86: case 'r': case '7': read_tmr1(); break;
   425                           
   426                           ;main.c: 85: switch (BUF[0]) {
   427                           
   428  0789  120A  118A  26FB  120A  118A  	fcall	_read_tmr1
   429  078E  2FD3               	goto	l649
   430  078F                     l635:	
   431                           ;main.c: 87: case 'w': case '5': write(BUF[1]); break;
   432                           
   433  078F  1283               	bcf	3,5	;RP0=0, select bank0
   434  0790  1303               	bcf	3,6	;RP1=0, select bank0
   435  0791  0821               	movf	_BUF+1,w
   436  0792  120A  118A  26E5  120A  118A  	fcall	_write
   437  0797  2FD3               	goto	l649
   438  0798                     l637:	
   439                           ;main.c: 88: case 'x': case '1': write(BUF[1]); read_tmr1(); break;
   440                           
   441  0798  1283               	bcf	3,5	;RP0=0, select bank0
   442  0799  1303               	bcf	3,6	;RP1=0, select bank0
   443  079A  0821               	movf	_BUF+1,w
   444  079B  120A  118A  26E5  120A  118A  	fcall	_write
   445  07A0  120A  118A  26FB  120A  118A  	fcall	_read_tmr1
   446  07A5  2FD3               	goto	l649
   447  07A6                     l639:	
   448                           ;main.c: 89: case 's': case '2': write(0); beep(); beep(); break;
   449                           
   450  07A6  3000               	movlw	0
   451  07A7  120A  118A  26E5  120A  118A  	fcall	_write
   452  07AC  120A  118A  2714  120A  118A  	fcall	_beep
   453  07B1  120A  118A  2714  120A  118A  	fcall	_beep
   454                           
   455                           ;main.c: 90: }
   456  07B6  2FD3               	goto	l649
   457  07B7                     l647:	
   458  07B7  1283               	bcf	3,5	;RP0=0, select bank0
   459  07B8  1303               	bcf	3,6	;RP1=0, select bank0
   460  07B9  0820               	movf	_BUF,w
   461                           
   462                           ; Switch size 1, requested type "space"
   463                           ; Number of cases is 8, Range of values is 49 to 120
   464                           ; switch strategies available:
   465                           ; Name         Instructions Cycles
   466                           ; simple_byte           25    13 (average)
   467                           ; direct_byte          227    11 (fixed)
   468                           ; jumptable            263     9 (fixed)
   469                           ;	Chosen strategy is simple_byte
   470  07BA  3A31               	xorlw	49	; case 49
   471  07BB  1903               	skipnz
   472  07BC  2F98               	goto	l637
   473  07BD  3A03               	xorlw	3	; case 50
   474  07BE  1903               	skipnz
   475  07BF  2FA6               	goto	l639
   476  07C0  3A07               	xorlw	7	; case 53
   477  07C1  1903               	skipnz
   478  07C2  2F8F               	goto	l635
   479  07C3  3A02               	xorlw	2	; case 55
   480  07C4  1903               	skipnz
   481  07C5  2F89               	goto	l633
   482  07C6  3A45               	xorlw	69	; case 114
   483  07C7  1903               	skipnz
   484  07C8  2F89               	goto	l633
   485  07C9  3A01               	xorlw	1	; case 115
   486  07CA  1903               	skipnz
   487  07CB  2FA6               	goto	l639
   488  07CC  3A04               	xorlw	4	; case 119
   489  07CD  1903               	skipnz
   490  07CE  2F8F               	goto	l635
   491  07CF  3A0F               	xorlw	15	; case 120
   492  07D0  1903               	skipnz
   493  07D1  2F98               	goto	l637
   494  07D2  2FD3               	goto	l649
   495  07D3                     l649:	
   496                           
   497                           ;main.c: 91: RC = 0;
   498  07D3  01F8               	clrf	_RC
   499  07D4                     l627:	
   500                           ;main.c: 81: while (1) {
   501                           
   502                           ;main.c: 92: }
   503                           
   504                           
   505                           ;main.c: 83: char x = rsget();
   506  07D4  120A  118A  26B5  120A  118A  	fcall	_rsget
   507  07D9  00F3               	movwf	??_main
   508  07DA  0873               	movf	??_main,w
   509  07DB  00F5               	movwf	main@x
   510                           
   511                           ;main.c: 84: if (x == '\n') {
   512  07DC  300A               	movlw	10
   513  07DD  0675               	xorwf	main@x,w
   514  07DE  1903               	btfsc	3,2
   515  07DF  2FB7               	goto	l647
   516                           
   517                           ;main.c: 93: else {
   518                           ;main.c: 94: BUF[RC] = x;
   519  07E0  0875               	movf	main@x,w
   520  07E1  00F3               	movwf	??_main
   521  07E2  0878               	movf	_RC,w
   522  07E3  3E20               	addlw	(low (_BUF| 0))& (0+255)
   523  07E4  0084               	movwf	4
   524  07E5  0873               	movf	??_main,w
   525  07E6  1383               	bcf	3,7	;select IRP bank0
   526  07E7  0080               	movwf	0
   527                           
   528                           ;main.c: 95: RC++;
   529  07E8  3001               	movlw	1
   530  07E9  00F3               	movwf	??_main
   531  07EA  0873               	movf	??_main,w
   532  07EB  07F8               	addwf	_RC,f
   533  07EC  2FD4               	goto	l627
   534  07ED                     __end_of_main:	
   535                           ;main.c: 96: }
   536                           ;main.c: 97: }
   537                           ;main.c: 98: return 0;
   538                           ;	Return value of _main is never used
   539                           
   540                           
   541                           	psect	text1
   542  06E5                     __ptext1:	
   543 ;; *************** function _write *****************
   544 ;; Defined at:
   545 ;;		line 58 in file "main.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;  duty            1    wreg     char 
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  duty            1    0[COMMON] char 
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		wreg, status,2
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   559 ;;      Params:         0       0       0       0       0
   560 ;;      Locals:         1       0       0       0       0
   561 ;;      Temps:          0       0       0       0       0
   562 ;;      Totals:         1       0       0       0       0
   563 ;;Total ram usage:        1 bytes
   564 ;; Hardware stack levels used:    1
   565 ;; This function calls:
   566 ;;		Nothing
   567 ;; This function is called by:
   568 ;;		_main
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           
   573                           ;psect for function _write
   574  06E5                     _write:	
   575                           
   576                           ;incstack = 0
   577                           ; Regs used in _write: [wreg+status,2]
   578                           ;write@duty stored from wreg
   579  06E5  00F0               	movwf	write@duty
   580                           
   581                           ;main.c: 59: if (duty > 100) PWM = 100;
   582  06E6  0870               	movf	write@duty,w
   583  06E7  3A80               	xorlw	128
   584  06E8  3E1B               	addlw	-229
   585  06E9  1C03               	skipc
   586  06EA  2EF0               	goto	l71
   587  06EB  3064               	movlw	100
   588  06EC  1283               	bcf	3,5	;RP0=0, select bank0
   589  06ED  1303               	bcf	3,6	;RP1=0, select bank0
   590  06EE  009B               	movwf	27
   591  06EF  0008               	return
   592  06F0                     l71:	
   593                           
   594                           ;main.c: 60: else if (duty < 0) PWM = 0;
   595  06F0  1FF0               	btfss	write@duty,7
   596  06F1  2EF6               	goto	l591
   597  06F2  1283               	bcf	3,5	;RP0=0, select bank0
   598  06F3  1303               	bcf	3,6	;RP1=0, select bank0
   599  06F4  019B               	clrf	27
   600  06F5  0008               	return
   601  06F6                     l591:	
   602                           
   603                           ;main.c: 61: else PWM = duty;
   604  06F6  0870               	movf	write@duty,w
   605  06F7  1283               	bcf	3,5	;RP0=0, select bank0
   606  06F8  1303               	bcf	3,6	;RP1=0, select bank0
   607  06F9  009B               	movwf	27
   608  06FA  0008               	return
   609  06FB                     __end_of_write:	
   610                           
   611                           	psect	text2
   612  06B5                     __ptext2:	
   613 ;; *************** function _rsget *****************
   614 ;; Defined at:
   615 ;;		line 43 in file "main.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      unsigned char 
   622 ;; Registers used:
   623 ;;		wreg
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   629 ;;      Params:         0       0       0       0       0
   630 ;;      Locals:         0       0       0       0       0
   631 ;;      Temps:          0       0       0       0       0
   632 ;;      Totals:         0       0       0       0       0
   633 ;;Total ram usage:        0 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _rsget
   644  06B5                     _rsget:	
   645  06B5                     l62:	
   646                           ;main.c: 44: while (!RCIF) continue;
   647                           
   648                           ;incstack = 0
   649                           ; Regs used in _rsget: [wreg]
   650                           
   651  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   652  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   653  06B7  1E8C               	btfss	12,5	;volatile
   654  06B8  2EB5               	goto	l62
   655                           
   656                           ;main.c: 45: return RCREG;
   657  06B9  081A               	movf	26,w	;volatile
   658  06BA  0008               	return
   659  06BB                     __end_of_rsget:	
   660                           
   661                           	psect	text3
   662  06FB                     __ptext3:	
   663 ;; *************** function _read_tmr1 *****************
   664 ;; Defined at:
   665 ;;		line 50 in file "main.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, pclath, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   679 ;;      Params:         0       0       0       0       0
   680 ;;      Locals:         0       0       0       0       0
   681 ;;      Temps:          0       0       0       0       0
   682 ;;      Totals:         0       0       0       0       0
   683 ;;Total ram usage:        0 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    1
   686 ;; This function calls:
   687 ;;		_rsend
   688 ;; This function is called by:
   689 ;;		_main
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           
   694                           ;psect for function _read_tmr1
   695  06FB                     _read_tmr1:	
   696                           
   697                           ;main.c: 51: T1ZOH = TMR1;
   698                           
   699                           ;incstack = 0
   700                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   701  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   702  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   703  06FD  080F               	movf	15,w	;volatile
   704  06FE  00F7               	movwf	_T1ZOH+1
   705  06FF  080E               	movf	14,w	;volatile
   706  0700  00F6               	movwf	_T1ZOH
   707                           
   708                           ;main.c: 52: rsend(T1ZOH >> 8);
   709  0701  0877               	movf	_T1ZOH+1,w
   710  0702  120A  118A  26BB  120A  118A  	fcall	_rsend
   711                           
   712                           ;main.c: 53: rsend(T1ZOH);
   713  0707  0876               	movf	_T1ZOH,w
   714  0708  120A  118A  26BB   	fcall	_rsend
   715                           
   716                           ;main.c: 54: TMR1 -= T1ZOH;
   717  070B  0876               	movf	_T1ZOH,w
   718  070C  1283               	bcf	3,5	;RP0=0, select bank0
   719  070D  1303               	bcf	3,6	;RP1=0, select bank0
   720  070E  028E               	subwf	14,f	;volatile
   721  070F  0877               	movf	_T1ZOH+1,w
   722  0710  1C03               	skipc
   723  0711  038F               	decf	15,f	;volatile
   724  0712  028F               	subwf	15,f	;volatile
   725  0713  0008               	return
   726  0714                     __end_of_read_tmr1:	
   727                           ;main.c: 55: return;
   728                           
   729                           
   730                           	psect	text4
   731  06BB                     __ptext4:	
   732 ;; *************** function _rsend *****************
   733 ;; Defined at:
   734 ;;		line 38 in file "main.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  msg             1    wreg     unsigned char 
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  msg             1    0[COMMON] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   748 ;;      Params:         0       0       0       0       0
   749 ;;      Locals:         1       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0
   751 ;;      Totals:         1       0       0       0       0
   752 ;;Total ram usage:        1 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; This function calls:
   755 ;;		Nothing
   756 ;; This function is called by:
   757 ;;		_read_tmr1
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           
   762                           ;psect for function _rsend
   763  06BB                     _rsend:	
   764                           
   765                           ;incstack = 0
   766                           ; Regs used in _rsend: [wreg]
   767                           ;rsend@msg stored from wreg
   768  06BB  00F0               	movwf	rsend@msg
   769  06BC                     l56:	
   770                           ;main.c: 39: while (!TXIF) continue;
   771                           
   772  06BC  1283               	bcf	3,5	;RP0=0, select bank0
   773  06BD  1303               	bcf	3,6	;RP1=0, select bank0
   774  06BE  1E0C               	btfss	12,4	;volatile
   775  06BF  2EBC               	goto	l56
   776                           
   777                           ;main.c: 40: TXREG = msg;
   778  06C0  0870               	movf	rsend@msg,w
   779  06C1  0099               	movwf	25	;volatile
   780  06C2  0008               	return
   781  06C3                     __end_of_rsend:	
   782                           
   783                           	psect	text5
   784  0714                     __ptext5:	
   785 ;; *************** function _beep *****************
   786 ;; Defined at:
   787 ;;		line 31 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  j               2    1[COMMON] int 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, status,2, btemp+1
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   801 ;;      Params:         0       0       0       0       0
   802 ;;      Locals:         2       0       0       0       0
   803 ;;      Temps:          1       0       0       0       0
   804 ;;      Totals:         3       0       0       0       0
   805 ;;Total ram usage:        3 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_main
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _beep
   816  0714                     _beep:	
   817                           
   818                           ;main.c: 32: for (int j = 0; j < 100; ++j) {
   819                           
   820                           ;incstack = 0
   821                           ; Regs used in _beep: [wreg+status,2+btemp+1]
   822  0714  01F1               	clrf	beep@j
   823  0715  01F2               	clrf	beep@j+1
   824  0716                     L1:	
   825  0716  0872               	movf	beep@j+1,w
   826  0717  3A80               	xorlw	128
   827  0718  00FF               	movwf	127
   828  0719  3080               	movlw	128
   829  071A  027F               	subwf	127,w
   830  071B  1D03               	skipz
   831  071C  2F1F               	goto	u25
   832  071D  3064               	movlw	100
   833  071E  0271               	subwf	beep@j,w
   834  071F                     u25:	
   835  071F  1803               	btfsc	3,0
   836  0720  0008               	return
   837                           
   838                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
   839  0721  1283               	bcf	3,5	;RP0=0, select bank0
   840  0722  1303               	bcf	3,6	;RP1=0, select bank0
   841  0723  1685               	bsf	5,5
   842  0724  30C7               	movlw	199
   843  0725  00F0               	movwf	??_beep
   844  0726                     u117:	
   845  0726  2F27               	nop2
   846  0727  0BF0               	decfsz	??_beep,f
   847  0728  2F26               	goto	u117
   848  0729  2F2A               	nop2
   849  072A  2F2B               	nop2
   850                           
   851                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
   852  072B  1283               	bcf	3,5	;RP0=0, select bank0
   853  072C  1303               	bcf	3,6	;RP1=0, select bank0
   854  072D  1285               	bcf	5,5
   855  072E  30A6               	movlw	166
   856  072F  00F0               	movwf	??_beep
   857  0730                     u127:	
   858  0730  0BF0               	decfsz	??_beep,f
   859  0731  2F30               	goto	u127
   860  0732  0000               	nop
   861  0733  3001               	movlw	1
   862  0734  07F1               	addwf	beep@j,f
   863  0735  1803               	skipnc
   864  0736  0AF2               	incf	beep@j+1,f
   865  0737  3000               	movlw	0
   866  0738  07F2               	addwf	beep@j+1,f
   867  0739  2F16               	goto	L1
   868  073A                     __end_of_beep:	
   869  007E                     btemp	set	126	;btemp
   870  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80      0      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _read_tmr1->_rsend

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     120
                                              3 COMMON     3     3      0
                               _beep
                          _read_tmr1
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      15
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsget
   _write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      11       5       21.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A      12        0.0%
ABS                  0      0      1A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Dec 28 20:59:32 2017

                      pc 0002              __CFG_CP$OFF 0000                       l62 06B5  
                     l71 06F0                       l56 06BC                       _RC 0078  
                     u25 071F                       u87 0767                       u97 0775  
                     fsr 0004                      l633 0789                      l635 078F  
                    l627 07D4                      l637 0798                      l591 06F6  
                    l639 07A6                      l647 07B7                      l649 07D3  
                    _BUF 0020                      u107 0783                      _BUZ 002D  
                    u117 0726                      u127 0730                      _PR2 0092  
           __CFG_CPD$OFF 0000                      _PWM 001B                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   _RCIF 0065                     _TMR1 000E                     _TXIF 0064  
           __CFG_WRT$OFF 0000                     _beep 0714                     _main 073A  
                   btemp 007E                     start 0000                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 0076                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _TRISA 0085  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0071                    _rsend 06BB                    _rsget 06B5  
                  main@x 0075                    _write 06E5           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07ED             __end_of_beep 073A             __end_of_main 07ED  
                 ??_beep 0070                   ??_main 0073                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070           __CFG_PWRTE$OFF 0000  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 06D4  
          __end_of_rsend 06C3            __end_of_rsget 06BB            __end_of_write 06FB  
                ??_rsend 0070                  ??_rsget 0070                  ??_write 0070  
     __size_of_read_tmr1 0019               __pmaintext 073A                  _CCP1CON 0017  
                _CCP2CON 001D                  __ptext1 06E5                  __ptext2 06B5  
                __ptext3 06FB                  __ptext4 06BB                  __ptext5 0714  
      __end_of_read_tmr1 0714     end_of_initialization 07FC      start_initialization 07ED  
             init_fetch0 06C3              __pdataBANK0 0020              __pbssCOMMON 0076  
              ___latbits 0002                _read_tmr1 06FB           __size_of_rsend 0008  
         __size_of_rsget 0006           __size_of_write 0016               ?_read_tmr1 0070  
          __size_of_beep 0026            __size_of_main 00B3                 init_ram0 06C7  
            ??_read_tmr1 0071                write@duty 0070                 rsend@msg 0070  
