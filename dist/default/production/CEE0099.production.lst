

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Dec 15 01:27:13 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.43
    32                           ; Generated 25/07/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001044                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _ERR
    71  001044  01                 	db	1
    72                           
    73                           ;initializer for _BUF
    74  001045  20                 	db	32
    75  001046  20                 	db	32
    76  001047  20                 	db	32
    77  001048  20                 	db	32
    78  001049  20                 	db	32
    79  00104A  20                 	db	32
    80  00104B  20                 	db	32
    81  00104C  20                 	db	32
    82  00104D  20                 	db	32
    83  00104E  20                 	db	32
    84  00104F  20                 	db	32
    85  001050  20                 	db	32
    86  001051  20                 	db	32
    87  001052  20                 	db	32
    88  001053  20                 	db	32
    89  001054  20                 	db	32
    90  001055  00                 	db	0
    91                           
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	opt stack 0
    95  000800  00                 	db	0
    96  000801                     _dpowers:
    97                           	opt stack 0
    98  000801  0001               	dw	1
    99  000803  000A               	dw	10
   100  000805  0064               	dw	100
   101  000807  03E8               	dw	1000
   102  000809  2710               	dw	10000
   103  00080B                     __end_of_dpowers:
   104                           	opt stack 0
   105  00080B                     _T1FCY:
   106                           	opt stack 0
   107  00080B  E848               	dw	59464
   108  00080D  0001               	dw	1
   109  00080F                     __end_of_T1FCY:
   110                           	opt stack 0
   111  00080F                     _FCY:
   112                           	opt stack 0
   113  00080F  4240               	dw	16960
   114  000811  000F               	dw	15
   115  000813                     __end_of_FCY:
   116                           	opt stack 0
   117  0000                     _TMR1	set	4046
   118  0000                     _TMR0	set	4054
   119  0000                     _INTCON	set	4082
   120  0000                     _SPBRG	set	4015
   121  0000                     _TXSTA	set	4012
   122  0000                     _RCSTA	set	4011
   123  0000                     _TRISC	set	3988
   124  0000                     _TRISB	set	3987
   125  0000                     _TRISA	set	3986
   126  0000                     _ADCON2	set	4032
   127  0000                     _ADCON1	set	4033
   128  0000                     _ADCON0	set	4034
   129  0000                     _T0CON	set	4053
   130  0000                     _T2CON	set	4042
   131  0000                     _PR2	set	4043
   132  0000                     _CCPR2L	set	4027
   133  0000                     _T1CON	set	4045
   134  0000                     _RCREG	set	4014
   135  0000                     _TXREG	set	4013
   136  0000                     _CCP2CON	set	4026
   137  0000                     _TMR1IF	set	31984
   138  0000                     _TMR0IF	set	32658
   139  0000                     _RCIF	set	31989
   140  0000                     _TXIF	set	31988
   141  000813                     STR_1:
   142  000813  4C                 	db	76	;'L'
   143  000814  41                 	db	65	;'A'
   144  000815  42                 	db	66	;'B'
   145  000816  2E                 	db	46
   146  000817  43                 	db	67	;'C'
   147  000818  4F                 	db	79	;'O'
   148  000819  4E                 	db	78	;'N'
   149  00081A  54                 	db	84	;'T'
   150  00081B  2E                 	db	46
   151  00081C  44                 	db	68	;'D'
   152  00081D  49                 	db	73	;'I'
   153  00081E  47                 	db	71	;'G'
   154  00081F  49                 	db	73	;'I'
   155  000820  54                 	db	84	;'T'
   156  000821  41                 	db	65	;'A'
   157  000822  4C                 	db	76	;'L'
   158  000823  00                 	db	0
   159  000824                     STR_4:
   160  000824  54                 	db	84	;'T'
   161  000825  4D                 	db	77	;'M'
   162  000826  52                 	db	82	;'R'
   163  000827  30                 	db	48	;'0'
   164  000828  20                 	db	32
   165  000829  4F                 	db	79	;'O'
   166  00082A  56                 	db	86	;'V'
   167  00082B  45                 	db	69	;'E'
   168  00082C  52                 	db	82	;'R'
   169  00082D  46                 	db	70	;'F'
   170  00082E  4C                 	db	76	;'L'
   171  00082F  4F                 	db	79	;'O'
   172  000830  57                 	db	87	;'W'
   173  000831  20                 	db	32
   174  000832  3D                 	db	61	;'='
   175  000833  50                 	db	80	;'P'
   176  000834  00                 	db	0
   177  000835                     STR_2:
   178  000835  53                 	db	83	;'S'
   179  000836  65                 	db	101	;'e'
   180  000837  6A                 	db	106	;'j'
   181  000838  61                 	db	97	;'a'
   182  000839  20                 	db	32
   183  00083A  42                 	db	66	;'B'
   184  00083B  65                 	db	101	;'e'
   185  00083C  6D                 	db	109	;'m'
   186  00083D  2D                 	db	45
   187  00083E  56                 	db	86	;'V'
   188  00083F  69                 	db	105	;'i'
   189  000840  6E                 	db	110	;'n'
   190  000841  64                 	db	100	;'d'
   191  000842  6F                 	db	111	;'o'
   192  000843  21                 	db	33
   193  000844  00                 	db	0
   194  000845                     STR_6:
   195  000845  70                 	db	112	;'p'
   196  000846  77                 	db	119	;'w'
   197  000847  6D                 	db	109	;'m'
   198  000848  20                 	db	32
   199  000849  25                 	db	37
   200  00084A  33                 	db	51	;'3'
   201  00084B  64                 	db	100	;'d'
   202  00084C  25                 	db	37
   203  00084D  25                 	db	37
   204  00084E  00                 	db	0
   205  00084F                     STR_5:
   206  00084F  74                 	db	116	;'t'
   207  000850  6D                 	db	109	;'m'
   208  000851  72                 	db	114	;'r'
   209  000852  20                 	db	32
   210  000853  25                 	db	37
   211  000854  33                 	db	51	;'3'
   212  000855  75                 	db	117	;'u'
   213  000856  20                 	db	32
   214  000857  00                 	db	0
   215  000858                     STR_7:
   216  000858  28                 	db	40
   217  000859  6E                 	db	110	;'n'
   218  00085A  75                 	db	117	;'u'
   219  00085B  6C                 	db	108	;'l'
   220  00085C  6C                 	db	108	;'l'
   221  00085D  29                 	db	41
   222  00085E  00                 	db	0
   223  00085F                     STR_3:
   224  00085F  25                 	db	37
   225  000860  73                 	db	115	;'s'
   226  000861  00                 	db	0
   227                           
   228                           ; #config settings
   229  000862  00                 	db	0	; dummy byte at the end
   230  0000                     
   231                           	psect	cinit
   232  000F5C                     __pcinit:
   233                           	opt stack 0
   234  000F5C                     start_initialization:
   235                           	opt stack 0
   236  000F5C                     __initialization:
   237                           	opt stack 0
   238                           
   239                           ; Initialize objects allocated to COMRAM (18 bytes)
   240                           ; load TBLPTR registers with __pidataCOMRAM
   241  000F5C  0E44               	movlw	low __pidataCOMRAM
   242  000F5E  6EF6               	movwf	tblptrl,c
   243  000F60  0E10               	movlw	high __pidataCOMRAM
   244  000F62  6EF7               	movwf	tblptrh,c
   245  000F64  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   246  000F66  6EF8               	movwf	tblptru,c
   247  000F68  EE00  F038         	lfsr	0,__pdataCOMRAM
   248  000F6C  EE10 F012          	lfsr	1,18
   249  000F70                     copy_data0:
   250  000F70  0009               	tblrd		*+
   251  000F72  CFF5 FFEE          	movff	tablat,postinc0
   252  000F76  50E5               	movf	postdec1,w,c
   253  000F78  50E1               	movf	fsr1l,w,c
   254  000F7A  E1FA               	bnz	copy_data0
   255                           
   256                           ; Clear objects allocated to COMRAM (3 bytes)
   257  000F7C  6A4C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   258  000F7E  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   259  000F80  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   260  000F82                     end_of_initialization:
   261                           	opt stack 0
   262  000F82                     __end_of__initialization:
   263                           	opt stack 0
   264  000F82  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   265  000F84  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   266  000F86  0E00               	movlw	low (__Lmediumconst shr (0+16))
   267  000F88  6EF8               	movwf	tblptru,c
   268  000F8A  0100               	movlb	0
   269  000F8C  EFC1  F005         	goto	_main	;jump to C main() function
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           postdec1	equ	0xFE5
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	bssCOMRAM
   279  00004A                     __pbssCOMRAM:
   280                           	opt stack 0
   281  00004A                     _ALIVE:
   282                           	opt stack 0
   283  00004A                     	ds	1
   284  00004B                     _T0ZOH:
   285                           	opt stack 0
   286  00004B                     	ds	1
   287  00004C                     _RC:
   288                           	opt stack 0
   289  00004C                     	ds	1
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           postdec1	equ	0xFE5
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	dataCOMRAM
   299  000038                     __pdataCOMRAM:
   300                           	opt stack 0
   301  000038                     _ERR:
   302                           	opt stack 0
   303  000038                     	ds	1
   304  000039                     _BUF:
   305                           	opt stack 0
   306  000039                     	ds	17
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	cstackCOMRAM
   316  000001                     __pcstackCOMRAM:
   317                           	opt stack 0
   318  000001                     ??_tmr_overflow:
   319  000001                     
   320                           ; 2 bytes @ 0x0
   321  000001                     	ds	18
   322  000013                     ??_isdigit:
   323  000013                     ??_putch:
   324  000013                     ??_prog_lcd:
   325  000013                     ?___wmul:
   326                           	opt stack 0
   327  000013                     ?___lwdiv:
   328                           	opt stack 0
   329  000013                     rsend@msg:
   330                           	opt stack 0
   331  000013                     write@duty:
   332                           	opt stack 0
   333  000013                     beep@j:
   334                           	opt stack 0
   335  000013                     ___wmul@multiplier:
   336                           	opt stack 0
   337  000013                     ___lwdiv@dividend:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x12
   341  000013                     	ds	1
   342  000014                     putch@msg:
   343                           	opt stack 0
   344  000014                     prog_lcd@msg:
   345                           	opt stack 0
   346  000014                     _isdigit$362:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x13
   350  000014                     	ds	1
   351  000015                     isdigit@c:
   352                           	opt stack 0
   353  000015                     ___wmul@multiplicand:
   354                           	opt stack 0
   355  000015                     ___lwdiv@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x14
   359  000015                     	ds	2
   360  000017                     ___wmul@product:
   361                           	opt stack 0
   362  000017                     ___lwdiv@quotient:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x16
   366  000017                     	ds	2
   367  000019                     ___lwdiv@counter:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x18
   371  000019                     	ds	1
   372  00001A                     ?___lwmod:
   373                           	opt stack 0
   374  00001A                     ___lwmod@dividend:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x19
   378  00001A                     	ds	2
   379  00001C                     ___lwmod@divisor:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x1B
   383  00001C                     	ds	2
   384  00001E                     ___lwmod@counter:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x1D
   388  00001E                     	ds	1
   389  00001F                     ?_printf:
   390                           	opt stack 0
   391  00001F                     printf@f:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x1E
   395  00001F                     	ds	4
   396  000023                     ??_printf:
   397                           
   398                           ; 1 bytes @ 0x22
   399  000023                     	ds	4
   400  000027                     printf@prec:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x26
   404  000027                     	ds	1
   405  000028                     printf@ap:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x27
   409  000028                     	ds	2
   410  00002A                     printf@cp:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x29
   414  00002A                     	ds	2
   415  00002C                     printf@flag:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x2B
   419  00002C                     	ds	1
   420  00002D                     printf@val:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2C
   424  00002D                     	ds	2
   425  00002F                     printf@len:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x2E
   429  00002F                     	ds	2
   430  000031                     printf@width:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x30
   434  000031                     	ds	2
   435  000033                     printf@c:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x32
   439  000033                     	ds	1
   440  000034                     ??_init_lcd:
   441                           
   442                           ; 1 bytes @ 0x33
   443  000034                     	ds	1
   444  000035                     ??_main:
   445                           
   446                           ; 1 bytes @ 0x34
   447  000035                     	ds	2
   448  000037                     main@x:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x36
   452  000037                     	ds	1
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           postdec1	equ	0xFE5
   459                           fsr1l	equ	0xFE1
   460                           
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 179 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  x               1   54[COMRAM] unsigned char 
   471 ;; Return value:  Size  Location     Type
   472 ;;                  2  118[None  ] int 
   473 ;; Registers used:
   474 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   480 ;;      Params:         0       0       0       0       0       0       0       0       0
   481 ;;      Locals:         1       0       0       0       0       0       0       0       0
   482 ;;      Temps:          2       0       0       0       0       0       0       0       0
   483 ;;      Totals:         3       0       0       0       0       0       0       0       0
   484 ;;Total ram usage:        3 bytes
   485 ;; Hardware stack levels required when called:    4
   486 ;; This function calls:
   487 ;;		_beep
   488 ;;		_init_lcd
   489 ;;		_printf
   490 ;;		_prog_lcd
   491 ;;		_read_tmr0
   492 ;;		_rsget
   493 ;;		_write
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  000B82                     __ptext0:
   501                           	opt stack 0
   502  000B82                     _main:
   503                           	opt stack 27
   504                           
   505                           ;main.c: 180: T1CON = 0xF1;
   506                           
   507                           ;incstack = 0
   508  000B82  0EF1               	movlw	241
   509  000B84  6ECD               	movwf	4045,c	;volatile
   510                           
   511                           ;main.c: 181: CCP2CON = 0x0F;
   512  000B86  0E0F               	movlw	15
   513  000B88  6EBA               	movwf	4026,c	;volatile
   514                           
   515                           ;main.c: 182: CCPR2L = 0;
   516  000B8A  0E00               	movlw	0
   517  000B8C  6EBB               	movwf	4027,c	;volatile
   518                           
   519                           ;main.c: 183: PR2 = 100;
   520  000B8E  0E64               	movlw	100
   521  000B90  6ECB               	movwf	4043,c	;volatile
   522                           
   523                           ;main.c: 184: T2CON = 0x04;
   524  000B92  0E04               	movlw	4
   525  000B94  6ECA               	movwf	4042,c	;volatile
   526                           
   527                           ;main.c: 185: T0CON = 0xFF;
   528  000B96  68D5               	setf	4053,c	;volatile
   529                           
   530                           ;main.c: 186: ADCON0 = 0x07;
   531  000B98  0E07               	movlw	7
   532  000B9A  6EC2               	movwf	4034,c	;volatile
   533                           
   534                           ;main.c: 187: ADCON1 = 0x0D;
   535  000B9C  0E0D               	movlw	13
   536  000B9E  6EC1               	movwf	4033,c	;volatile
   537                           
   538                           ;main.c: 188: ADCON2 = 0x00;
   539  000BA0  0E00               	movlw	0
   540  000BA2  6EC0               	movwf	4032,c	;volatile
   541                           
   542                           ;main.c: 189: TRISA = 0xFF;
   543  000BA4  6892               	setf	3986,c	;volatile
   544                           
   545                           ;main.c: 190: TRISB = 0x00;
   546  000BA6  0E00               	movlw	0
   547  000BA8  6E93               	movwf	3987,c	;volatile
   548                           
   549                           ;main.c: 191: TRISC = 0xC0;
   550  000BAA  0EC0               	movlw	192
   551  000BAC  6E94               	movwf	3988,c	;volatile
   552                           
   553                           ;main.c: 192: RCSTA = 0x90;
   554  000BAE  0E90               	movlw	144
   555  000BB0  6EAB               	movwf	4011,c	;volatile
   556                           
   557                           ;main.c: 193: TXSTA = 0x24;
   558  000BB2  0E24               	movlw	36
   559  000BB4  6EAC               	movwf	4012,c	;volatile
   560                           
   561                           ;main.c: 194: SPBRG = 12;
   562  000BB6  0E0C               	movlw	12
   563  000BB8  6EAF               	movwf	4015,c	;volatile
   564                           
   565                           ;main.c: 195: init_lcd(); _delay((unsigned long)((1500)*(4000000/4000.0)));
   566  000BBA  ECE3  F006         	call	_init_lcd	;wreg free
   567  000BBE  0E08               	movlw	8
   568  000BC0  6E36               	movwf	(??_main+1)& (0+255),c
   569  000BC2  0E9D               	movlw	157
   570  000BC4  6E35               	movwf	??_main& (0+255),c
   571  000BC6  0E06               	movlw	6
   572  000BC8                     u787:
   573  000BC8  2EE8               	decfsz	wreg,f,c
   574  000BCA  D7FE               	bra	u787
   575  000BCC  2E35               	decfsz	??_main& (0+255),f,c
   576  000BCE  D7FC               	bra	u787
   577  000BD0  2E36               	decfsz	(??_main+1)& (0+255),f,c
   578  000BD2  D7FA               	bra	u787
   579                           
   580                           ;main.c: 196: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   581  000BD4  ECC8  F007         	call	_beep	;wreg free
   582  000BD8  0E82               	movlw	130
   583  000BDA  6E35               	movwf	??_main& (0+255),c
   584  000BDC  0EDE               	movlw	222
   585  000BDE                     u797:
   586  000BDE  2EE8               	decfsz	wreg,f,c
   587  000BE0  D7FE               	bra	u797
   588  000BE2  2E35               	decfsz	??_main& (0+255),f,c
   589  000BE4  D7FC               	bra	u797
   590                           
   591                           ;main.c: 197: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   592  000BE6  ECC8  F007         	call	_beep	;wreg free
   593  000BEA  0E82               	movlw	130
   594  000BEC  6E35               	movwf	??_main& (0+255),c
   595  000BEE  0EDE               	movlw	222
   596  000BF0                     u807:
   597  000BF0  2EE8               	decfsz	wreg,f,c
   598  000BF2  D7FE               	bra	u807
   599  000BF4  2E35               	decfsz	??_main& (0+255),f,c
   600  000BF6  D7FC               	bra	u807
   601                           
   602                           ;main.c: 198: beep(); _delay((unsigned long)((100)*(4000000/4000.0)));
   603  000BF8  ECC8  F007         	call	_beep	;wreg free
   604  000BFC  0E82               	movlw	130
   605  000BFE  6E35               	movwf	??_main& (0+255),c
   606  000C00  0EDE               	movlw	222
   607  000C02                     u817:
   608  000C02  2EE8               	decfsz	wreg,f,c
   609  000C04  D7FE               	bra	u817
   610  000C06  2E35               	decfsz	??_main& (0+255),f,c
   611  000C08  D7FC               	bra	u817
   612                           
   613                           ;main.c: 199: TMR0 = 0;
   614  000C0A  0E00               	movlw	0
   615  000C0C  6ED7               	movwf	4055,c	;volatile
   616  000C0E  0E00               	movlw	0
   617  000C10  6ED6               	movwf	4054,c	;volatile
   618                           
   619                           ;main.c: 200: TMR1 = 0;
   620  000C12  0E00               	movlw	0
   621  000C14  6ECF               	movwf	4047,c	;volatile
   622  000C16  0E00               	movlw	0
   623  000C18  6ECE               	movwf	4046,c	;volatile
   624                           
   625                           ;main.c: 201: INTCON = 0xA0;
   626  000C1A  0EA0               	movlw	160
   627  000C1C  6EF2               	movwf	intcon,c	;volatile
   628                           
   629                           ;main.c: 202: TMR0IF = 0;
   630  000C1E  94F2               	bcf	intcon,2,c	;volatile
   631                           
   632                           ;main.c: 203: TMR1IF = 1;
   633  000C20  809E               	bsf	3998,0,c	;volatile
   634  000C22                     
   635                           ;main.c: 206: if (TMR1IF) {
   636  000C22  A09E               	btfss	3998,0,c	;volatile
   637  000C24  D035               	goto	l120
   638                           
   639                           ;main.c: 207: prog_lcd(0x80);
   640  000C26  0E80               	movlw	128
   641  000C28  EC45  F007         	call	_prog_lcd
   642                           
   643                           ;main.c: 208: if (ERR == NIL) printf("%s", BUF);
   644  000C2C  0438               	decf	_ERR,w,c	;volatile
   645  000C2E  A4D8               	btfss	status,2,c
   646  000C30  D00B               	goto	l121
   647  000C32  0E5F               	movlw	low STR_3
   648  000C34  6E1F               	movwf	printf@f,c
   649  000C36  0E08               	movlw	high STR_3
   650  000C38  6E20               	movwf	printf@f+1,c
   651  000C3A  0E39               	movlw	low _BUF
   652  000C3C  6E21               	movwf	?_printf+2,c
   653  000C3E  0E00               	movlw	high _BUF
   654  000C40  6E22               	movwf	?_printf+3,c
   655  000C42  EC32  F004         	call	_printf	;wreg free
   656  000C46  D009               	goto	l123
   657  000C48                     l121:
   658                           
   659                           ;main.c: 209: else if (ERR == TMR0OF) printf("TMR0 OVERFLOW =P");
   660  000C48  5038               	movf	_ERR,w,c	;volatile
   661  000C4A  A4D8               	btfss	status,2,c
   662  000C4C  D006               	goto	l123
   663  000C4E  0E24               	movlw	low STR_4
   664  000C50  6E1F               	movwf	printf@f,c
   665  000C52  0E08               	movlw	high STR_4
   666  000C54  6E20               	movwf	printf@f+1,c
   667  000C56  EC32  F004         	call	_printf	;wreg free
   668  000C5A                     l123:
   669                           
   670                           ;main.c: 210: prog_lcd(0xC0);
   671  000C5A  0EC0               	movlw	192
   672  000C5C  EC45  F007         	call	_prog_lcd
   673                           
   674                           ;main.c: 211: printf("tmr %3u ", T0ZOH);
   675  000C60  0E4F               	movlw	low STR_5
   676  000C62  6E1F               	movwf	printf@f,c
   677  000C64  0E08               	movlw	high STR_5
   678  000C66  6E20               	movwf	printf@f+1,c
   679  000C68  C04B  F021         	movff	_T0ZOH,?_printf+2
   680  000C6C  6A22               	clrf	?_printf+3,c
   681  000C6E  EC32  F004         	call	_printf	;wreg free
   682                           
   683                           ;main.c: 212: prog_lcd(0xC8);
   684  000C72  0EC8               	movlw	200
   685  000C74  EC45  F007         	call	_prog_lcd
   686                           
   687                           ;main.c: 213: printf("pwm %3d%%", PWM);
   688  000C78  0E45               	movlw	low STR_6
   689  000C7A  6E1F               	movwf	printf@f,c
   690  000C7C  0E08               	movlw	high STR_6
   691  000C7E  6E20               	movwf	printf@f+1,c
   692  000C80  50BB               	movf	4027,w,c
   693  000C82  6E21               	movwf	?_printf+2,c
   694  000C84  6A22               	clrf	?_printf+3,c
   695  000C86  BE21               	btfsc	?_printf+2,7,c
   696  000C88  0622               	decf	?_printf+3,f,c
   697  000C8A  EC32  F004         	call	_printf	;wreg free
   698                           
   699                           ;main.c: 214: TMR1IF = 0;
   700  000C8E  909E               	bcf	3998,0,c	;volatile
   701  000C90                     l120:
   702                           
   703                           ;main.c: 215: }
   704                           ;main.c: 217: char x = rsget();
   705  000C90  EC31  F008         	call	_rsget	;wreg free
   706  000C94  6E37               	movwf	main@x,c
   707                           
   708                           ;main.c: 218: if (x == '\n') {
   709  000C96  0E0A               	movlw	10
   710  000C98  1837               	xorwf	main@x,w,c
   711  000C9A  A4D8               	btfss	status,2,c
   712  000C9C  D036               	goto	l124
   713                           
   714                           ;main.c: 219: ALIVE = 1;
   715  000C9E  0E01               	movlw	1
   716  000CA0  6E4A               	movwf	_ALIVE,c
   717                           
   718                           ;main.c: 220: switch (BUF[0]) {
   719  000CA2  D017               	goto	l125
   720  000CA4  EC15  F008         	call	_read_tmr0	;wreg free
   721  000CA8  D02D               	goto	l128
   722  000CAA  503A               	movf	_BUF+1,w,c
   723  000CAC  ECF5  F007         	call	_write
   724  000CB0  D029               	goto	l128
   725  000CB2  503A               	movf	_BUF+1,w,c
   726  000CB4  ECF5  F007         	call	_write
   727  000CB8  EC15  F008         	call	_read_tmr0	;wreg free
   728  000CBC  D023               	goto	l128
   729  000CBE  0E00               	movlw	0
   730  000CC0  6E4A               	movwf	_ALIVE,c
   731  000CC2  0E00               	movlw	0
   732  000CC4  ECF5  F007         	call	_write
   733  000CC8  ECC8  F007         	call	_beep	;wreg free
   734  000CCC  ECC8  F007         	call	_beep	;wreg free
   735                           
   736                           ;main.c: 225: }
   737  000CD0  D019               	goto	l128
   738  000CD2                     l125:
   739  000CD2  5039               	movf	_BUF,w,c
   740                           
   741                           ; Switch size 1, requested type "space"
   742                           ; Number of cases is 8, Range of values is 49 to 120
   743                           ; switch strategies available:
   744                           ; Name         Instructions Cycles
   745                           ; simple_byte           25    13 (average)
   746                           ;	Chosen strategy is simple_byte
   747  000CD4  0A31               	xorlw	49	; case 49
   748  000CD6  B4D8               	btfsc	status,2,c
   749  000CD8  D7EC               	goto	l131
   750  000CDA  0A03               	xorlw	3	; case 50
   751  000CDC  B4D8               	btfsc	status,2,c
   752  000CDE  D7EF               	goto	l133
   753  000CE0  0A07               	xorlw	7	; case 53
   754  000CE2  B4D8               	btfsc	status,2,c
   755  000CE4  D7E2               	goto	l129
   756  000CE6  0A02               	xorlw	2	; case 55
   757  000CE8  B4D8               	btfsc	status,2,c
   758  000CEA  D7DC               	goto	l126
   759  000CEC  0A45               	xorlw	69	; case 114
   760  000CEE  B4D8               	btfsc	status,2,c
   761  000CF0  D7D9               	goto	l126
   762  000CF2  0A01               	xorlw	1	; case 115
   763  000CF4  B4D8               	btfsc	status,2,c
   764  000CF6  D7E3               	goto	l133
   765  000CF8  0A04               	xorlw	4	; case 119
   766  000CFA  B4D8               	btfsc	status,2,c
   767  000CFC  D7D6               	goto	l129
   768  000CFE  0A0F               	xorlw	15	; case 120
   769  000D00  B4D8               	btfsc	status,2,c
   770  000D02  D7D7               	goto	l131
   771  000D04                     l128:
   772                           
   773                           ;main.c: 226: RC = 0;
   774  000D04  0E00               	movlw	0
   775  000D06  6E4C               	movwf	_RC,c
   776                           
   777                           ;main.c: 227: }
   778  000D08  D78C               	goto	l119
   779  000D0A                     l124:
   780                           
   781                           ;main.c: 228: else {
   782                           ;main.c: 229: BUF[RC] = x;
   783  000D0A  504C               	movf	_RC,w,c
   784  000D0C  0D01               	mullw	1
   785  000D0E  0E39               	movlw	low _BUF
   786  000D10  24F3               	addwf	prodl,w,c
   787  000D12  6ED9               	movwf	fsr2l,c
   788  000D14  0E00               	movlw	high _BUF
   789  000D16  20F4               	addwfc	prodh,w,c
   790  000D18  6EDA               	movwf	fsr2h,c
   791  000D1A  C037  FFDF         	movff	main@x,indf2
   792                           
   793                           ;main.c: 230: RC++;
   794  000D1E  2A4C               	incf	_RC,f,c
   795  000D20  D780               	goto	l119
   796  000D22                     __end_of_main:
   797                           	opt stack 0
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           prodh	equ	0xFF4
   803                           prodl	equ	0xFF3
   804                           intcon	equ	0xFF2
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           postdec1	equ	0xFE5
   808                           fsr1l	equ	0xFE1
   809                           indf2	equ	0xFDF
   810                           fsr2h	equ	0xFDA
   811                           fsr2l	equ	0xFD9
   812                           status	equ	0xFD8
   813                           
   814 ;; *************** function _write *****************
   815 ;; Defined at:
   816 ;;		line 162 in file "main.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;  duty            1    wreg     char 
   819 ;; Auto vars:     Size  Location     Type
   820 ;;  duty            1   18[COMRAM] char 
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg, status,2, status,0
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   830 ;;      Params:         0       0       0       0       0       0       0       0       0
   831 ;;      Locals:         1       0       0       0       0       0       0       0       0
   832 ;;      Temps:          0       0       0       0       0       0       0       0       0
   833 ;;      Totals:         1       0       0       0       0       0       0       0       0
   834 ;;Total ram usage:        1 bytes
   835 ;; Hardware stack levels used:    1
   836 ;; Hardware stack levels required when called:    1
   837 ;; This function calls:
   838 ;;		Nothing
   839 ;; This function is called by:
   840 ;;		_main
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text1
   845  000FEA                     __ptext1:
   846                           	opt stack 0
   847  000FEA                     _write:
   848                           	opt stack 29
   849                           
   850                           ;incstack = 0
   851                           ;write@duty stored from wreg
   852  000FEA  6E13               	movwf	write@duty,c
   853                           
   854                           ;main.c: 163: if (duty > 100) PWM = 100;
   855  000FEC  5013               	movf	write@duty,w,c
   856  000FEE  0A80               	xorlw	128
   857  000FF0  0F1B               	addlw	-229
   858  000FF2  A0D8               	btfss	status,0,c
   859  000FF4  D003               	goto	l104
   860  000FF6  0E64               	movlw	100
   861  000FF8  6EBB               	movwf	4027,c
   862  000FFA  0012               	return	
   863  000FFC                     l104:
   864                           
   865                           ;main.c: 164: else if (duty < 0) PWM = 0;
   866  000FFC  AE13               	btfss	write@duty,7,c
   867  000FFE  D003               	goto	l106
   868  001000  0E00               	movlw	0
   869  001002  6EBB               	movwf	4027,c
   870  001004  0012               	return	
   871  001006                     l106:
   872                           
   873                           ;main.c: 165: else PWM = duty;
   874  001006  C013  FFBB         	movff	write@duty,4027
   875  00100A  0012               	return	
   876  00100C                     __end_of_write:
   877                           	opt stack 0
   878                           tblptru	equ	0xFF8
   879                           tblptrh	equ	0xFF7
   880                           tblptrl	equ	0xFF6
   881                           tablat	equ	0xFF5
   882                           prodh	equ	0xFF4
   883                           prodl	equ	0xFF3
   884                           intcon	equ	0xFF2
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1l	equ	0xFE1
   889                           indf2	equ	0xFDF
   890                           fsr2h	equ	0xFDA
   891                           fsr2l	equ	0xFD9
   892                           status	equ	0xFD8
   893                           
   894 ;; *************** function _rsget *****************
   895 ;; Defined at:
   896 ;;		line 147 in file "main.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      unsigned char 
   903 ;; Registers used:
   904 ;;		wreg, status,2
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   910 ;;      Params:         0       0       0       0       0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0       0       0       0       0
   913 ;;      Totals:         0       0       0       0       0       0       0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    1
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_main
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text2
   925  001062                     __ptext2:
   926                           	opt stack 0
   927  001062                     _rsget:
   928                           	opt stack 29
   929                           
   930                           ;main.c: 148: while (!RCIF) continue;
   931                           
   932                           ;incstack = 0
   933  001062  AA9E               	btfss	3998,5,c	;volatile
   934  001064  D7FE               	goto	_rsget
   935                           
   936                           ;main.c: 149: return RCREG;
   937  001066  50AE               	movf	4014,w,c	;volatile
   938  001068  0012               	return	
   939  00106A                     __end_of_rsget:
   940                           	opt stack 0
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           prodh	equ	0xFF4
   946                           prodl	equ	0xFF3
   947                           intcon	equ	0xFF2
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           postdec1	equ	0xFE5
   951                           fsr1l	equ	0xFE1
   952                           indf2	equ	0xFDF
   953                           fsr2h	equ	0xFDA
   954                           fsr2l	equ	0xFD9
   955                           status	equ	0xFD8
   956                           
   957 ;; *************** function _read_tmr0 *****************
   958 ;; Defined at:
   959 ;;		line 154 in file "main.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      void 
   966 ;; Registers used:
   967 ;;		wreg, status,2, status,0, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   973 ;;      Params:         0       0       0       0       0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    2
   980 ;; This function calls:
   981 ;;		_rsend
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text3
   988  00102A                     __ptext3:
   989                           	opt stack 0
   990  00102A                     _read_tmr0:
   991                           	opt stack 28
   992                           
   993                           ;main.c: 155: T0ZOH = TMR0;
   994                           
   995                           ;incstack = 0
   996  00102A  CFD6 F04B          	movff	4054,_T0ZOH	;volatile
   997                           
   998                           ;main.c: 156: rsend(0);
   999  00102E  0E00               	movlw	0
  1000  001030  EC2B  F008         	call	_rsend
  1001                           
  1002                           ;main.c: 157: rsend(T0ZOH);
  1003  001034  504B               	movf	_T0ZOH,w,c
  1004  001036  EC2B  F008         	call	_rsend
  1005                           
  1006                           ;main.c: 158: TMR0 -= T0ZOH;
  1007  00103A  504B               	movf	_T0ZOH,w,c
  1008  00103C  5ED6               	subwf	4054,f,c	;volatile
  1009  00103E  0E00               	movlw	0
  1010  001040  5AD7               	subwfb	4055,f,c	;volatile
  1011  001042  0012               	return	
  1012  001044                     __end_of_read_tmr0:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           prodh	equ	0xFF4
  1019                           prodl	equ	0xFF3
  1020                           intcon	equ	0xFF2
  1021                           postinc0	equ	0xFEE
  1022                           wreg	equ	0xFE8
  1023                           postdec1	equ	0xFE5
  1024                           fsr1l	equ	0xFE1
  1025                           indf2	equ	0xFDF
  1026                           fsr2h	equ	0xFDA
  1027                           fsr2l	equ	0xFD9
  1028                           status	equ	0xFD8
  1029                           
  1030 ;; *************** function _rsend *****************
  1031 ;; Defined at:
  1032 ;;		line 142 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  msg             1    wreg     unsigned char 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  msg             1   18[COMRAM] unsigned char 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1046 ;;      Params:         0       0       0       0       0       0       0       0       0
  1047 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1049 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1050 ;;Total ram usage:        1 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    1
  1053 ;; This function calls:
  1054 ;;		Nothing
  1055 ;; This function is called by:
  1056 ;;		_read_tmr0
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text4
  1061  001056                     __ptext4:
  1062                           	opt stack 0
  1063  001056                     _rsend:
  1064                           	opt stack 28
  1065                           
  1066                           ;incstack = 0
  1067                           ;rsend@msg stored from wreg
  1068  001056  6E13               	movwf	rsend@msg,c
  1069  001058                     
  1070                           ;main.c: 143: while (!TXIF) continue;
  1071  001058  A89E               	btfss	3998,4,c	;volatile
  1072  00105A  D7FE               	goto	l1055
  1073                           
  1074                           ;main.c: 144: TXREG = msg;
  1075  00105C  C013  FFAD         	movff	rsend@msg,4013	;volatile
  1076  001060  0012               	return		;funcret
  1077  001062                     __end_of_rsend:
  1078                           	opt stack 0
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           prodh	equ	0xFF4
  1084                           prodl	equ	0xFF3
  1085                           intcon	equ	0xFF2
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           fsr1l	equ	0xFE1
  1090                           indf2	equ	0xFDF
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095 ;; *************** function _init_lcd *****************
  1096 ;; Defined at:
  1097 ;;		line 128 in file "main.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;		None
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;		None
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1111 ;;      Params:         0       0       0       0       0       0       0       0       0
  1112 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1113 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1114 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1115 ;;Total ram usage:        1 bytes
  1116 ;; Hardware stack levels used:    1
  1117 ;; Hardware stack levels required when called:    3
  1118 ;; This function calls:
  1119 ;;		_printf
  1120 ;;		_prog_lcd
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text5
  1127  000DC6                     __ptext5:
  1128                           	opt stack 0
  1129  000DC6                     _init_lcd:
  1130                           	opt stack 27
  1131                           
  1132                           ;main.c: 129: _delay((unsigned long)((20)*(4000000/4000.0)));
  1133                           
  1134                           ;incstack = 0
  1135  000DC6  0E1A               	movlw	26
  1136  000DC8  6E34               	movwf	??_init_lcd& (0+255),c
  1137  000DCA  0EF8               	movlw	248
  1138  000DCC                     u827:
  1139  000DCC  2EE8               	decfsz	wreg,f,c
  1140  000DCE  D7FE               	bra	u827
  1141  000DD0  2E34               	decfsz	??_init_lcd& (0+255),f,c
  1142  000DD2  D7FC               	bra	u827
  1143  000DD4  D000               	nop2	
  1144                           
  1145                           ;main.c: 130: prog_lcd(0x02); _delay((unsigned long)((5)*(4000000/4000.0)));
  1146  000DD6  0E02               	movlw	2
  1147  000DD8  EC45  F007         	call	_prog_lcd
  1148  000DDC  0E07               	movlw	7
  1149  000DDE  6E34               	movwf	??_init_lcd& (0+255),c
  1150  000DE0  0E7D               	movlw	125
  1151  000DE2                     u837:
  1152  000DE2  2EE8               	decfsz	wreg,f,c
  1153  000DE4  D7FE               	bra	u837
  1154  000DE6  2E34               	decfsz	??_init_lcd& (0+255),f,c
  1155  000DE8  D7FC               	bra	u837
  1156  000DEA  F000               	nop	
  1157                           
  1158                           ;main.c: 131: prog_lcd(0x28);
  1159  000DEC  0E28               	movlw	40
  1160  000DEE  EC45  F007         	call	_prog_lcd
  1161                           
  1162                           ;main.c: 132: prog_lcd(0x01); _delay((unsigned long)((2)*(4000000/4000.0)));
  1163  000DF2  0E01               	movlw	1
  1164  000DF4  EC45  F007         	call	_prog_lcd
  1165  000DF8  0E03               	movlw	3
  1166  000DFA  6E34               	movwf	??_init_lcd& (0+255),c
  1167  000DFC  0E98               	movlw	152
  1168  000DFE                     u847:
  1169  000DFE  2EE8               	decfsz	wreg,f,c
  1170  000E00  D7FE               	bra	u847
  1171  000E02  2E34               	decfsz	??_init_lcd& (0+255),f,c
  1172  000E04  D7FC               	bra	u847
  1173                           
  1174                           ;main.c: 133: prog_lcd(0x0C);
  1175  000E06  0E0C               	movlw	12
  1176  000E08  EC45  F007         	call	_prog_lcd
  1177                           
  1178                           ;main.c: 134: prog_lcd(0x06);
  1179  000E0C  0E06               	movlw	6
  1180  000E0E  EC45  F007         	call	_prog_lcd
  1181                           
  1182                           ;main.c: 135: prog_lcd(0x80);
  1183  000E12  0E80               	movlw	128
  1184  000E14  EC45  F007         	call	_prog_lcd
  1185                           
  1186                           ;main.c: 136: printf("LAB.CONT.DIGITAL");
  1187  000E18  0E13               	movlw	low STR_1
  1188  000E1A  6E1F               	movwf	printf@f,c
  1189  000E1C  0E08               	movlw	high STR_1
  1190  000E1E  6E20               	movwf	printf@f+1,c
  1191  000E20  EC32  F004         	call	_printf	;wreg free
  1192                           
  1193                           ;main.c: 137: prog_lcd(0xC0);
  1194  000E24  0EC0               	movlw	192
  1195  000E26  EC45  F007         	call	_prog_lcd
  1196                           
  1197                           ;main.c: 138: printf("Seja Bem-Vindo!");
  1198  000E2A  0E35               	movlw	low STR_2
  1199  000E2C  6E1F               	movwf	printf@f,c
  1200  000E2E  0E08               	movlw	high STR_2
  1201  000E30  6E20               	movwf	printf@f+1,c
  1202  000E32  EC32  F004         	call	_printf	;wreg free
  1203  000E36  0012               	return	
  1204  000E38                     __end_of_init_lcd:
  1205                           	opt stack 0
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           prodh	equ	0xFF4
  1211                           prodl	equ	0xFF3
  1212                           intcon	equ	0xFF2
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1l	equ	0xFE1
  1217                           indf2	equ	0xFDF
  1218                           fsr2h	equ	0xFDA
  1219                           fsr2l	equ	0xFD9
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _prog_lcd *****************
  1223 ;; Defined at:
  1224 ;;		line 115 in file "main.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  msg             1    wreg     unsigned char 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  msg             1   19[COMRAM] unsigned char 
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1238 ;;      Params:         0       0       0       0       0       0       0       0       0
  1239 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1240 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1241 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1242 ;;Total ram usage:        2 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    1
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_init_lcd
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text6
  1254  000E8A                     __ptext6:
  1255                           	opt stack 0
  1256  000E8A                     _prog_lcd:
  1257                           	opt stack 29
  1258                           
  1259                           ;incstack = 0
  1260                           ;prog_lcd@msg stored from wreg
  1261  000E8A  6E14               	movwf	prog_lcd@msg,c
  1262                           
  1263                           ;main.c: 116: CCP2CON = 0x00;
  1264  000E8C  0E00               	movlw	0
  1265  000E8E  6EBA               	movwf	4026,c	;volatile
  1266                           
  1267                           ;main.c: 117: LCD.RS = 0;
  1268  000E90  9A8A               	bcf	3978,5,c
  1269                           
  1270                           ;main.c: 118: LCD.CH = (msg >> 4);
  1271  000E92  C014  F013         	movff	prog_lcd@msg,??_prog_lcd
  1272  000E96  3A13               	swapf	??_prog_lcd,f,c
  1273  000E98  0E0F               	movlw	15
  1274  000E9A  1613               	andwf	??_prog_lcd,f,c
  1275  000E9C  508A               	movf	3978,w,c
  1276  000E9E  1813               	xorwf	??_prog_lcd,w,c
  1277  000EA0  0BF0               	andlw	-16
  1278  000EA2  1813               	xorwf	??_prog_lcd,w,c
  1279  000EA4  6E8A               	movwf	3978,c
  1280                           
  1281                           ;main.c: 119: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  1282  000EA6  888A               	bsf	3978,4,c
  1283  000EA8  F000               	nop	
  1284                           
  1285                           ;main.c: 120: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  1286  000EAA  988A               	bcf	3978,4,c
  1287  000EAC  0E10               	movlw	16
  1288  000EAE                     u857:
  1289  000EAE  2EE8               	decfsz	wreg,f,c
  1290  000EB0  D7FE               	bra	u857
  1291  000EB2  D000               	nop2	
  1292                           
  1293                           ;main.c: 121: LCD.CH = msg;
  1294  000EB4  508A               	movf	3978,w,c
  1295  000EB6  1814               	xorwf	prog_lcd@msg,w,c
  1296  000EB8  0BF0               	andlw	-16
  1297  000EBA  1814               	xorwf	prog_lcd@msg,w,c
  1298  000EBC  6E8A               	movwf	3978,c
  1299                           
  1300                           ;main.c: 122: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  1301  000EBE  888A               	bsf	3978,4,c
  1302  000EC0  F000               	nop	
  1303                           
  1304                           ;main.c: 123: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  1305  000EC2  988A               	bcf	3978,4,c
  1306  000EC4  0E10               	movlw	16
  1307  000EC6                     u867:
  1308  000EC6  2EE8               	decfsz	wreg,f,c
  1309  000EC8  D7FE               	bra	u867
  1310  000ECA  D000               	nop2	
  1311                           
  1312                           ;main.c: 124: CCP2CON = 0x0F;
  1313  000ECC  0E0F               	movlw	15
  1314  000ECE  6EBA               	movwf	4026,c	;volatile
  1315  000ED0  0012               	return	
  1316  000ED2                     __end_of_prog_lcd:
  1317                           	opt stack 0
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           prodh	equ	0xFF4
  1323                           prodl	equ	0xFF3
  1324                           intcon	equ	0xFF2
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec1	equ	0xFE5
  1328                           fsr1l	equ	0xFE1
  1329                           indf2	equ	0xFDF
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function _printf *****************
  1335 ;; Defined at:
  1336 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1339 ;;		 -> STR_6(10), STR_5(9), STR_4(17), STR_3(3), 
  1340 ;;		 -> STR_2(16), STR_1(17), 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  tmpval          4    0        struct .
  1343 ;;  width           2   48[COMRAM] int 
  1344 ;;  len             2   46[COMRAM] unsigned int 
  1345 ;;  val             2   44[COMRAM] unsigned int 
  1346 ;;  cp              2   41[COMRAM] PTR const unsigned char 
  1347 ;;		 -> STR_7(7), printf@c(1), BUF(17), 
  1348 ;;  ap              2   39[COMRAM] PTR void [1]
  1349 ;;		 -> ?_printf(2), 
  1350 ;;  c               1   50[COMRAM] char 
  1351 ;;  flag            1   43[COMRAM] unsigned char 
  1352 ;;  prec            1   38[COMRAM] char 
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  2   30[COMRAM] int 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1362 ;;      Params:         4       0       0       0       0       0       0       0       0
  1363 ;;      Locals:        13       0       0       0       0       0       0       0       0
  1364 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1365 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1366 ;;Total ram usage:       21 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    2
  1369 ;; This function calls:
  1370 ;;		___lwdiv
  1371 ;;		___lwmod
  1372 ;;		___wmul
  1373 ;;		_isdigit
  1374 ;;		_putch
  1375 ;; This function is called by:
  1376 ;;		_init_lcd
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text7
  1382  000864                     __ptext7:
  1383                           	opt stack 0
  1384  000864                     _printf:
  1385                           	opt stack 28
  1386                           
  1387                           ;doprnt.c: 466: va_list ap;
  1388                           ;doprnt.c: 499: signed char c;
  1389                           ;doprnt.c: 501: int width;
  1390                           ;doprnt.c: 506: signed char prec;
  1391                           ;doprnt.c: 508: unsigned char flag;
  1392                           ;doprnt.c: 523: union {
  1393                           ;doprnt.c: 524: unsigned long vd;
  1394                           ;doprnt.c: 525: double integ;
  1395                           ;doprnt.c: 526: } tmpval;
  1396                           ;doprnt.c: 528: unsigned int val;
  1397                           ;doprnt.c: 529: unsigned len;
  1398                           ;doprnt.c: 530: const char * cp;
  1399                           ;doprnt.c: 533: *ap = __va_start();
  1400                           
  1401                           ;incstack = 0
  1402  000864  0E21               	movlw	low (?_printf+2)
  1403  000866  6E28               	movwf	printf@ap,c
  1404  000868  0E00               	movlw	high (?_printf+2)
  1405  00086A  6E29               	movwf	printf@ap+1,c
  1406                           
  1407                           ;doprnt.c: 536: while(c = *f++) {
  1408  00086C  D17D               	goto	u720
  1409  00086E                     
  1410                           ;doprnt.c: 538: if(c != '%')
  1411  00086E  0E25               	movlw	37
  1412  000870  1833               	xorwf	printf@c,w,c
  1413  000872  B4D8               	btfsc	status,2,c
  1414  000874  D004               	goto	l153
  1415                           
  1416                           ;doprnt.c: 540: {
  1417                           ;doprnt.c: 541: (putch(c) );
  1418  000876  5033               	movf	printf@c,w,c
  1419  000878  EC69  F007         	call	_putch
  1420                           
  1421                           ;doprnt.c: 542: continue;
  1422  00087C  D175               	goto	u720
  1423  00087E                     l153:
  1424                           
  1425                           ;doprnt.c: 543: }
  1426                           ;doprnt.c: 546: width = 0;
  1427  00087E  0E00               	movlw	0
  1428  000880  6E32               	movwf	printf@width+1,c
  1429  000882  0E00               	movlw	0
  1430  000884  6E31               	movwf	printf@width,c
  1431                           
  1432                           ;doprnt.c: 548: flag = 0;
  1433  000886  0E00               	movlw	0
  1434  000888  6E2C               	movwf	printf@flag,c
  1435                           
  1436                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1437  00088A  C01F  FFF6         	movff	printf@f,tblptrl
  1438  00088E  C020  FFF7         	movff	printf@f+1,tblptrh
  1439  000892                     	if	0	;tblptru may be non-zero
  1440  000892                     	endif
  1441  000892                     	if	0	;tblptru may be non-zero
  1442  000892                     	endif
  1443  000892  0008               	tblrd		*
  1444  000894  50F5               	movf	tablat,w,c
  1445  000896  EC06  F008         	call	_isdigit
  1446  00089A  A0D8               	btfss	status,0,c
  1447  00089C  D0AB               	goto	l157
  1448                           
  1449                           ;doprnt.c: 598: width = 0;
  1450  00089E  0E00               	movlw	0
  1451  0008A0  6E32               	movwf	printf@width+1,c
  1452  0008A2  0E00               	movlw	0
  1453  0008A4  6E31               	movwf	printf@width,c
  1454  0008A6                     
  1455                           ;doprnt.c: 600: width *= 10;
  1456  0008A6  C031  F013         	movff	printf@width,___wmul@multiplier
  1457  0008AA  C032  F014         	movff	printf@width+1,___wmul@multiplier+1
  1458  0008AE  0E00               	movlw	0
  1459  0008B0  6E16               	movwf	___wmul@multiplicand+1,c
  1460  0008B2  0E0A               	movlw	10
  1461  0008B4  6E15               	movwf	___wmul@multiplicand,c
  1462  0008B6  ECE2  F007         	call	___wmul	;wreg free
  1463  0008BA  C013  F031         	movff	?___wmul,printf@width
  1464  0008BE  C014  F032         	movff	?___wmul+1,printf@width+1
  1465                           
  1466                           ;doprnt.c: 601: width += *f++ - '0';
  1467  0008C2  0ED0               	movlw	208
  1468  0008C4  6E23               	movwf	??_printf& (0+255),c
  1469  0008C6  0EFF               	movlw	255
  1470  0008C8  6E24               	movwf	(??_printf+1)& (0+255),c
  1471  0008CA  C01F  FFF6         	movff	printf@f,tblptrl
  1472  0008CE  C020  FFF7         	movff	printf@f+1,tblptrh
  1473  0008D2                     	if	0	;tblptru may be non-zero
  1474  0008D2                     	endif
  1475  0008D2                     	if	0	;tblptru may be non-zero
  1476  0008D2                     	endif
  1477  0008D2  0008               	tblrd		*
  1478  0008D4  50F5               	movf	tablat,w,c
  1479  0008D6  6E25               	movwf	(??_printf+2)& (0+255),c
  1480  0008D8  6A26               	clrf	(??_printf+3)& (0+255),c
  1481  0008DA  5023               	movf	??_printf,w,c
  1482  0008DC  2625               	addwf	??_printf+2,f,c
  1483  0008DE  5024               	movf	??_printf+1,w,c
  1484  0008E0  2226               	addwfc	??_printf+3,f,c
  1485  0008E2  5025               	movf	??_printf+2,w,c
  1486  0008E4  2631               	addwf	printf@width,f,c
  1487  0008E6  5026               	movf	??_printf+3,w,c
  1488  0008E8  2232               	addwfc	printf@width+1,f,c
  1489  0008EA  4A1F               	infsnz	printf@f,f,c
  1490  0008EC  2A20               	incf	printf@f+1,f,c
  1491                           
  1492                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1493  0008EE  C01F  FFF6         	movff	printf@f,tblptrl
  1494  0008F2  C020  FFF7         	movff	printf@f+1,tblptrh
  1495  0008F6                     	if	0	;tblptru may be non-zero
  1496  0008F6                     	endif
  1497  0008F6                     	if	0	;tblptru may be non-zero
  1498  0008F6                     	endif
  1499  0008F6  0008               	tblrd		*
  1500  0008F8  50F5               	movf	tablat,w,c
  1501  0008FA  EC06  F008         	call	_isdigit
  1502  0008FE  A0D8               	btfss	status,0,c
  1503  000900  D079               	goto	l157
  1504  000902  D7D1               	goto	l155
  1505  000904                     
  1506                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1507  000904  C028  FFD9         	movff	printf@ap,fsr2l
  1508  000908  C029  FFDA         	movff	printf@ap+1,fsr2h
  1509  00090C  CFDE F02A          	movff	postinc2,printf@cp
  1510  000910  CFDD F02B          	movff	postdec2,printf@cp+1
  1511  000914  0E02               	movlw	2
  1512  000916  2628               	addwf	printf@ap,f,c
  1513  000918  0E00               	movlw	0
  1514  00091A  2229               	addwfc	printf@ap+1,f,c
  1515                           
  1516                           ;doprnt.c: 740: if(!cp)
  1517  00091C  502A               	movf	printf@cp,w,c
  1518  00091E  102B               	iorwf	printf@cp+1,w,c
  1519  000920  A4D8               	btfss	status,2,c
  1520  000922  D004               	goto	l164
  1521                           
  1522                           ;doprnt.c: 741: cp = "(null)";
  1523  000924  0E58               	movlw	low STR_7
  1524  000926  6E2A               	movwf	printf@cp,c
  1525  000928  0E08               	movlw	high STR_7
  1526  00092A  6E2B               	movwf	printf@cp+1,c
  1527  00092C                     l164:
  1528                           
  1529                           ;doprnt.c: 745: len = 0;
  1530  00092C  0E00               	movlw	0
  1531  00092E  6E30               	movwf	printf@len+1,c
  1532  000930  0E00               	movlw	0
  1533  000932  6E2F               	movwf	printf@len,c
  1534                           
  1535                           ;doprnt.c: 746: while(cp[len])
  1536  000934  D002               	goto	l165
  1537  000936                     
  1538                           ;doprnt.c: 747: len++;
  1539  000936  4A2F               	infsnz	printf@len,f,c
  1540  000938  2A30               	incf	printf@len+1,f,c
  1541  00093A                     l165:
  1542  00093A  502F               	movf	printf@len,w,c
  1543  00093C  242A               	addwf	printf@cp,w,c
  1544  00093E  6E23               	movwf	??_printf& (0+255),c
  1545  000940  5030               	movf	printf@len+1,w,c
  1546  000942  202B               	addwfc	printf@cp+1,w,c
  1547  000944  6E24               	movwf	(??_printf+1)& (0+255),c
  1548  000946  C023  FFF6         	movff	??_printf,tblptrl
  1549  00094A  C024  FFF7         	movff	??_printf+1,tblptrh
  1550  00094E  6AF8               	clrf	tblptru,c
  1551  000950  0E07               	movlw	(high __ramtop+-1)
  1552  000952  64F7               	cpfsgt	tblptrh,c
  1553  000954  D003               	bra	u557
  1554  000956  0008               	tblrd		*
  1555  000958  50F5               	movf	tablat,w,c
  1556  00095A  D005               	bra	u550
  1557  00095C                     u557:
  1558  00095C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1559  000960  CFF7 FFEA          	movff	tblptrh,fsr0h
  1560  000964  50EF               	movf	indf0,w,c
  1561  000966                     u550:
  1562  000966  0900               	iorlw	0
  1563  000968  A4D8               	btfss	status,2,c
  1564  00096A  D7E5               	goto	l166
  1565  00096C                     u560:
  1566                           
  1567                           ;doprnt.c: 757: if(width > len)
  1568                           
  1569                           ;doprnt.c: 750: dostring:
  1570  00096C  5031               	movf	printf@width,w,c
  1571  00096E  5C2F               	subwf	printf@len,w,c
  1572  000970  5032               	movf	printf@width+1,w,c
  1573  000972  5830               	subwfb	printf@len+1,w,c
  1574  000974  B0D8               	btfsc	status,0,c
  1575  000976  D005               	goto	l169
  1576                           
  1577                           ;doprnt.c: 758: width -= len;
  1578  000978  502F               	movf	printf@len,w,c
  1579  00097A  5E31               	subwf	printf@width,f,c
  1580  00097C  5030               	movf	printf@len+1,w,c
  1581  00097E  5A32               	subwfb	printf@width+1,f,c
  1582  000980  D008               	goto	l171
  1583  000982                     l169:
  1584                           
  1585                           ;doprnt.c: 759: else
  1586                           ;doprnt.c: 760: width = 0;
  1587  000982  0E00               	movlw	0
  1588  000984  6E32               	movwf	printf@width+1,c
  1589  000986  0E00               	movlw	0
  1590  000988  6E31               	movwf	printf@width,c
  1591                           
  1592                           ;doprnt.c: 764: while(width--)
  1593  00098A  D003               	goto	l171
  1594  00098C                     l1307:
  1595                           
  1596                           ;doprnt.c: 765: (putch(' ') );
  1597  00098C  0E20               	movlw	32
  1598  00098E  EC69  F007         	call	_putch
  1599  000992                     l171:
  1600  000992  0631               	decf	printf@width,f,c
  1601  000994  A0D8               	btfss	status,0,c
  1602  000996  0632               	decf	printf@width+1,f,c
  1603  000998  2831               	incf	printf@width,w,c
  1604  00099A  E1F8               	bnz	l1307
  1605  00099C  2832               	incf	printf@width+1,w,c
  1606  00099E  B4D8               	btfsc	status,2,c
  1607  0009A0  D015               	goto	l174
  1608  0009A2  D7F4               	goto	l172
  1609  0009A4                     l1311:
  1610                           
  1611                           ;doprnt.c: 768: (putch(*cp++) );
  1612  0009A4  C02A  FFF6         	movff	printf@cp,tblptrl
  1613  0009A8  C02B  FFF7         	movff	printf@cp+1,tblptrh
  1614  0009AC  6AF8               	clrf	tblptru,c
  1615  0009AE  0E07               	movlw	(high __ramtop+-1)
  1616  0009B0  64F7               	cpfsgt	tblptrh,c
  1617  0009B2  D003               	bra	u597
  1618  0009B4  0008               	tblrd		*
  1619  0009B6  50F5               	movf	tablat,w,c
  1620  0009B8  D005               	bra	u590
  1621  0009BA                     u597:
  1622  0009BA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1623  0009BE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1624  0009C2  50EF               	movf	indf0,w,c
  1625  0009C4                     u590:
  1626  0009C4  EC69  F007         	call	_putch
  1627  0009C8  4A2A               	infsnz	printf@cp,f,c
  1628  0009CA  2A2B               	incf	printf@cp+1,f,c
  1629  0009CC                     l174:
  1630  0009CC  062F               	decf	printf@len,f,c
  1631  0009CE  A0D8               	btfss	status,0,c
  1632  0009D0  0630               	decf	printf@len+1,f,c
  1633  0009D2  282F               	incf	printf@len,w,c
  1634  0009D4  E1E7               	bnz	l1311
  1635  0009D6  2830               	incf	printf@len+1,w,c
  1636  0009D8  B4D8               	btfsc	status,2,c
  1637  0009DA  D0C6               	goto	u720
  1638  0009DC  D7E3               	goto	l175
  1639  0009DE                     
  1640                           ;doprnt.c: 805: cp = (char *)&c;
  1641  0009DE  0E33               	movlw	low printf@c
  1642  0009E0  6E2A               	movwf	printf@cp,c
  1643  0009E2  0E00               	movlw	high printf@c
  1644  0009E4  6E2B               	movwf	printf@cp+1,c
  1645                           
  1646                           ;doprnt.c: 806: len = 1;
  1647  0009E6  0E00               	movlw	0
  1648  0009E8  6E30               	movwf	printf@len+1,c
  1649  0009EA  0E01               	movlw	1
  1650  0009EC  6E2F               	movwf	printf@len,c
  1651                           
  1652                           ;doprnt.c: 807: goto dostring;
  1653  0009EE  D7BE               	goto	u560
  1654  0009F0                     
  1655                           ;doprnt.c: 818: flag |= 0x40;
  1656  0009F0  8C2C               	bsf	printf@flag,6,c
  1657                           
  1658                           ;doprnt.c: 822: }
  1659                           
  1660                           ;doprnt.c: 819: break;
  1661  0009F2  D01A               	goto	l162
  1662  0009F4                     l157:
  1663  0009F4  C01F  FFF6         	movff	printf@f,tblptrl
  1664  0009F8  C020  FFF7         	movff	printf@f+1,tblptrh
  1665  0009FC  4A1F               	infsnz	printf@f,f,c
  1666  0009FE  2A20               	incf	printf@f+1,f,c
  1667  000A00                     	if	0	;tblptru may be non-zero
  1668  000A00                     	endif
  1669  000A00                     	if	0	;tblptru may be non-zero
  1670  000A00                     	endif
  1671  000A00  0008               	tblrd		*
  1672  000A02  CFF5 F033          	movff	tablat,printf@c
  1673  000A06  5033               	movf	printf@c,w,c
  1674                           
  1675                           ; Switch size 1, requested type "space"
  1676                           ; Number of cases is 5, Range of values is 0 to 117
  1677                           ; switch strategies available:
  1678                           ; Name         Instructions Cycles
  1679                           ; simple_byte           16     9 (average)
  1680                           ;	Chosen strategy is simple_byte
  1681  000A08  0A00               	xorlw	0	; case 0
  1682  000A0A  B4D8               	btfsc	status,2,c
  1683  000A0C  0012               	return	
  1684  000A0E  0A64               	xorlw	100	; case 100
  1685  000A10  B4D8               	btfsc	status,2,c
  1686  000A12  D00A               	goto	l162
  1687  000A14  0A0D               	xorlw	13	; case 105
  1688  000A16  B4D8               	btfsc	status,2,c
  1689  000A18  D007               	goto	l162
  1690  000A1A  0A1A               	xorlw	26	; case 115
  1691  000A1C  B4D8               	btfsc	status,2,c
  1692  000A1E  D772               	goto	l163
  1693  000A20  0A06               	xorlw	6	; case 117
  1694  000A22  B4D8               	btfsc	status,2,c
  1695  000A24  D7E5               	goto	l178
  1696  000A26  D7DB               	goto	l177
  1697  000A28                     l162:
  1698                           
  1699                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  1700  000A28  BC2C               	btfsc	printf@flag,6,c
  1701  000A2A  D015               	goto	l179
  1702                           
  1703                           ;doprnt.c: 1253: {
  1704                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1705  000A2C  C028  FFD9         	movff	printf@ap,fsr2l
  1706  000A30  C029  FFDA         	movff	printf@ap+1,fsr2h
  1707  000A34  CFDE F02D          	movff	postinc2,printf@val
  1708  000A38  CFDD F02E          	movff	postdec2,printf@val+1
  1709  000A3C  0E02               	movlw	2
  1710  000A3E  2628               	addwf	printf@ap,f,c
  1711  000A40  0E00               	movlw	0
  1712  000A42  2229               	addwfc	printf@ap+1,f,c
  1713                           
  1714                           ;doprnt.c: 1261: if((int)val < 0) {
  1715  000A44  AE2E               	btfss	printf@val+1,7,c
  1716  000A46  D013               	goto	l181
  1717                           
  1718                           ;doprnt.c: 1262: flag |= 0x03;
  1719  000A48  0E03               	movlw	3
  1720  000A4A  122C               	iorwf	printf@flag,f,c
  1721                           
  1722                           ;doprnt.c: 1263: val = -val;
  1723  000A4C  6C2D               	negf	printf@val,c
  1724  000A4E  1E2E               	comf	printf@val+1,f,c
  1725  000A50  B0D8               	btfsc	status,0,c
  1726  000A52  2A2E               	incf	printf@val+1,f,c
  1727                           
  1728                           ;doprnt.c: 1264: }
  1729                           ;doprnt.c: 1266: }
  1730  000A54  D00C               	goto	l181
  1731  000A56                     l179:
  1732                           
  1733                           ;doprnt.c: 1268: else
  1734                           ;doprnt.c: 1273: {
  1735                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1736  000A56  C028  FFD9         	movff	printf@ap,fsr2l
  1737  000A5A  C029  FFDA         	movff	printf@ap+1,fsr2h
  1738  000A5E  CFDE F02D          	movff	postinc2,printf@val
  1739  000A62  CFDD F02E          	movff	postdec2,printf@val+1
  1740  000A66  0E02               	movlw	2
  1741  000A68  2628               	addwf	printf@ap,f,c
  1742  000A6A  0E00               	movlw	0
  1743  000A6C  2229               	addwfc	printf@ap+1,f,c
  1744  000A6E                     l181:
  1745                           
  1746                           ;doprnt.c: 1287: }
  1747                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1748  000A6E  0E01               	movlw	1
  1749  000A70  6E33               	movwf	printf@c,c
  1750  000A72                     l1343:
  1751  000A72  0E05               	movlw	5
  1752  000A74  1833               	xorwf	printf@c,w,c
  1753  000A76  B4D8               	btfsc	status,2,c
  1754  000A78  D012               	goto	u650
  1755                           
  1756                           ;doprnt.c: 1306: if(val < dpowers[c])
  1757  000A7A  5033               	movf	printf@c,w,c
  1758  000A7C  0D02               	mullw	2
  1759  000A7E  0E01               	movlw	low _dpowers
  1760  000A80  24F3               	addwf	prodl,w,c
  1761  000A82  6EF6               	movwf	tblptrl,c
  1762  000A84  0E08               	movlw	high _dpowers
  1763  000A86  20F4               	addwfc	prodh,w,c
  1764  000A88  6EF7               	movwf	tblptrh,c
  1765  000A8A                     	if	0	;There are less than 3 active tblptr bytes
  1766  000A8A                     	endif
  1767  000A8A  0009               	tblrd		*+
  1768  000A8C  50F5               	movf	tablat,w,c
  1769  000A8E  5C2D               	subwf	printf@val,w,c
  1770  000A90  0009               	tblrd		*+
  1771  000A92  50F5               	movf	tablat,w,c
  1772  000A94  582E               	subwfb	printf@val+1,w,c
  1773  000A96  A0D8               	btfss	status,0,c
  1774  000A98  D002               	goto	u650
  1775                           
  1776                           ;doprnt.c: 1307: break;
  1777  000A9A  2A33               	incf	printf@c,f,c
  1778  000A9C  D7EA               	goto	l1343
  1779  000A9E                     u650:
  1780                           
  1781                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1782  000A9E  5031               	movf	printf@width,w,c
  1783  000AA0  1032               	iorwf	printf@width+1,w,c
  1784  000AA2  B4D8               	btfsc	status,2,c
  1785  000AA4  D009               	goto	l185
  1786  000AA6  C02C  F023         	movff	printf@flag,??_printf
  1787  000AAA  0E03               	movlw	3
  1788  000AAC  1623               	andwf	??_printf,f,c
  1789  000AAE  B4D8               	btfsc	status,2,c
  1790  000AB0  D003               	goto	l185
  1791                           
  1792                           ;doprnt.c: 1346: width--;
  1793  000AB2  0631               	decf	printf@width,f,c
  1794  000AB4  A0D8               	btfss	status,0,c
  1795  000AB6  0632               	decf	printf@width+1,f,c
  1796  000AB8                     l185:
  1797                           
  1798                           ;doprnt.c: 1381: if(width > c)
  1799  000AB8  0E80               	movlw	128
  1800  000ABA  BE33               	btfsc	printf@c,7,c
  1801  000ABC  0E7F               	movlw	127
  1802  000ABE  6E23               	movwf	??_printf& (0+255),c
  1803  000AC0  5031               	movf	printf@width,w,c
  1804  000AC2  5C33               	subwf	printf@c,w,c
  1805  000AC4  5032               	movf	printf@width+1,w,c
  1806  000AC6  0A80               	xorlw	128
  1807  000AC8  5823               	subwfb	??_printf& (0+255),w,c
  1808  000ACA  B0D8               	btfsc	status,0,c
  1809  000ACC  D007               	goto	l186
  1810                           
  1811                           ;doprnt.c: 1382: width -= c;
  1812  000ACE  5033               	movf	printf@c,w,c
  1813  000AD0  5E31               	subwf	printf@width,f,c
  1814  000AD2  0E00               	movlw	0
  1815  000AD4  BE33               	btfsc	printf@c,7,c
  1816  000AD6  0EFF               	movlw	255
  1817  000AD8  5A32               	subwfb	printf@width+1,f,c
  1818  000ADA  D004               	goto	l187
  1819  000ADC                     l186:
  1820                           
  1821                           ;doprnt.c: 1383: else
  1822                           ;doprnt.c: 1384: width = 0;
  1823  000ADC  0E00               	movlw	0
  1824  000ADE  6E32               	movwf	printf@width+1,c
  1825  000AE0  0E00               	movlw	0
  1826  000AE2  6E31               	movwf	printf@width,c
  1827  000AE4                     l187:
  1828                           
  1829                           ;doprnt.c: 1422: {
  1830                           ;doprnt.c: 1424: if(width
  1831                           ;doprnt.c: 1428: )
  1832  000AE4  5031               	movf	printf@width,w,c
  1833  000AE6  1032               	iorwf	printf@width+1,w,c
  1834  000AE8  B4D8               	btfsc	status,2,c
  1835  000AEA  D00A               	goto	u700
  1836  000AEC                     u690:
  1837                           
  1838                           ;doprnt.c: 1430: (putch(' ') );
  1839                           
  1840                           ;doprnt.c: 1429: do
  1841  000AEC  0E20               	movlw	32
  1842  000AEE  EC69  F007         	call	_putch
  1843                           
  1844                           ;doprnt.c: 1431: while(--width);
  1845  000AF2  0631               	decf	printf@width,f,c
  1846  000AF4  A0D8               	btfss	status,0,c
  1847  000AF6  0632               	decf	printf@width+1,f,c
  1848  000AF8  5031               	movf	printf@width,w,c
  1849  000AFA  1032               	iorwf	printf@width+1,w,c
  1850  000AFC  A4D8               	btfss	status,2,c
  1851  000AFE  D7F6               	goto	u690
  1852  000B00                     u700:
  1853                           
  1854                           ;doprnt.c: 1438: if(flag & 0x03)
  1855  000B00  C02C  F023         	movff	printf@flag,??_printf
  1856  000B04  0E03               	movlw	3
  1857  000B06  1623               	andwf	??_printf,f,c
  1858  000B08  B4D8               	btfsc	status,2,c
  1859  000B0A  D003               	goto	l191
  1860                           
  1861                           ;doprnt.c: 1439: (putch('-') );
  1862  000B0C  0E2D               	movlw	45
  1863  000B0E  EC69  F007         	call	_putch
  1864  000B12                     l191:
  1865                           
  1866                           ;doprnt.c: 1469: }
  1867                           ;doprnt.c: 1472: prec = c;
  1868  000B12  C033  F027         	movff	printf@c,printf@prec
  1869                           
  1870                           ;doprnt.c: 1474: while(prec--) {
  1871  000B16  D024               	goto	l192
  1872  000B18                     
  1873                           ;doprnt.c: 1478: {
  1874                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1875  000B18  5027               	movf	printf@prec,w,c
  1876  000B1A  0D02               	mullw	2
  1877  000B1C  0E01               	movlw	low _dpowers
  1878  000B1E  24F3               	addwf	prodl,w,c
  1879  000B20  6EF6               	movwf	tblptrl,c
  1880  000B22  0E08               	movlw	high _dpowers
  1881  000B24  20F4               	addwfc	prodh,w,c
  1882  000B26  6EF7               	movwf	tblptrh,c
  1883  000B28                     	if	0	;There are less than 3 active tblptr bytes
  1884  000B28                     	endif
  1885  000B28  0009               	tblrd		*+
  1886  000B2A  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1887  000B2E  000A               	tblrd		*-
  1888  000B30  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1889  000B34  C02D  F013         	movff	printf@val,___lwdiv@dividend
  1890  000B38  C02E  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1891  000B3C  EC1C  F007         	call	___lwdiv	;wreg free
  1892  000B40  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1893  000B44  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1894  000B48  0E00               	movlw	0
  1895  000B4A  6E1D               	movwf	___lwmod@divisor+1,c
  1896  000B4C  0E0A               	movlw	10
  1897  000B4E  6E1C               	movwf	___lwmod@divisor,c
  1898  000B50  EC8D  F007         	call	___lwmod	;wreg free
  1899  000B54  501A               	movf	?___lwmod,w,c
  1900  000B56  0F30               	addlw	48
  1901  000B58  6E33               	movwf	printf@c,c
  1902                           
  1903                           ;doprnt.c: 1523: }
  1904                           ;doprnt.c: 1524: (putch(c) );
  1905  000B5A  5033               	movf	printf@c,w,c
  1906  000B5C  EC69  F007         	call	_putch
  1907  000B60                     l192:
  1908  000B60  0627               	decf	printf@prec,f,c
  1909  000B62  2827               	incf	printf@prec,w,c
  1910  000B64  A4D8               	btfss	status,2,c
  1911  000B66  D7D8               	goto	l193
  1912  000B68                     u720:
  1913  000B68  C01F  FFF6         	movff	printf@f,tblptrl
  1914  000B6C  C020  FFF7         	movff	printf@f+1,tblptrh
  1915  000B70  4A1F               	infsnz	printf@f,f,c
  1916  000B72  2A20               	incf	printf@f+1,f,c
  1917  000B74                     	if	0	;tblptru may be non-zero
  1918  000B74                     	endif
  1919  000B74                     	if	0	;tblptru may be non-zero
  1920  000B74                     	endif
  1921  000B74  0008               	tblrd		*
  1922  000B76  CFF5 F033          	movff	tablat,printf@c
  1923  000B7A  5033               	movf	printf@c,w,c
  1924  000B7C  B4D8               	btfsc	status,2,c
  1925  000B7E  0012               	return	
  1926  000B80  D676               	goto	l152
  1927  000B82                     __end_of_printf:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           intcon	equ	0xFF2
  1936                           indf0	equ	0xFEF
  1937                           postinc0	equ	0xFEE
  1938                           fsr0h	equ	0xFEA
  1939                           fsr0l	equ	0xFE9
  1940                           wreg	equ	0xFE8
  1941                           postdec1	equ	0xFE5
  1942                           fsr1l	equ	0xFE1
  1943                           indf2	equ	0xFDF
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _putch *****************
  1951 ;; Defined at:
  1952 ;;		line 102 in file "main.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  msg             1    wreg     unsigned char 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  msg             1   19[COMRAM] unsigned char 
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0
  1967 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1968 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1969 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1970 ;;Total ram usage:        2 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    1
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_printf
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text8
  1981  000ED2                     __ptext8:
  1982                           	opt stack 0
  1983  000ED2                     _putch:
  1984                           	opt stack 28
  1985                           
  1986                           ;incstack = 0
  1987                           ;putch@msg stored from wreg
  1988  000ED2  6E14               	movwf	putch@msg,c
  1989                           
  1990                           ;main.c: 103: CCP2CON = 0x00;
  1991  000ED4  0E00               	movlw	0
  1992  000ED6  6EBA               	movwf	4026,c	;volatile
  1993                           
  1994                           ;main.c: 104: LCD.RS = 1;
  1995  000ED8  8A8A               	bsf	3978,5,c
  1996                           
  1997                           ;main.c: 105: LCD.CH = (msg >> 4);
  1998  000EDA  C014  F013         	movff	putch@msg,??_putch
  1999  000EDE  3A13               	swapf	??_putch,f,c
  2000  000EE0  0E0F               	movlw	15
  2001  000EE2  1613               	andwf	??_putch,f,c
  2002  000EE4  508A               	movf	3978,w,c
  2003  000EE6  1813               	xorwf	??_putch,w,c
  2004  000EE8  0BF0               	andlw	-16
  2005  000EEA  1813               	xorwf	??_putch,w,c
  2006  000EEC  6E8A               	movwf	3978,c
  2007                           
  2008                           ;main.c: 106: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  2009  000EEE  888A               	bsf	3978,4,c
  2010  000EF0  F000               	nop	
  2011                           
  2012                           ;main.c: 107: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  2013  000EF2  988A               	bcf	3978,4,c
  2014  000EF4  0E10               	movlw	16
  2015  000EF6                     u877:
  2016  000EF6  2EE8               	decfsz	wreg,f,c
  2017  000EF8  D7FE               	bra	u877
  2018  000EFA  D000               	nop2	
  2019                           
  2020                           ;main.c: 108: LCD.CH = msg;
  2021  000EFC  508A               	movf	3978,w,c
  2022  000EFE  1814               	xorwf	putch@msg,w,c
  2023  000F00  0BF0               	andlw	-16
  2024  000F02  1814               	xorwf	putch@msg,w,c
  2025  000F04  6E8A               	movwf	3978,c
  2026                           
  2027                           ;main.c: 109: LCD.EN = 1; _delay((unsigned long)((1)*(4000000/4000000.0)));
  2028  000F06  888A               	bsf	3978,4,c
  2029  000F08  F000               	nop	
  2030                           
  2031                           ;main.c: 110: LCD.EN = 0; _delay((unsigned long)((50)*(4000000/4000000.0)));
  2032  000F0A  988A               	bcf	3978,4,c
  2033  000F0C  0E10               	movlw	16
  2034  000F0E                     u887:
  2035  000F0E  2EE8               	decfsz	wreg,f,c
  2036  000F10  D7FE               	bra	u887
  2037  000F12  D000               	nop2	
  2038                           
  2039                           ;main.c: 111: CCP2CON = 0x0F;
  2040  000F14  0E0F               	movlw	15
  2041  000F16  6EBA               	movwf	4026,c	;volatile
  2042  000F18  0012               	return	
  2043  000F1A                     __end_of_putch:
  2044                           	opt stack 0
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           prodh	equ	0xFF4
  2050                           prodl	equ	0xFF3
  2051                           intcon	equ	0xFF2
  2052                           indf0	equ	0xFEF
  2053                           postinc0	equ	0xFEE
  2054                           fsr0h	equ	0xFEA
  2055                           fsr0l	equ	0xFE9
  2056                           wreg	equ	0xFE8
  2057                           postdec1	equ	0xFE5
  2058                           fsr1l	equ	0xFE1
  2059                           indf2	equ	0xFDF
  2060                           postinc2	equ	0xFDE
  2061                           postdec2	equ	0xFDD
  2062                           fsr2h	equ	0xFDA
  2063                           fsr2l	equ	0xFD9
  2064                           status	equ	0xFD8
  2065                           
  2066 ;; *************** function _isdigit *****************
  2067 ;; Defined at:
  2068 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  c               1    wreg     unsigned char 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  c               1   20[COMRAM] unsigned char 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;		None               void
  2075 ;; Registers used:
  2076 ;;		wreg, status,2, status,0
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2082 ;;      Params:         0       0       0       0       0       0       0       0       0
  2083 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2084 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2085 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2086 ;;Total ram usage:        3 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    1
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_printf
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text9
  2097  00100C                     __ptext9:
  2098                           	opt stack 0
  2099  00100C                     _isdigit:
  2100                           	opt stack 28
  2101                           
  2102                           ;incstack = 0
  2103                           ;isdigit@c stored from wreg
  2104  00100C  6E15               	movwf	isdigit@c,c
  2105  00100E  0E00               	movlw	0
  2106  001010  6E14               	movwf	_isdigit$362,c
  2107  001012  0E3A               	movlw	58
  2108  001014  6015               	cpfslt	isdigit@c,c
  2109  001016  D005               	goto	l526
  2110  001018  0E2F               	movlw	47
  2111  00101A  6415               	cpfsgt	isdigit@c,c
  2112  00101C  D002               	goto	l526
  2113  00101E  0E01               	movlw	1
  2114  001020  6E14               	movwf	_isdigit$362,c
  2115  001022                     l526:
  2116  001022  C014  F013         	movff	_isdigit$362,??_isdigit
  2117  001026  3013               	rrcf	??_isdigit,w,c
  2118  001028  0012               	return	
  2119  00102A                     __end_of_isdigit:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           intcon	equ	0xFF2
  2128                           indf0	equ	0xFEF
  2129                           postinc0	equ	0xFEE
  2130                           fsr0h	equ	0xFEA
  2131                           fsr0l	equ	0xFE9
  2132                           wreg	equ	0xFE8
  2133                           postdec1	equ	0xFE5
  2134                           fsr1l	equ	0xFE1
  2135                           indf2	equ	0xFDF
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function ___wmul *****************
  2143 ;; Defined at:
  2144 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  multiplier      2   18[COMRAM] unsigned int 
  2147 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  product         2   22[COMRAM] unsigned int 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  2   18[COMRAM] unsigned int 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, prodl, prodh
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2159 ;;      Params:         4       0       0       0       0       0       0       0       0
  2160 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2162 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2163 ;;Total ram usage:        6 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    1
  2166 ;; This function calls:
  2167 ;;		Nothing
  2168 ;; This function is called by:
  2169 ;;		_printf
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text10
  2174  000FC4                     __ptext10:
  2175                           	opt stack 0
  2176  000FC4                     ___wmul:
  2177                           	opt stack 28
  2178                           
  2179                           ;incstack = 0
  2180  000FC4  5013               	movf	___wmul@multiplier,w,c
  2181  000FC6  0215               	mulwf	___wmul@multiplicand,c
  2182  000FC8  CFF3 F017          	movff	prodl,___wmul@product
  2183  000FCC  CFF4 F018          	movff	prodh,___wmul@product+1
  2184  000FD0  5013               	movf	___wmul@multiplier,w,c
  2185  000FD2  0216               	mulwf	___wmul@multiplicand+1,c
  2186  000FD4  50F3               	movf	prodl,w,c
  2187  000FD6  2618               	addwf	___wmul@product+1,f,c
  2188  000FD8  5014               	movf	___wmul@multiplier+1,w,c
  2189  000FDA  0215               	mulwf	___wmul@multiplicand,c
  2190  000FDC  50F3               	movf	prodl,w,c
  2191  000FDE  2618               	addwf	___wmul@product+1,f,c
  2192  000FE0  C017  F013         	movff	___wmul@product,?___wmul
  2193  000FE4  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2194  000FE8  0012               	return	
  2195  000FEA                     __end_of___wmul:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           prodh	equ	0xFF4
  2202                           prodl	equ	0xFF3
  2203                           intcon	equ	0xFF2
  2204                           indf0	equ	0xFEF
  2205                           postinc0	equ	0xFEE
  2206                           fsr0h	equ	0xFEA
  2207                           fsr0l	equ	0xFE9
  2208                           wreg	equ	0xFE8
  2209                           postdec1	equ	0xFE5
  2210                           fsr1l	equ	0xFE1
  2211                           indf2	equ	0xFDF
  2212                           postinc2	equ	0xFDE
  2213                           postdec2	equ	0xFDD
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function ___lwmod *****************
  2219 ;; Defined at:
  2220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  dividend        2   25[COMRAM] unsigned int 
  2223 ;;  divisor         2   27[COMRAM] unsigned int 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  counter         1   29[COMRAM] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  2   25[COMRAM] unsigned int 
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2235 ;;      Params:         4       0       0       0       0       0       0       0       0
  2236 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2238 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2239 ;;Total ram usage:        5 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    1
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_printf
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text11
  2250  000F1A                     __ptext11:
  2251                           	opt stack 0
  2252  000F1A                     ___lwmod:
  2253                           	opt stack 28
  2254                           
  2255                           ;incstack = 0
  2256  000F1A  501C               	movf	___lwmod@divisor,w,c
  2257  000F1C  101D               	iorwf	___lwmod@divisor+1,w,c
  2258  000F1E  B4D8               	btfsc	status,2,c
  2259  000F20  D018               	goto	l620
  2260  000F22  0E01               	movlw	1
  2261  000F24  6E1E               	movwf	___lwmod@counter,c
  2262  000F26  D004               	goto	l615
  2263  000F28  90D8               	bcf	status,0,c
  2264  000F2A  361C               	rlcf	___lwmod@divisor,f,c
  2265  000F2C  361D               	rlcf	___lwmod@divisor+1,f,c
  2266  000F2E  2A1E               	incf	___lwmod@counter,f,c
  2267  000F30                     l615:
  2268  000F30  AE1D               	btfss	___lwmod@divisor+1,7,c
  2269  000F32  D7FA               	goto	l616
  2270  000F34                     u490:
  2271  000F34  501C               	movf	___lwmod@divisor,w,c
  2272  000F36  5C1A               	subwf	___lwmod@dividend,w,c
  2273  000F38  501D               	movf	___lwmod@divisor+1,w,c
  2274  000F3A  581B               	subwfb	___lwmod@dividend+1,w,c
  2275  000F3C  A0D8               	btfss	status,0,c
  2276  000F3E  D004               	goto	l619
  2277  000F40  501C               	movf	___lwmod@divisor,w,c
  2278  000F42  5E1A               	subwf	___lwmod@dividend,f,c
  2279  000F44  501D               	movf	___lwmod@divisor+1,w,c
  2280  000F46  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2281  000F48                     l619:
  2282  000F48  90D8               	bcf	status,0,c
  2283  000F4A  321D               	rrcf	___lwmod@divisor+1,f,c
  2284  000F4C  321C               	rrcf	___lwmod@divisor,f,c
  2285  000F4E  2E1E               	decfsz	___lwmod@counter,f,c
  2286  000F50  D7F1               	goto	u490
  2287  000F52                     l620:
  2288  000F52  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2289  000F56  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2290  000F5A  0012               	return		;funcret
  2291  000F5C                     __end_of___lwmod:
  2292                           	opt stack 0
  2293                           tblptru	equ	0xFF8
  2294                           tblptrh	equ	0xFF7
  2295                           tblptrl	equ	0xFF6
  2296                           tablat	equ	0xFF5
  2297                           prodh	equ	0xFF4
  2298                           prodl	equ	0xFF3
  2299                           intcon	equ	0xFF2
  2300                           indf0	equ	0xFEF
  2301                           postinc0	equ	0xFEE
  2302                           fsr0h	equ	0xFEA
  2303                           fsr0l	equ	0xFE9
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           fsr1l	equ	0xFE1
  2307                           indf2	equ	0xFDF
  2308                           postinc2	equ	0xFDE
  2309                           postdec2	equ	0xFDD
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function ___lwdiv *****************
  2315 ;; Defined at:
  2316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  dividend        2   18[COMRAM] unsigned int 
  2319 ;;  divisor         2   20[COMRAM] unsigned int 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  quotient        2   22[COMRAM] unsigned int 
  2322 ;;  counter         1   24[COMRAM] unsigned char 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  2   18[COMRAM] unsigned int 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2, status,0
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2332 ;;      Params:         4       0       0       0       0       0       0       0       0
  2333 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2335 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2336 ;;Total ram usage:        7 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    1
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_printf
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text12
  2347  000E38                     __ptext12:
  2348                           	opt stack 0
  2349  000E38                     ___lwdiv:
  2350                           	opt stack 28
  2351                           
  2352                           ;incstack = 0
  2353  000E38  0E00               	movlw	0
  2354  000E3A  6E18               	movwf	___lwdiv@quotient+1,c
  2355  000E3C  0E00               	movlw	0
  2356  000E3E  6E17               	movwf	___lwdiv@quotient,c
  2357  000E40  5015               	movf	___lwdiv@divisor,w,c
  2358  000E42  1016               	iorwf	___lwdiv@divisor+1,w,c
  2359  000E44  B4D8               	btfsc	status,2,c
  2360  000E46  D01C               	goto	l610
  2361  000E48  0E01               	movlw	1
  2362  000E4A  6E19               	movwf	___lwdiv@counter,c
  2363  000E4C  D004               	goto	l605
  2364  000E4E  90D8               	bcf	status,0,c
  2365  000E50  3615               	rlcf	___lwdiv@divisor,f,c
  2366  000E52  3616               	rlcf	___lwdiv@divisor+1,f,c
  2367  000E54  2A19               	incf	___lwdiv@counter,f,c
  2368  000E56                     l605:
  2369  000E56  AE16               	btfss	___lwdiv@divisor+1,7,c
  2370  000E58  D7FA               	goto	l606
  2371  000E5A                     u460:
  2372  000E5A  90D8               	bcf	status,0,c
  2373  000E5C  3617               	rlcf	___lwdiv@quotient,f,c
  2374  000E5E  3618               	rlcf	___lwdiv@quotient+1,f,c
  2375  000E60  5015               	movf	___lwdiv@divisor,w,c
  2376  000E62  5C13               	subwf	___lwdiv@dividend,w,c
  2377  000E64  5016               	movf	___lwdiv@divisor+1,w,c
  2378  000E66  5814               	subwfb	___lwdiv@dividend+1,w,c
  2379  000E68  A0D8               	btfss	status,0,c
  2380  000E6A  D005               	goto	l609
  2381  000E6C  5015               	movf	___lwdiv@divisor,w,c
  2382  000E6E  5E13               	subwf	___lwdiv@dividend,f,c
  2383  000E70  5016               	movf	___lwdiv@divisor+1,w,c
  2384  000E72  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2385  000E74  8017               	bsf	___lwdiv@quotient,0,c
  2386  000E76                     l609:
  2387  000E76  90D8               	bcf	status,0,c
  2388  000E78  3216               	rrcf	___lwdiv@divisor+1,f,c
  2389  000E7A  3215               	rrcf	___lwdiv@divisor,f,c
  2390  000E7C  2E19               	decfsz	___lwdiv@counter,f,c
  2391  000E7E  D7ED               	goto	u460
  2392  000E80                     l610:
  2393  000E80  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2394  000E84  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2395  000E88  0012               	return		;funcret
  2396  000E8A                     __end_of___lwdiv:
  2397                           	opt stack 0
  2398                           tblptru	equ	0xFF8
  2399                           tblptrh	equ	0xFF7
  2400                           tblptrl	equ	0xFF6
  2401                           tablat	equ	0xFF5
  2402                           prodh	equ	0xFF4
  2403                           prodl	equ	0xFF3
  2404                           intcon	equ	0xFF2
  2405                           indf0	equ	0xFEF
  2406                           postinc0	equ	0xFEE
  2407                           fsr0h	equ	0xFEA
  2408                           fsr0l	equ	0xFE9
  2409                           wreg	equ	0xFE8
  2410                           postdec1	equ	0xFE5
  2411                           fsr1l	equ	0xFE1
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           fsr2h	equ	0xFDA
  2416                           fsr2l	equ	0xFD9
  2417                           status	equ	0xFD8
  2418                           
  2419 ;; *************** function _beep *****************
  2420 ;; Defined at:
  2421 ;;		line 95 in file "main.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;		None
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  j               2   18[COMRAM] int 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      void 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2435 ;;      Params:         0       0       0       0       0       0       0       0       0
  2436 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2438 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2439 ;;Total ram usage:        2 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_main
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text13
  2450  000F90                     __ptext13:
  2451                           	opt stack 0
  2452  000F90                     _beep:
  2453                           	opt stack 29
  2454                           
  2455                           ;main.c: 96: for (int j = 0; j < 100; ++j) {
  2456                           
  2457                           ;incstack = 0
  2458  000F90  0E00               	movlw	0
  2459  000F92  6E14               	movwf	beep@j+1,c
  2460  000F94  0E00               	movlw	0
  2461  000F96  6E13               	movwf	beep@j,c
  2462  000F98                     l1061:
  2463  000F98  BE14               	btfsc	beep@j+1,7,c
  2464  000F9A  D006               	goto	l75
  2465  000F9C  5014               	movf	beep@j+1,w,c
  2466  000F9E  E111               	bnz	l77
  2467  000FA0  0E64               	movlw	100
  2468  000FA2  5C13               	subwf	beep@j,w,c
  2469  000FA4  B0D8               	btfsc	status,0,c
  2470  000FA6  0012               	return	
  2471  000FA8                     l75:
  2472                           
  2473                           ;main.c: 97: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  2474  000FA8  8C8A               	bsf	3978,6,c
  2475  000FAA  0EC8               	movlw	200
  2476  000FAC                     u897:
  2477  000FAC  D000               	nop2	
  2478  000FAE  2EE8               	decfsz	wreg,f,c
  2479  000FB0  D7FD               	bra	u897
  2480                           
  2481                           ;main.c: 98: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  2482  000FB2  9C8A               	bcf	3978,6,c
  2483  000FB4  0EA6               	movlw	166
  2484  000FB6                     u907:
  2485  000FB6  2EE8               	decfsz	wreg,f,c
  2486  000FB8  D7FE               	bra	u907
  2487  000FBA  D000               	nop2	
  2488  000FBC  4A13               	infsnz	beep@j,f,c
  2489  000FBE  2A14               	incf	beep@j+1,f,c
  2490  000FC0  D7EB               	goto	l1061
  2491  000FC2                     l77:
  2492  000FC2  0012               	return		;funcret
  2493  000FC4                     __end_of_beep:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           intcon	equ	0xFF2
  2502                           indf0	equ	0xFEF
  2503                           postinc0	equ	0xFEE
  2504                           fsr0h	equ	0xFEA
  2505                           fsr0l	equ	0xFE9
  2506                           wreg	equ	0xFE8
  2507                           postdec1	equ	0xFE5
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _tmr_overflow *****************
  2517 ;; Defined at:
  2518 ;;		line 170 in file "main.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2534 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2535 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2536 ;;Total ram usage:       18 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		Interrupt level 2
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	intcode
  2546  000008                     __pintcode:
  2547                           	opt stack 0
  2548  000008                     _tmr_overflow:
  2549                           	opt stack 27
  2550                           
  2551                           ;incstack = 0
  2552  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2553  00000A  ED91  F006         	call	int_func,f	;refresh shadow registers
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           prodh	equ	0xFF4
  2559                           prodl	equ	0xFF3
  2560                           intcon	equ	0xFF2
  2561                           indf0	equ	0xFEF
  2562                           postinc0	equ	0xFEE
  2563                           fsr0h	equ	0xFEA
  2564                           fsr0l	equ	0xFE9
  2565                           wreg	equ	0xFE8
  2566                           postdec1	equ	0xFE5
  2567                           fsr1l	equ	0xFE1
  2568                           indf2	equ	0xFDF
  2569                           postinc2	equ	0xFDE
  2570                           postdec2	equ	0xFDD
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575                           	psect	intcode_body
  2576  000D22                     __pintcode_body:
  2577                           	opt stack 27
  2578  000D22                     int_func:
  2579                           	opt stack 27
  2580  000D22  0006               	pop		; remove dummy address from shadow register refresh
  2581  000D24  CFFA F001          	movff	pclath,??_tmr_overflow
  2582  000D28  CFFB F002          	movff	pclatu,??_tmr_overflow+1
  2583  000D2C  CFE9 F003          	movff	fsr0l,??_tmr_overflow+2
  2584  000D30  CFEA F004          	movff	fsr0h,??_tmr_overflow+3
  2585  000D34  CFE1 F005          	movff	fsr1l,??_tmr_overflow+4
  2586  000D38  CFE2 F006          	movff	fsr1h,??_tmr_overflow+5
  2587  000D3C  CFD9 F007          	movff	fsr2l,??_tmr_overflow+6
  2588  000D40  CFDA F008          	movff	fsr2h,??_tmr_overflow+7
  2589  000D44  CFF3 F009          	movff	prodl,??_tmr_overflow+8
  2590  000D48  CFF4 F00A          	movff	prodh,??_tmr_overflow+9
  2591  000D4C  CFF6 F00B          	movff	tblptrl,??_tmr_overflow+10
  2592  000D50  CFF7 F00C          	movff	tblptrh,??_tmr_overflow+11
  2593  000D54  CFF8 F00D          	movff	tblptru,??_tmr_overflow+12
  2594  000D58  CFF5 F00E          	movff	tablat,??_tmr_overflow+13
  2595  000D5C  C04D  F00F         	movff	btemp,??_tmr_overflow+14
  2596  000D60  C04E  F010         	movff	btemp+1,??_tmr_overflow+15
  2597  000D64  C04F  F011         	movff	btemp+2,??_tmr_overflow+16
  2598  000D68  C050  F012         	movff	btemp+3,??_tmr_overflow+17
  2599                           
  2600                           ;main.c: 171: if (ALIVE) {
  2601  000D6C  504A               	movf	_ALIVE,w,c
  2602  000D6E  B4D8               	btfsc	status,2,c
  2603  000D70  D003               	goto	i2l113
  2604                           
  2605                           ;main.c: 172: BUZ = 1;
  2606  000D72  8C8A               	bsf	3978,6,c
  2607                           
  2608                           ;main.c: 173: ERR = TMR0OF;
  2609  000D74  0E00               	movlw	0
  2610  000D76  6E38               	movwf	_ERR,c	;volatile
  2611  000D78                     i2l113:
  2612                           
  2613                           ;main.c: 174: }
  2614                           ;main.c: 175: TMR0IF = 0;
  2615  000D78  94F2               	bcf	intcon,2,c	;volatile
  2616                           
  2617                           ;main.c: 176: return;
  2618  000D7A  C012  F050         	movff	??_tmr_overflow+17,btemp+3
  2619  000D7E  C011  F04F         	movff	??_tmr_overflow+16,btemp+2
  2620  000D82  C010  F04E         	movff	??_tmr_overflow+15,btemp+1
  2621  000D86  C00F  F04D         	movff	??_tmr_overflow+14,btemp
  2622  000D8A  C00E  FFF5         	movff	??_tmr_overflow+13,tablat
  2623  000D8E  C00D  FFF8         	movff	??_tmr_overflow+12,tblptru
  2624  000D92  C00C  FFF7         	movff	??_tmr_overflow+11,tblptrh
  2625  000D96  C00B  FFF6         	movff	??_tmr_overflow+10,tblptrl
  2626  000D9A  C00A  FFF4         	movff	??_tmr_overflow+9,prodh
  2627  000D9E  C009  FFF3         	movff	??_tmr_overflow+8,prodl
  2628  000DA2  C008  FFDA         	movff	??_tmr_overflow+7,fsr2h
  2629  000DA6  C007  FFD9         	movff	??_tmr_overflow+6,fsr2l
  2630  000DAA  C006  FFE2         	movff	??_tmr_overflow+5,fsr1h
  2631  000DAE  C005  FFE1         	movff	??_tmr_overflow+4,fsr1l
  2632  000DB2  C004  FFEA         	movff	??_tmr_overflow+3,fsr0h
  2633  000DB6  C003  FFE9         	movff	??_tmr_overflow+2,fsr0l
  2634  000DBA  C002  FFFB         	movff	??_tmr_overflow+1,pclatu
  2635  000DBE  C001  FFFA         	movff	??_tmr_overflow,pclath
  2636  000DC2  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2637  000DC4  0011               	retfie		f
  2638  000DC6                     __end_of_tmr_overflow:
  2639                           	opt stack 0
  2640                           pclatu	equ	0xFFB
  2641                           pclath	equ	0xFFA
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           indf0	equ	0xFEF
  2650                           postinc0	equ	0xFEE
  2651                           fsr0h	equ	0xFEA
  2652                           fsr0l	equ	0xFE9
  2653                           wreg	equ	0xFE8
  2654                           postdec1	equ	0xFE5
  2655                           fsr1h	equ	0xFE2
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           pclatu	equ	0xFFB
  2664                           pclath	equ	0xFFA
  2665                           tblptru	equ	0xFF8
  2666                           tblptrh	equ	0xFF7
  2667                           tblptrl	equ	0xFF6
  2668                           tablat	equ	0xFF5
  2669                           prodh	equ	0xFF4
  2670                           prodl	equ	0xFF3
  2671                           intcon	equ	0xFF2
  2672                           indf0	equ	0xFEF
  2673                           postinc0	equ	0xFEE
  2674                           fsr0h	equ	0xFEA
  2675                           fsr0l	equ	0xFE9
  2676                           wreg	equ	0xFE8
  2677                           postdec1	equ	0xFE5
  2678                           fsr1h	equ	0xFE2
  2679                           fsr1l	equ	0xFE1
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687                           	psect	rparam
  2688  0000                     pclatu	equ	0xFFB
  2689                           pclath	equ	0xFFA
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           intcon	equ	0xFF2
  2697                           indf0	equ	0xFEF
  2698                           postinc0	equ	0xFEE
  2699                           fsr0h	equ	0xFEA
  2700                           fsr0l	equ	0xFE9
  2701                           wreg	equ	0xFE8
  2702                           postdec1	equ	0xFE5
  2703                           fsr1h	equ	0xFE2
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712                           	psect	temp
  2713  00004D                     btemp:
  2714                           	opt stack 0
  2715  00004D                     	ds	1
  2716  0000                     int$flags	set	btemp
  2717  0000                     wtemp6	set	btemp+1
  2718                           pclatu	equ	0xFFB
  2719                           pclath	equ	0xFFA
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           intcon	equ	0xFF2
  2727                           indf0	equ	0xFEF
  2728                           postinc0	equ	0xFEE
  2729                           fsr0h	equ	0xFEA
  2730                           fsr0l	equ	0xFE9
  2731                           wreg	equ	0xFE8
  2732                           postdec1	equ	0xFE5
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           fsr2h	equ	0xFDA
  2739                           fsr2l	equ	0xFD9
  2740                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    18
    Data        18
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      76
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[7]), printf@c(COMRAM[1]), BUF(COMRAM[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[10]), STR_5(CODE[9]), STR_4(CODE[17]), STR_3(CODE[3]), 
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_init_lcd
    _read_tmr0->_rsend
    _init_lcd->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tmr_overflow in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _tmr_overflow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tmr_overflow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tmr_overflow in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tmr_overflow in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tmr_overflow in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tmr_overflow in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tmr_overflow in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tmr_overflow in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    5049
                                             52 COMRAM     3     3      0
                               _beep
                           _init_lcd
                             _printf
                           _prog_lcd
                          _read_tmr0
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      45
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr0                                            0     0      0      15
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0    2457
                                             51 COMRAM     1     1      0
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (1) _prog_lcd                                             2     2      0      30
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    21      4    2427
                                             30 COMRAM    21    17      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      30
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _beep                                                 2     2      0      30
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _tmr_overflow                                        18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _init_lcd
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _prog_lcd
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _prog_lcd
   _read_tmr0
     _rsend
   _rsget
   _write

 _tmr_overflow (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4C      20        0.0%
DATA                 0      0      4C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Dec 15 01:27:13 2017

                     l75 0FA8                       l77 0FC2                       _RC 004C  
    ___wmul@multiplicand 0015              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l104 0FFC                      l120 0C90                      l121 0C48  
                    l106 1006                      l131 0CB2                      l123 0C5A  
                    l124 0D0A                      l125 0CD2                      l133 0CBE  
                    l126 0CA4                      l119 0C22                      l152 086E  
                    l128 0D04                      l153 087E                      l129 0CAA  
                    l162 0A28                      l171 0992                      l163 0904  
                    l155 08A6                      l172 098C                      l164 092C  
                    l181 0A6E                      l157 09F4                      l165 093A  
                    l174 09CC                      l166 0936                      l191 0B12  
                    l175 09A4                      l192 0B60                      l193 0B18  
                    l185 0AB8                      l177 09DE                      l169 0982  
                    l610 0E80                      l186 0ADC                      l178 09F0  
                    l187 0AE4                      l179 0A56                      l620 0F52  
                    l605 0E56                      l606 0E4E                      l526 1022  
                    l615 0F30                      l616 0F28                      l609 0E76  
                    l619 0F48                      _FCY 080F                      _BUF 0039  
           __CFG_CPB$OFF 000000                      _LCD 000F8A                      _ERR 0038  
                    _BUZ 007C56                      _PR2 000FCB             __CFG_CPD$OFF 000000  
                    u460 0E5A                      u700 0B00                      u550 0966  
                    u720 0B68                      u560 096C                      u490 0F34  
                    u650 0A9E                      u557 095C                      u590 09C4  
                    u807 0BF0                      u817 0C02                      u690 0AEC  
                    u907 0FB6                      u827 0DCC                      u597 09BA  
                    u837 0DE2                      u847 0DFE                      u857 0EAE  
                    u867 0EC6                      u787 0BC8                      u877 0EF6  
                    u797 0BDE                      u887 0F0E                      u897 0FAC  
                    _PWM 000FBB             __CFG_BOR$OFF 000000                      prod 000FF3  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1061 0F98                     l1311 09A4  
                   l1055 1058                     l1307 098C                     l1343 0A72  
           _tmr_overflow 0008                     STR_1 0813                     STR_2 0835  
                   STR_3 085F                     STR_4 0824                     STR_5 084F  
                   STR_6 0845                     STR_7 0858                     _RCIF 007CF5  
                   _TMR0 000FD6                     _TMR1 000FCE                     _TXIF 007CF4  
                   _beep 0F90                     _main 0B82                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 004D                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
                  ?_beep 0001                    ?_main 0001                    _ALIVE 004A  
                  _T0CON 000FD5                    _T1FCY 080B                    _T1CON 000FCD  
                  _T2CON 000FCA          __end_of___lwdiv 0E8A                    _T0ZOH 004B  
                  i2l113 0D78          __end_of___lwmod 0F5C                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF            __CFG_USBDIV$1 000000  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TXREG 000FAD                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    beep@j 0013          __end_of_dpowers 080B  
        __end_of_isdigit 102A                    _rsend 1056                    _rsget 1062  
                  _putch 0ED2                    main@x 0037                    _write 0FEA  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 004E           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
        __initialization 0F5C             __end_of_beep 0FC4             __end_of_main 0D22  
                 ??_beep 0013                   ??_main 0035            __activetblptr 000002  
        __CFG_CCP2MX$OFF 000000                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _CCPR2L 000FBB                   ?_rsend 0001  
                 ?_rsget 0001                   ?_putch 0001                   ?_write 0001  
                 _INTCON 000FF2                   _TMR0IF 007F92                   _TMR1IF 007CF0  
         __CFG_XINST$OFF 000000                   ___wmul 0FC4           __CFG_STVREN$ON 000000  
              ??___lwdiv 0017                ??___lwmod 001E         __end_of_init_lcd 0E38  
                 _printf 0864             __pdataCOMRAM 0038                ??_isdigit 0013  
           __mediumconst 0000         __end_of_prog_lcd 0ED2                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0F82            ___rparam_used 000001            __end_of_T1FCY 080F  
         __pcstackCOMRAM 0001            __end_of_rsend 1062            __end_of_rsget 106A  
          __end_of_putch 0F1A            __end_of_write 100C                  ??_rsend 0013  
                ??_rsget 0013                  ??_putch 0013                  ??_write 0013  
     __size_of_read_tmr0 001A                  ?___wmul 0013                  _CCP2CON 000FBA  
                ?_printf 001F          __CFG_VREGEN$OFF 000000                ?_init_lcd 0001  
                __Hparam 0000                  __Lparam 0000                ?_prog_lcd 0001  
        __size_of___wmul 0026                  ___lwdiv 0E38                  ___lwmod 0F1A  
           __psmallconst 0800                  __pcinit 0F5C                  __ramtop 0800  
                __ptext0 0B82                  __ptext1 0FEA                  __ptext2 1062  
                __ptext3 102A                  __ptext4 1056                  __ptext5 0DC6  
                __ptext6 0E8A                  __ptext7 0864                  __ptext8 0ED2  
                __ptext9 100C          __size_of_printf 031E                  _dpowers 0801  
                _isdigit 100C        __end_of_read_tmr0 1044           __pintcode_body 0D22  
   end_of_initialization 0F82            __Lmediumconst 0000               ??_init_lcd 0034  
                int_func 0D22                  printf@c 0033                  printf@f 001F  
             ??_prog_lcd 0013                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE              prog_lcd@msg 0014  
            printf@width 0031           __end_of___wmul 0FEA            __pidataCOMRAM 1044  
         __end_of_printf 0B82      start_initialization 0F5C              __end_of_FCY 0813  
          ?_tmr_overflow 0001                 ??___wmul 0017         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0023              __pbssCOMRAM 004A           ??_tmr_overflow 0001  
      __size_of_init_lcd 0072         ___lwdiv@dividend 0013                __pintcode 0008  
               ?___lwdiv 0013                 ?___lwmod 001A        __size_of_prog_lcd 0048  
            __smallconst 0800                 ?_isdigit 0001         ___lwdiv@quotient 0017  
              _read_tmr0 102A           __size_of_rsend 000C           __size_of_rsget 0008  
         __size_of_putch 0048           __size_of_write 0022           ___wmul@product 0017  
       __CFG_WDTPS$32768 000000        ___wmul@multiplier 0013               printf@flag 002C  
             printf@prec 0027                copy_data0 0F70               ?_read_tmr0 0001  
               __Hrparam 0000                 __Lrparam 0000     __end_of_tmr_overflow 0DC6  
       __size_of___lwdiv 0052         __size_of___lwmod 0042              _isdigit$362 0014  
       __size_of_isdigit 001E          ___lwdiv@divisor 0015          ___lwdiv@counter 0019  
               __ptext10 0FC4                 __ptext11 0F1A                 __ptext12 0E38  
               __ptext13 0F90            __size_of_beep 0034                 _init_lcd 0DC6  
          __size_of_main 01A0                 _prog_lcd 0E8A                 int$flags 004D  
              printf@len 002F                printf@val 002D    __CFG_CPUDIV$OSC1_PLL2 000000  
               isdigit@c 0015              ??_read_tmr0 0014                 intlevel2 0000  
       ___lwmod@dividend 001A                write@duty 0013                 printf@ap 0028  
               printf@cp 002A                 rsend@msg 0013                 putch@msg 0014  
        ___lwmod@divisor 001C          ___lwmod@counter 001E    __size_of_tmr_overflow 0DBE  
