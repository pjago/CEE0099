

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Jan  3 13:23:43 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0253                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0253  3420               	retlw	32
   122  0254  3420               	retlw	32
   123  0255  3420               	retlw	32
   124  0256  3420               	retlw	32
   125  0257  3420               	retlw	32
   126  0258  3420               	retlw	32
   127  0259  3420               	retlw	32
   128  025A  3420               	retlw	32
   129  025B  3420               	retlw	32
   130  025C  3420               	retlw	32
   131  025D  3420               	retlw	32
   132  025E  3420               	retlw	32
   133  025F  3420               	retlw	32
   134  0260  3420               	retlw	32
   135  0261  3420               	retlw	32
   136  0262  3420               	retlw	32
   137  0263  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0001                     _TMR0	set	1
   141  0006                     _PORTB	set	6
   142  0018                     _RCSTA	set	24
   143  0012                     _T2CON	set	18
   144  001B                     _CCPR2L	set	27
   145  001D                     _CCP2CON	set	29
   146  0015                     _CCPR1L	set	21
   147  0017                     _CCP1CON	set	23
   148  0010                     _T1CON	set	16
   149  000B                     _INTCON	set	11
   150  001A                     _RCREG	set	26
   151  0019                     _TXREG	set	25
   152  002D                     _BUZ	set	45
   153  005A                     _TMR0IF	set	90
   154  0065                     _RCIF	set	101
   155  0064                     _TXIF	set	100
   156  0099                     _SPBRG	set	153
   157  0098                     _TXSTA	set	152
   158  0085                     _TRISA	set	133
   159  0086                     _TRISB	set	134
   160  0087                     _TRISC	set	135
   161  009F                     _ADCON1	set	159
   162  0092                     _PR2	set	146
   163  0081                     _OPTION_REG	set	129
   164                           
   165                           ; #config settings
   166  0000                     
   167                           	psect	cinit
   168  0015                     start_initialization:	
   169  0015                     __initialization:	
   170                           
   171                           ; Initialize objects allocated to BANK0
   172  0015  1383               	bcf	3,7	;select IRP bank0
   173  0016  3031               	movlw	low (__pdataBANK0+17)
   174  0017  00FD               	movwf	btemp+-1
   175  0018  3002               	movlw	high __pidataBANK0
   176  0019  00FE               	movwf	btemp
   177  001A  3053               	movlw	low __pidataBANK0
   178  001B  00FF               	movwf	btemp+1
   179  001C  3020               	movlw	low __pdataBANK0
   180  001D  0084               	movwf	4
   181  001E  120A  118A  2268   	fcall	init_ram0
   182                           
   183                           ; Clear objects allocated to BANK0
   184  0021  01BD               	clrf	__pbssBANK0& (0+127)
   185  0022  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   186  0023  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   187  0024  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   188  0025  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   189  0026  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   190  0027  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   191  0028  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   192  0029  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   193                           
   194                           ; Clear objects allocated to COMMON
   195  002A  01FA               	clrf	__pbssCOMMON& (0+127)
   196  002B  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   197  002C                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200  002C                     __end_of__initialization:	
   201  002C  0183               	clrf	3
   202  002D  120A  118A  2830   	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssCOMMON
   205  007A                     __pbssCOMMON:	
   206  007A                     _T1ZOH:	
   207  007A                     	ds	2
   208                           
   209                           	psect	bssBANK0
   210  003D                     __pbssBANK0:	
   211  003D                     _TMR1R:	
   212  003D                     	ds	2
   213  003F                     _T1ACC:	
   214  003F                     	ds	2
   215  0041                     _T1FOH:	
   216  0041                     	ds	2
   217  0043                     _T0PS:	
   218  0043                     	ds	1
   219  0044                     _kT0:	
   220  0044                     	ds	1
   221  0045                     _RC:	
   222  0045                     	ds	1
   223                           
   224                           	psect	dataBANK0
   225  0020                     __pdataBANK0:	
   226  0020                     _BUF:	
   227  0020                     	ds	17
   228                           
   229                           	psect	inittext
   230  0264                     init_fetch0:	
   231                           ;	Called with low address in FSR and high address in W
   232                           
   233  0264  087E               	movf	126,w
   234  0265  008A               	movwf	10
   235  0266  087F               	movf	127,w
   236  0267  0082               	movwf	2
   237  0268                     init_ram0:	
   238                           ;Called with:
   239                           ;	high address of idata address in btemp 
   240                           ;	low address of idata address in btemp+1 
   241                           ;	low address of data in FSR
   242                           ;	high address + 1 of data in btemp-1
   243                           
   244  0268  2264  120A  118A   	fcall	init_fetch0
   245  026B  0080               	movwf	0
   246  026C  0A84               	incf	4,f
   247  026D  0804               	movf	4,w
   248  026E  067D               	xorwf	125,w
   249  026F  1903               	btfsc	3,2
   250  0270  3400               	retlw	0
   251  0271  0AFF               	incf	127,f
   252  0272  1903               	btfsc	3,2
   253  0273  0AFE               	incf	126,f
   254  0274  2A68               	goto	init_ram0
   255                           
   256                           	psect	cstackCOMMON
   257  0070                     __pcstackCOMMON:	
   258  0070                     ?_beep:	
   259  0070                     ?_rsend:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_rsget:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_read_tmr1:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_write:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_oversampling:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ??_oversampling:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_main:	
   278                           ; 1 bytes @ 0x0
   279                           
   280                           
   281                           ; 2 bytes @ 0x0
   282  0070                     	ds	10
   283                           
   284                           	psect	cstackBANK0
   285  0031                     __pcstackBANK0:	
   286  0031                     ??_beep:	
   287  0031                     ??_rsend:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0031                     ??_rsget:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0031                     ??_write:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0031                     rsend@msg:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0031                     write@duty:	
   300                           ; 1 bytes @ 0x0
   301                           
   302                           
   303                           ; 1 bytes @ 0x0
   304  0031                     	ds	1
   305  0032                     ??_read_tmr1:	
   306  0032                     beep@dash:	
   307                           ; 1 bytes @ 0x1
   308                           
   309                           
   310                           ; 1 bytes @ 0x1
   311  0032                     	ds	1
   312  0033                     beep@j:	
   313                           
   314                           ; 2 bytes @ 0x2
   315  0033                     	ds	2
   316  0035                     beep@j_57:	
   317                           
   318                           ; 2 bytes @ 0x4
   319  0035                     	ds	2
   320  0037                     ??_main:	
   321                           
   322                           ; 1 bytes @ 0x6
   323  0037                     	ds	3
   324  003A                     main@x:	
   325                           
   326                           ; 1 bytes @ 0x9
   327  003A                     	ds	1
   328  003B                     main@msg:	
   329                           
   330                           ; 1 bytes @ 0xA
   331  003B                     	ds	1
   332  003C                     main@cmd:	
   333                           
   334                           ; 1 bytes @ 0xB
   335  003C                     	ds	1
   336                           
   337                           	psect	maintext
   338  0030                     __pmaintext:	
   339 ;;
   340 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   341 ;;
   342 ;; *************** function _main *****************
   343 ;; Defined at:
   344 ;;		line 87 in file "main.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;  cmd             1   11[BANK0 ] unsigned char 
   349 ;;  msg             1   10[BANK0 ] unsigned char 
   350 ;;  x               1    9[BANK0 ] unsigned char 
   351 ;; Return value:  Size  Location     Type
   352 ;;                  2  112[None  ] int 
   353 ;; Registers used:
   354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   355 ;; Tracked objects:
   356 ;;		On entry : B00/0
   357 ;;		On exit  : 0/0
   358 ;;		Unchanged: 0/0
   359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   360 ;;      Params:         0       0       0       0       0
   361 ;;      Locals:         0       3       0       0       0
   362 ;;      Temps:          0       3       0       0       0
   363 ;;      Totals:         0       6       0       0       0
   364 ;;Total ram usage:        6 bytes
   365 ;; Hardware stack levels required when called:    3
   366 ;; This function calls:
   367 ;;		_beep
   368 ;;		_read_tmr1
   369 ;;		_rsend
   370 ;;		_rsget
   371 ;;		_write
   372 ;; This function is called by:
   373 ;;		Startup code after reset
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           
   378                           ;psect for function _main
   379  0030                     _main:	
   380                           
   381                           ;main.c: 88: OPTION_REG = 0x83;
   382                           
   383                           ;incstack = 0
   384                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   385  0030  3083               	movlw	131
   386  0031  1683               	bsf	3,5	;RP0=1, select bank1
   387  0032  1303               	bcf	3,6	;RP1=0, select bank1
   388  0033  0081               	movwf	1	;volatile
   389                           
   390                           ;main.c: 89: INTCON = 0x80;
   391  0034  3080               	movlw	128
   392  0035  008B               	movwf	11	;volatile
   393                           
   394                           ;main.c: 90: T1CON = 0x03;
   395  0036  3003               	movlw	3
   396  0037  1283               	bcf	3,5	;RP0=0, select bank0
   397  0038  1303               	bcf	3,6	;RP1=0, select bank0
   398  0039  0090               	movwf	16	;volatile
   399                           
   400                           ;main.c: 91: CCP1CON = 0x0F;
   401  003A  300F               	movlw	15
   402  003B  0097               	movwf	23	;volatile
   403                           
   404                           ;main.c: 92: CCPR1L = 0;
   405  003C  0195               	clrf	21	;volatile
   406                           
   407                           ;main.c: 93: CCP2CON = 0x0F;
   408  003D  300F               	movlw	15
   409  003E  009D               	movwf	29	;volatile
   410                           
   411                           ;main.c: 94: CCPR2L = 0;
   412  003F  019B               	clrf	27	;volatile
   413                           
   414                           ;main.c: 95: PR2 = 100;
   415  0040  3064               	movlw	100
   416  0041  1683               	bsf	3,5	;RP0=1, select bank1
   417  0042  1303               	bcf	3,6	;RP1=0, select bank1
   418  0043  0092               	movwf	18	;volatile
   419                           
   420                           ;main.c: 96: T2CON = 0x04;
   421  0044  3004               	movlw	4
   422  0045  1283               	bcf	3,5	;RP0=0, select bank0
   423  0046  1303               	bcf	3,6	;RP1=0, select bank0
   424  0047  0092               	movwf	18	;volatile
   425                           
   426                           ;main.c: 97: ADCON1 = 0x05;
   427  0048  3005               	movlw	5
   428  0049  1683               	bsf	3,5	;RP0=1, select bank1
   429  004A  1303               	bcf	3,6	;RP1=0, select bank1
   430  004B  009F               	movwf	31	;volatile
   431                           
   432                           ;main.c: 98: TRISC = 0xFD;
   433  004C  30FD               	movlw	253
   434  004D  0087               	movwf	7	;volatile
   435                           
   436                           ;main.c: 99: TRISB = 0xFF;
   437  004E  30FF               	movlw	255
   438  004F  0086               	movwf	6	;volatile
   439                           
   440                           ;main.c: 100: TRISA = 0xDF;
   441  0050  30DF               	movlw	223
   442  0051  0085               	movwf	5	;volatile
   443                           
   444                           ;main.c: 101: RCSTA = 0x90;
   445  0052  3090               	movlw	144
   446  0053  1283               	bcf	3,5	;RP0=0, select bank0
   447  0054  1303               	bcf	3,6	;RP1=0, select bank0
   448  0055  0098               	movwf	24	;volatile
   449                           
   450                           ;main.c: 102: TXSTA = 0x24;
   451  0056  3024               	movlw	36
   452  0057  1683               	bsf	3,5	;RP0=1, select bank1
   453  0058  1303               	bcf	3,6	;RP1=0, select bank1
   454  0059  0098               	movwf	24	;volatile
   455                           
   456                           ;main.c: 103: SPBRG = 12;
   457  005A  300C               	movlw	12
   458  005B  0099               	movwf	25	;volatile
   459                           
   460                           ;main.c: 107: if (PORTB & 0x02) {
   461  005C  1283               	bcf	3,5	;RP0=0, select bank0
   462  005D  1303               	bcf	3,6	;RP1=0, select bank0
   463  005E  1C86               	btfss	6,1	;volatile
   464  005F  28FA               	goto	l902
   465                           
   466                           ;main.c: 108: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   467  0060  3000               	movlw	0
   468  0061  120A  118A  2172  120A  118A  	fcall	_beep
   469  0066  3082               	movlw	130
   470  0067  1283               	bcf	3,5	;RP0=0, select bank0
   471  0068  1303               	bcf	3,6	;RP1=0, select bank0
   472  0069  00B8               	movwf	??_main+1
   473  006A  30DD               	movlw	221
   474  006B  00B7               	movwf	??_main
   475  006C                     u317:	
   476  006C  0BB7               	decfsz	??_main,f
   477  006D  286C               	goto	u317
   478  006E  0BB8               	decfsz	??_main+1,f
   479  006F  286C               	goto	u317
   480                           
   481                           ;main.c: 109: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   482  0070  3000               	movlw	0
   483  0071  120A  118A  2172  120A  118A  	fcall	_beep
   484  0076  3082               	movlw	130
   485  0077  1283               	bcf	3,5	;RP0=0, select bank0
   486  0078  1303               	bcf	3,6	;RP1=0, select bank0
   487  0079  00B8               	movwf	??_main+1
   488  007A  30DD               	movlw	221
   489  007B  00B7               	movwf	??_main
   490  007C                     u327:	
   491  007C  0BB7               	decfsz	??_main,f
   492  007D  287C               	goto	u327
   493  007E  0BB8               	decfsz	??_main+1,f
   494  007F  287C               	goto	u327
   495                           
   496                           ;main.c: 110: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   497  0080  3000               	movlw	0
   498  0081  120A  118A  2172  120A  118A  	fcall	_beep
   499  0086  3082               	movlw	130
   500  0087  1283               	bcf	3,5	;RP0=0, select bank0
   501  0088  1303               	bcf	3,6	;RP1=0, select bank0
   502  0089  00B8               	movwf	??_main+1
   503  008A  30DD               	movlw	221
   504  008B  00B7               	movwf	??_main
   505  008C                     u337:	
   506  008C  0BB7               	decfsz	??_main,f
   507  008D  288C               	goto	u337
   508  008E  0BB8               	decfsz	??_main+1,f
   509  008F  288C               	goto	u337
   510  0090  28DF               	goto	l872
   511  0091                     l878:	
   512                           ;main.c: 116: case '7': read_tmr1(); break;
   513                           
   514                           ;main.c: 115: switch (BUF[0]) {
   515                           
   516  0091  120A  118A  2228  120A  118A  	fcall	_read_tmr1
   517  0096  28DC               	goto	l896
   518  0097                     l880:	
   519                           ;main.c: 117: case '5': write(BUF[1]); break;
   520                           
   521  0097  1283               	bcf	3,5	;RP0=0, select bank0
   522  0098  1303               	bcf	3,6	;RP1=0, select bank0
   523  0099  0821               	movf	_BUF+1,w
   524  009A  120A  118A  2241  120A  118A  	fcall	_write
   525  009F  28DC               	goto	l896
   526  00A0                     l882:	
   527                           ;main.c: 118: case '1': write(BUF[1]); read_tmr1(); break;
   528                           
   529  00A0  1283               	bcf	3,5	;RP0=0, select bank0
   530  00A1  1303               	bcf	3,6	;RP1=0, select bank0
   531  00A2  0821               	movf	_BUF+1,w
   532  00A3  120A  118A  2241  120A  118A  	fcall	_write
   533  00A8  120A  118A  2228  120A  118A  	fcall	_read_tmr1
   534  00AD  28DC               	goto	l896
   535  00AE                     l884:	
   536                           ;main.c: 119: case '2': write(0); _delay((unsigned long)((4000)*(4000000/4000.0))); beep
      +                          (0); TMR1 = 0; break;
   537                           
   538  00AE  3000               	movlw	0
   539  00AF  120A  118A  2241  120A  118A  	fcall	_write
   540  00B4  3015               	movlw	21
   541  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   542  00B6  1303               	bcf	3,6	;RP1=0, select bank0
   543  00B7  00B9               	movwf	??_main+2
   544  00B8  304B               	movlw	75
   545  00B9  00B8               	movwf	??_main+1
   546  00BA  30BD               	movlw	189
   547  00BB  00B7               	movwf	??_main
   548  00BC                     u347:	
   549  00BC  0BB7               	decfsz	??_main,f
   550  00BD  28BC               	goto	u347
   551  00BE  0BB8               	decfsz	??_main+1,f
   552  00BF  28BC               	goto	u347
   553  00C0  0BB9               	decfsz	??_main+2,f
   554  00C1  28BC               	goto	u347
   555  00C2  28C3               	nop2
   556  00C3  3000               	movlw	0
   557  00C4  120A  118A  2172  120A  118A  	fcall	_beep
   558  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   559  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   560  00CB  018E               	clrf	14	;volatile
   561  00CC  018F               	clrf	15	;volatile
   562                           
   563                           ;main.c: 120: }
   564  00CD  28DC               	goto	l896
   565  00CE                     l894:	
   566  00CE  0820               	movf	_BUF,w
   567                           
   568                           ; Switch size 1, requested type "space"
   569                           ; Number of cases is 4, Range of values is 49 to 55
   570                           ; switch strategies available:
   571                           ; Name         Instructions Cycles
   572                           ; simple_byte           13     7 (average)
   573                           ; direct_byte           32    11 (fixed)
   574                           ; jumptable            263     9 (fixed)
   575                           ;	Chosen strategy is simple_byte
   576  00CF  3A31               	xorlw	49	; case 49
   577  00D0  1903               	skipnz
   578  00D1  28A0               	goto	l882
   579  00D2  3A03               	xorlw	3	; case 50
   580  00D3  1903               	skipnz
   581  00D4  28AE               	goto	l884
   582  00D5  3A07               	xorlw	7	; case 53
   583  00D6  1903               	skipnz
   584  00D7  2897               	goto	l880
   585  00D8  3A02               	xorlw	2	; case 55
   586  00D9  1903               	skipnz
   587  00DA  2891               	goto	l878
   588  00DB  28DC               	goto	l896
   589  00DC                     l896:	
   590                           
   591                           ;main.c: 121: RC = 0;
   592  00DC  1283               	bcf	3,5	;RP0=0, select bank0
   593  00DD  1303               	bcf	3,6	;RP1=0, select bank0
   594  00DE  01C5               	clrf	_RC
   595  00DF                     l872:	
   596                           ;main.c: 111: while (1) {
   597                           
   598                           ;main.c: 122: }
   599                           
   600                           
   601                           ;main.c: 113: char x = rsget();
   602  00DF  120A  118A  227D  120A  118A  	fcall	_rsget
   603  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   604  00E5  1303               	bcf	3,6	;RP1=0, select bank0
   605  00E6  00B7               	movwf	??_main
   606  00E7  0837               	movf	??_main,w
   607  00E8  00BA               	movwf	main@x
   608                           
   609                           ;main.c: 114: if (x == '\n') {
   610  00E9  300A               	movlw	10
   611  00EA  063A               	xorwf	main@x,w
   612  00EB  1903               	btfsc	3,2
   613  00EC  28CE               	goto	l894
   614                           
   615                           ;main.c: 123: else {
   616                           ;main.c: 124: BUF[RC] = x;
   617  00ED  083A               	movf	main@x,w
   618  00EE  00B7               	movwf	??_main
   619  00EF  0845               	movf	_RC,w
   620  00F0  3E20               	addlw	(low (_BUF| 0))& (0+255)
   621  00F1  0084               	movwf	4
   622  00F2  0837               	movf	??_main,w
   623  00F3  1383               	bcf	3,7	;select IRP bank0
   624  00F4  0080               	movwf	0
   625                           
   626                           ;main.c: 125: RC++;
   627  00F5  3001               	movlw	1
   628  00F6  00B7               	movwf	??_main
   629  00F7  0837               	movf	??_main,w
   630  00F8  07C5               	addwf	_RC,f
   631  00F9  28DF               	goto	l872
   632  00FA                     l902:	
   633                           ;main.c: 126: }
   634                           ;main.c: 127: }
   635                           ;main.c: 128: }
   636                           
   637                           
   638                           ;main.c: 130: else {
   639                           ;main.c: 131: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   640  00FA  3000               	movlw	0
   641  00FB  120A  118A  2172  120A  118A  	fcall	_beep
   642  0100  3082               	movlw	130
   643  0101  1283               	bcf	3,5	;RP0=0, select bank0
   644  0102  1303               	bcf	3,6	;RP1=0, select bank0
   645  0103  00B8               	movwf	??_main+1
   646  0104  30DD               	movlw	221
   647  0105  00B7               	movwf	??_main
   648  0106                     u357:	
   649  0106  0BB7               	decfsz	??_main,f
   650  0107  2906               	goto	u357
   651  0108  0BB8               	decfsz	??_main+1,f
   652  0109  2906               	goto	u357
   653                           
   654                           ;main.c: 132: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   655  010A  3001               	movlw	1
   656  010B  120A  118A  2172  120A  118A  	fcall	_beep
   657  0110  3082               	movlw	130
   658  0111  1283               	bcf	3,5	;RP0=0, select bank0
   659  0112  1303               	bcf	3,6	;RP1=0, select bank0
   660  0113  00B8               	movwf	??_main+1
   661  0114  30DD               	movlw	221
   662  0115  00B7               	movwf	??_main
   663  0116                     u367:	
   664  0116  0BB7               	decfsz	??_main,f
   665  0117  2916               	goto	u367
   666  0118  0BB8               	decfsz	??_main+1,f
   667  0119  2916               	goto	u367
   668  011A  293E               	goto	l908
   669  011B                     l914:	
   670                           
   671                           ;main.c: 138: PWM = msg;
   672  011B  083B               	movf	main@msg,w
   673  011C  009B               	movwf	27
   674                           
   675                           ;main.c: 139: rsend(T1FOH);
   676  011D  0841               	movf	_T1FOH,w	;volatile
   677  011E  120A  118A  2275  120A  118A  	fcall	_rsend
   678                           
   679                           ;main.c: 140: rsend(T1FOH >> 8);
   680  0123  1283               	bcf	3,5	;RP0=0, select bank0
   681  0124  1303               	bcf	3,6	;RP1=0, select bank0
   682  0125  0842               	movf	_T1FOH+1,w	;volatile
   683  0126  120A  118A  2275  120A  118A  	fcall	_rsend
   684                           
   685                           ;main.c: 141: }
   686  012B  293E               	goto	l908
   687  012C                     l922:	
   688                           
   689                           ;main.c: 143: T0PS = msg;
   690  012C  083B               	movf	main@msg,w
   691  012D  00B7               	movwf	??_main
   692  012E  0837               	movf	??_main,w
   693  012F  00C3               	movwf	_T0PS
   694                           
   695                           ;main.c: 144: kT0 = T0PS;
   696  0130  0843               	movf	_T0PS,w
   697  0131  00B7               	movwf	??_main
   698  0132  0837               	movf	??_main,w
   699  0133  00C4               	movwf	_kT0
   700                           
   701                           ;main.c: 145: T1ACC = 0;
   702  0134  01BF               	clrf	_T1ACC
   703  0135  01C0               	clrf	_T1ACC+1
   704                           
   705                           ;main.c: 146: TMR1R = 0;
   706  0136  01BD               	clrf	_TMR1R
   707  0137  01BE               	clrf	_TMR1R+1
   708                           
   709                           ;main.c: 147: TMR1 = 0;
   710  0138  018E               	clrf	14	;volatile
   711  0139  018F               	clrf	15	;volatile
   712                           
   713                           ;main.c: 148: T1CON |= 0x01;
   714  013A  1410               	bsf	16,0	;volatile
   715                           
   716                           ;main.c: 149: TMR0 = 254;
   717  013B  30FE               	movlw	254
   718  013C  0081               	movwf	1	;volatile
   719                           
   720                           ;main.c: 150: INTCON |= 0x20;
   721  013D  168B               	bsf	11,5	;volatile
   722  013E                     l908:	
   723                           ;main.c: 133: while (1) {
   724                           
   725                           ;main.c: 151: }
   726                           
   727                           
   728                           ;main.c: 135: char cmd = rsget();
   729  013E  120A  118A  227D  120A  118A  	fcall	_rsget
   730  0143  1283               	bcf	3,5	;RP0=0, select bank0
   731  0144  1303               	bcf	3,6	;RP1=0, select bank0
   732  0145  00B7               	movwf	??_main
   733  0146  0837               	movf	??_main,w
   734  0147  00BC               	movwf	main@cmd
   735                           
   736                           ;main.c: 136: char msg = rsget();
   737  0148  120A  118A  227D  120A  118A  	fcall	_rsget
   738  014D  1283               	bcf	3,5	;RP0=0, select bank0
   739  014E  1303               	bcf	3,6	;RP1=0, select bank0
   740  014F  00B7               	movwf	??_main
   741  0150  0837               	movf	??_main,w
   742  0151  00BB               	movwf	main@msg
   743                           
   744                           ;main.c: 137: if (cmd == 'x') {
   745  0152  3078               	movlw	120
   746  0153  063C               	xorwf	main@cmd,w
   747  0154  1903               	btfsc	3,2
   748  0155  291B               	goto	l914
   749                           
   750                           ;main.c: 142: else if (cmd == 't') {
   751  0156  3074               	movlw	116
   752  0157  1283               	bcf	3,5	;RP0=0, select bank0
   753  0158  1303               	bcf	3,6	;RP1=0, select bank0
   754  0159  063C               	xorwf	main@cmd,w
   755  015A  1903               	btfsc	3,2
   756  015B  292C               	goto	l922
   757                           
   758                           ;main.c: 152: else if (cmd == 's') {
   759  015C  3073               	movlw	115
   760  015D  063C               	xorwf	main@cmd,w
   761  015E  1D03               	btfss	3,2
   762  015F  293E               	goto	l908
   763                           
   764                           ;main.c: 153: T1CON &= 0xFE;
   765  0160  30FE               	movlw	254
   766  0161  00B7               	movwf	??_main
   767  0162  0837               	movf	??_main,w
   768  0163  0590               	andwf	16,f	;volatile
   769                           
   770                           ;main.c: 154: INTCON &= 0xDF;
   771  0164  30DF               	movlw	223
   772  0165  00B7               	movwf	??_main
   773  0166  0837               	movf	??_main,w
   774  0167  058B               	andwf	11,f	;volatile
   775                           
   776                           ;main.c: 155: PWM = 0;
   777  0168  019B               	clrf	27
   778                           
   779                           ;main.c: 156: T1FOH = 0;
   780  0169  01C1               	clrf	_T1FOH	;volatile
   781  016A  01C2               	clrf	_T1FOH+1	;volatile
   782                           
   783                           ;main.c: 157: beep(0);
   784  016B  3000               	movlw	0
   785  016C  120A  118A  2172  120A  118A  	fcall	_beep
   786  0171  293E               	goto	l908
   787  0172                     __end_of_main:	
   788                           ;main.c: 158: }
   789                           ;main.c: 159: }
   790                           ;main.c: 160: }
   791                           ;main.c: 161: return 0;
   792                           ;	Return value of _main is never used
   793                           
   794                           
   795                           	psect	text1
   796  0241                     __ptext1:	
   797 ;; *************** function _write *****************
   798 ;; Defined at:
   799 ;;		line 61 in file "main.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  duty            1    wreg     char 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  duty            1    0[BANK0 ] char 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, status,2
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   813 ;;      Params:         0       0       0       0       0
   814 ;;      Locals:         0       1       0       0       0
   815 ;;      Temps:          0       0       0       0       0
   816 ;;      Totals:         0       1       0       0       0
   817 ;;Total ram usage:        1 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    1
   820 ;; This function calls:
   821 ;;		Nothing
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           
   828                           ;psect for function _write
   829  0241                     _write:	
   830                           
   831                           ;incstack = 0
   832                           ; Regs used in _write: [wreg+status,2]
   833                           ;write@duty stored from wreg
   834  0241  1283               	bcf	3,5	;RP0=0, select bank0
   835  0242  1303               	bcf	3,6	;RP1=0, select bank0
   836  0243  00B1               	movwf	write@duty
   837                           
   838                           ;main.c: 62: if (duty > 100) PWM = 100;
   839  0244  0831               	movf	write@duty,w
   840  0245  3A80               	xorlw	128
   841  0246  3E1B               	addlw	-229
   842  0247  1C03               	skipc
   843  0248  2A4C               	goto	l87
   844  0249  3064               	movlw	100
   845  024A  009B               	movwf	27
   846  024B  0008               	return
   847  024C                     l87:	
   848                           
   849                           ;main.c: 63: else if (duty < 0) PWM = 0;
   850  024C  1FB1               	btfss	write@duty,7
   851  024D  2A50               	goto	l818
   852  024E  019B               	clrf	27
   853  024F  0008               	return
   854  0250                     l818:	
   855                           
   856                           ;main.c: 64: else PWM = duty;
   857  0250  0831               	movf	write@duty,w
   858  0251  009B               	movwf	27
   859  0252  0008               	return
   860  0253                     __end_of_write:	
   861                           
   862                           	psect	text2
   863  027D                     __ptext2:	
   864 ;; *************** function _rsget *****************
   865 ;; Defined at:
   866 ;;		line 47 in file "main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      unsigned char 
   873 ;; Registers used:
   874 ;;		wreg
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0
   883 ;;      Totals:         0       0       0       0       0
   884 ;;Total ram usage:        0 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    1
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           
   895                           ;psect for function _rsget
   896  027D                     _rsget:	
   897  027D                     l78:	
   898                           ;main.c: 48: while (!RCIF) continue;
   899                           
   900                           ;incstack = 0
   901                           ; Regs used in _rsget: [wreg]
   902                           
   903  027D  1283               	bcf	3,5	;RP0=0, select bank0
   904  027E  1303               	bcf	3,6	;RP1=0, select bank0
   905  027F  1E8C               	btfss	12,5	;volatile
   906  0280  2A7D               	goto	l78
   907                           
   908                           ;main.c: 49: return RCREG;
   909  0281  081A               	movf	26,w	;volatile
   910  0282  0008               	return
   911  0283                     __end_of_rsget:	
   912                           
   913                           	psect	text3
   914  0228                     __ptext3:	
   915 ;; *************** function _read_tmr1 *****************
   916 ;; Defined at:
   917 ;;		line 54 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   931 ;;      Params:         0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0
   934 ;;      Totals:         0       0       0       0       0
   935 ;;Total ram usage:        0 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    2
   938 ;; This function calls:
   939 ;;		_rsend
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _read_tmr1
   947  0228                     _read_tmr1:	
   948                           
   949                           ;main.c: 55: T1ZOH = TMR1;
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   953  0228  1283               	bcf	3,5	;RP0=0, select bank0
   954  0229  1303               	bcf	3,6	;RP1=0, select bank0
   955  022A  080F               	movf	15,w	;volatile
   956  022B  00FB               	movwf	_T1ZOH+1
   957  022C  080E               	movf	14,w	;volatile
   958  022D  00FA               	movwf	_T1ZOH
   959                           
   960                           ;main.c: 56: rsend(T1ZOH >> 8);
   961  022E  087B               	movf	_T1ZOH+1,w
   962  022F  120A  118A  2275  120A  118A  	fcall	_rsend
   963                           
   964                           ;main.c: 57: rsend(T1ZOH);
   965  0234  087A               	movf	_T1ZOH,w
   966  0235  120A  118A  2275   	fcall	_rsend
   967                           
   968                           ;main.c: 58: TMR1 -= T1ZOH;
   969  0238  087A               	movf	_T1ZOH,w
   970  0239  1283               	bcf	3,5	;RP0=0, select bank0
   971  023A  1303               	bcf	3,6	;RP1=0, select bank0
   972  023B  028E               	subwf	14,f	;volatile
   973  023C  087B               	movf	_T1ZOH+1,w
   974  023D  1C03               	skipc
   975  023E  038F               	decf	15,f	;volatile
   976  023F  028F               	subwf	15,f	;volatile
   977  0240  0008               	return
   978  0241                     __end_of_read_tmr1:	
   979                           
   980                           	psect	text4
   981  0275                     __ptext4:	
   982 ;; *************** function _rsend *****************
   983 ;; Defined at:
   984 ;;		line 42 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  msg             1    wreg     unsigned char 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  msg             1    0[BANK0 ] unsigned char 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   998 ;;      Params:         0       0       0       0       0
   999 ;;      Locals:         0       1       0       0       0
  1000 ;;      Temps:          0       0       0       0       0
  1001 ;;      Totals:         0       1       0       0       0
  1002 ;;Total ram usage:        1 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_read_tmr1
  1009 ;;		_main
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           
  1014                           ;psect for function _rsend
  1015  0275                     _rsend:	
  1016                           
  1017                           ;incstack = 0
  1018                           ; Regs used in _rsend: [wreg]
  1019                           ;rsend@msg stored from wreg
  1020  0275  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0276  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0277  00B1               	movwf	rsend@msg
  1023  0278                     l72:	
  1024                           ;main.c: 43: while (!TXIF) continue;
  1025                           
  1026  0278  1E0C               	btfss	12,4	;volatile
  1027  0279  2A78               	goto	l72
  1028                           
  1029                           ;main.c: 44: TXREG = msg;
  1030  027A  0831               	movf	rsend@msg,w
  1031  027B  0099               	movwf	25	;volatile
  1032  027C  0008               	return
  1033  027D                     __end_of_rsend:	
  1034                           
  1035                           	psect	text5
  1036  0172                     __ptext5:	
  1037 ;; *************** function _beep *****************
  1038 ;; Defined at:
  1039 ;;		line 31 in file "main.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;  dash            1    wreg     unsigned char 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  dash            1    1[BANK0 ] unsigned char 
  1044 ;;  j               2    4[BANK0 ] int 
  1045 ;;  j               2    2[BANK0 ] int 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, status,2, status,0, btemp+1
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1055 ;;      Params:         0       0       0       0       0
  1056 ;;      Locals:         0       5       0       0       0
  1057 ;;      Temps:          0       1       0       0       0
  1058 ;;      Totals:         0       6       0       0       0
  1059 ;;Total ram usage:        6 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    1
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           
  1070                           ;psect for function _beep
  1071  0172                     _beep:	
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1075                           ;beep@dash stored from wreg
  1076  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0174  00B2               	movwf	beep@dash
  1079                           
  1080                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1081  0175  0832               	movf	beep@dash,w
  1082  0176  1D03               	btfss	3,2
  1083  0177  29A3               	goto	l788
  1084  0178  01B3               	clrf	beep@j
  1085  0179  01B4               	clrf	beep@j+1
  1086  017A                     L1:	
  1087  017A  0834               	movf	beep@j+1,w
  1088  017B  3A80               	xorlw	128
  1089  017C  00FF               	movwf	127
  1090  017D  3080               	movlw	128
  1091  017E  027F               	subwf	127,w
  1092  017F  1D03               	skipz
  1093  0180  2983               	goto	u185
  1094  0181  3064               	movlw	100
  1095  0182  0233               	subwf	beep@j,w
  1096  0183                     u185:	
  1097  0183  1803               	btfsc	3,0
  1098  0184  0008               	return
  1099                           
  1100                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1101  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1102  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1103  0187  1685               	bsf	5,5
  1104  0188  30C7               	movlw	199
  1105  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1106  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1107  018B  00B1               	movwf	??_beep
  1108  018C                     u377:	
  1109  018C  298D               	nop2
  1110  018D  0BB1               	decfsz	??_beep,f
  1111  018E  298C               	goto	u377
  1112  018F  2990               	nop2
  1113                           
  1114                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1115  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1116  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1117  0192  1285               	bcf	5,5
  1118  0193  30A5               	movlw	165
  1119  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1120  0195  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0196  00B1               	movwf	??_beep
  1122  0197                     u387:	
  1123  0197  0BB1               	decfsz	??_beep,f
  1124  0198  2997               	goto	u387
  1125  0199  299A               	nop2
  1126  019A  3001               	movlw	1
  1127  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1128  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1129  019D  07B3               	addwf	beep@j,f
  1130  019E  1803               	skipnc
  1131  019F  0AB4               	incf	beep@j+1,f
  1132  01A0  3000               	movlw	0
  1133  01A1  07B4               	addwf	beep@j+1,f
  1134  01A2  297A               	goto	L1
  1135  01A3                     l788:	
  1136                           ;main.c: 35: }
  1137                           
  1138                           
  1139                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1140  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1141  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  1142  01A5  01B5               	clrf	beep@j_57
  1143  01A6  01B6               	clrf	beep@j_57+1
  1144  01A7                     L2:	
  1145  01A7  0836               	movf	beep@j_57+1,w
  1146  01A8  3A80               	xorlw	128
  1147  01A9  00FF               	movwf	127
  1148  01AA  3081               	movlw	129
  1149  01AB  027F               	subwf	127,w
  1150  01AC  1D03               	skipz
  1151  01AD  29B0               	goto	u205
  1152  01AE  30F4               	movlw	244
  1153  01AF  0235               	subwf	beep@j_57,w
  1154  01B0                     u205:	
  1155  01B0  1803               	btfsc	3,0
  1156  01B1  0008               	return
  1157                           
  1158                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1159  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1160  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1161  01B4  1685               	bsf	5,5
  1162  01B5  30C7               	movlw	199
  1163  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1164  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1165  01B8  00B1               	movwf	??_beep
  1166  01B9                     u397:	
  1167  01B9  29BA               	nop2
  1168  01BA  0BB1               	decfsz	??_beep,f
  1169  01BB  29B9               	goto	u397
  1170  01BC  29BD               	nop2
  1171                           
  1172                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1173  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1174  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  1175  01BF  1285               	bcf	5,5
  1176  01C0  30A5               	movlw	165
  1177  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1178  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1179  01C3  00B1               	movwf	??_beep
  1180  01C4                     u407:	
  1181  01C4  0BB1               	decfsz	??_beep,f
  1182  01C5  29C4               	goto	u407
  1183  01C6  29C7               	nop2
  1184  01C7  3001               	movlw	1
  1185  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1186  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1187  01CA  07B5               	addwf	beep@j_57,f
  1188  01CB  1803               	skipnc
  1189  01CC  0AB6               	incf	beep@j_57+1,f
  1190  01CD  3000               	movlw	0
  1191  01CE  07B6               	addwf	beep@j_57+1,f
  1192  01CF  29A7               	goto	L2
  1193  01D0                     __end_of_beep:	
  1194                           
  1195                           	psect	text6
  1196  01D0                     __ptext6:	
  1197 ;; *************** function _oversampling *****************
  1198 ;; Defined at:
  1199 ;;		line 72 in file "main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1213 ;;      Params:         0       0       0       0       0
  1214 ;;      Locals:         0       0       0       0       0
  1215 ;;      Temps:         10       0       0       0       0
  1216 ;;      Totals:        10       0       0       0       0
  1217 ;;Total ram usage:       10 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; This function calls:
  1220 ;;		Nothing
  1221 ;; This function is called by:
  1222 ;;		Interrupt level 1
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           
  1227                           ;psect for function _oversampling
  1228  01D0                     _oversampling:	
  1229                           
  1230                           ;main.c: 73: kT0++;
  1231  01D0  3001               	movlw	1
  1232  01D1  00F0               	movwf	??_oversampling
  1233  01D2  0870               	movf	??_oversampling,w
  1234  01D3  07C4               	addwf	_kT0,f
  1235                           
  1236                           ;main.c: 74: if (kT0 > T0PS) {
  1237  01D4  0844               	movf	_kT0,w
  1238  01D5  0243               	subwf	_T0PS,w
  1239  01D6  1803               	skipnc
  1240  01D7  29E4               	goto	i1l830
  1241                           
  1242                           ;main.c: 75: kT0 = 0;
  1243  01D8  01C4               	clrf	_kT0
  1244                           
  1245                           ;main.c: 76: T1FOH = TMR1;
  1246  01D9  080F               	movf	15,w	;volatile
  1247  01DA  00C2               	movwf	_T1FOH+1	;volatile
  1248  01DB  080E               	movf	14,w	;volatile
  1249  01DC  00C1               	movwf	_T1FOH	;volatile
  1250                           
  1251                           ;main.c: 77: TMR1 -= T1FOH;
  1252  01DD  0841               	movf	_T1FOH,w	;volatile
  1253  01DE  028E               	subwf	14,f	;volatile
  1254  01DF  0842               	movf	_T1FOH+1,w	;volatile
  1255  01E0  1C03               	skipc
  1256  01E1  038F               	decf	15,f	;volatile
  1257  01E2  028F               	subwf	15,f	;volatile
  1258                           
  1259                           ;main.c: 78: }
  1260  01E3  2A18               	goto	i1l832
  1261  01E4                     i1l830:	
  1262                           
  1263                           ;main.c: 79: else {
  1264                           ;main.c: 80: T1FOH = T1FOH + ((TMR1 - TMR1R) - T1ACC);
  1265  01E4  083F               	movf	_T1ACC,w
  1266  01E5  073D               	addwf	_TMR1R,w
  1267  01E6  00F0               	movwf	??_oversampling
  1268  01E7  0840               	movf	_T1ACC+1,w
  1269  01E8  1803               	skipnc
  1270  01E9  0A40               	incf	_T1ACC+1,w
  1271  01EA  073E               	addwf	_TMR1R+1,w
  1272  01EB  00F1               	movwf	??_oversampling+1
  1273  01EC  09F0               	comf	??_oversampling,f
  1274  01ED  09F1               	comf	??_oversampling+1,f
  1275  01EE  0AF0               	incf	??_oversampling,f
  1276  01EF  1903               	skipnz
  1277  01F0  0AF1               	incf	??_oversampling+1,f
  1278  01F1  080E               	movf	14,w	;volatile
  1279  01F2  0770               	addwf	??_oversampling,w
  1280  01F3  00F2               	movwf	??_oversampling+2
  1281  01F4  080F               	movf	15,w	;volatile
  1282  01F5  1803               	skipnc
  1283  01F6  0A0F               	incf	15,w	;volatile
  1284  01F7  0771               	addwf	??_oversampling+1,w
  1285  01F8  00F3               	movwf	??_oversampling+3
  1286  01F9  0841               	movf	_T1FOH,w	;volatile
  1287  01FA  0772               	addwf	??_oversampling+2,w
  1288  01FB  00F4               	movwf	??_oversampling+4
  1289  01FC  0842               	movf	_T1FOH+1,w	;volatile
  1290  01FD  1803               	skipnc
  1291  01FE  0A42               	incf	_T1FOH+1,w	;volatile
  1292  01FF  0773               	addwf	??_oversampling+3,w
  1293  0200  00F5               	movwf	??_oversampling+5
  1294  0201  0874               	movf	??_oversampling+4,w
  1295  0202  00C1               	movwf	_T1FOH	;volatile
  1296  0203  0875               	movf	??_oversampling+5,w
  1297  0204  00C2               	movwf	_T1FOH+1	;volatile
  1298                           
  1299                           ;main.c: 81: T1ACC = TMR1 - TMR1R;
  1300  0205  093D               	comf	_TMR1R,w
  1301  0206  00F0               	movwf	??_oversampling
  1302  0207  093E               	comf	_TMR1R+1,w
  1303  0208  00F1               	movwf	??_oversampling+1
  1304  0209  0AF0               	incf	??_oversampling,f
  1305  020A  1903               	skipnz
  1306  020B  0AF1               	incf	??_oversampling+1,f
  1307  020C  080E               	movf	14,w	;volatile
  1308  020D  0770               	addwf	??_oversampling,w
  1309  020E  00F2               	movwf	??_oversampling+2
  1310  020F  080F               	movf	15,w	;volatile
  1311  0210  1803               	skipnc
  1312  0211  0A0F               	incf	15,w	;volatile
  1313  0212  0771               	addwf	??_oversampling+1,w
  1314  0213  00F3               	movwf	??_oversampling+3
  1315  0214  0872               	movf	??_oversampling+2,w
  1316  0215  00BF               	movwf	_T1ACC
  1317  0216  0873               	movf	??_oversampling+3,w
  1318  0217  00C0               	movwf	_T1ACC+1
  1319  0218                     i1l832:	
  1320                           
  1321                           ;main.c: 82: }
  1322                           ;main.c: 83: TMR1R = TMR1;
  1323  0218  080F               	movf	15,w	;volatile
  1324  0219  00BE               	movwf	_TMR1R+1
  1325  021A  080E               	movf	14,w	;volatile
  1326  021B  00BD               	movwf	_TMR1R
  1327                           
  1328                           ;main.c: 84: TMR0IF = 0;
  1329  021C  110B               	bcf	11,2	;volatile
  1330  021D  0879               	movf	??_oversampling+9,w
  1331  021E  00FF               	movwf	127
  1332  021F  0878               	movf	??_oversampling+8,w
  1333  0220  008A               	movwf	10
  1334  0221  0877               	movf	??_oversampling+7,w
  1335  0222  0084               	movwf	4
  1336  0223  0E76               	swapf	(??_oversampling+6)^(0+-128),w
  1337  0224  0083               	movwf	3
  1338  0225  0EFE               	swapf	126,f
  1339  0226  0E7E               	swapf	126,w
  1340  0227  0009               	retfie
  1341  0228                     __end_of_oversampling:	
  1342  007E                     btemp	set	126	;btemp
  1343  007E                     wtemp0	set	126
  1344                           
  1345                           	psect	intentry
  1346  0004                     __pintentry:	
  1347                           ;incstack = 0
  1348                           ; Regs used in _oversampling: [wreg+status,2+status,0]
  1349                           
  1350  0004                     interrupt_function:	
  1351  007E                     saved_w	set	btemp
  1352  0004  00FE               	movwf	btemp
  1353  0005  0E03               	swapf	3,w
  1354  0006  00F6               	movwf	??_oversampling+6
  1355  0007  0804               	movf	4,w
  1356  0008  00F7               	movwf	??_oversampling+7
  1357  0009  080A               	movf	10,w
  1358  000A  00F8               	movwf	??_oversampling+8
  1359  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1360  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1361  000D  087F               	movf	btemp+1,w
  1362  000E  00F9               	movwf	??_oversampling+9
  1363  000F  120A  118A  29D0   	ljmp	_oversampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     12      38
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _oversampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep
    _read_tmr1->_rsend

Critical Paths under _oversampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _oversampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _oversampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _oversampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     381
                                              6 BANK0      6     6      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _oversampling                                        10    10      0       0
                                              0 COMMON    10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _oversampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      26       5       47.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Jan  3 13:23:43 2018

                      pc 0002              __CFG_CP$OFF 0000                       l72 0278  
                     l78 027D                       l87 024C                       _RC 0045  
                     fsr 0004                      l902 00FA                      l818 0250  
                    l922 012C                      l914 011B                      l908 013E  
                    l880 0097                      l872 00DF                      l882 00A0  
                    l788 01A3                      l884 00AE                      l878 0091  
                    l894 00CE                      l896 00DC                      _BUF 0020  
                    _BUZ 002D                      u205 01B0                      u317 006C  
                    _PR2 0092                      u407 01C4                      u327 007C  
                    u185 0183                      u337 008C             __CFG_CPD$OFF 0000  
                    u347 00BC                      u357 0106                      u367 0116  
                    u377 018C                      u387 0197                      u397 01B9  
                    _PWM 001B                      _kT0 0044                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   _T0PS 0043                     _RCIF 0065                     _TMR0 0001  
                   _TMR1 000E                     _TXIF 0064             __CFG_WRT$OFF 0000  
                   _beep 0172                     _main 0030                     btemp 007E  
                   start 0012                    ?_beep 0070                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _T1ACC 003F                    _T1CON 0010  
                  _T1FOH 0041                    _T2CON 0012                    _T1ZOH 007A  
                  i1l830 01E4                    i1l832 0218                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _TMR1R 003D  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0033                    _rsend 0275                    _rsget 027D  
                  main@x 003A                    _write 0241           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_beep 01D0             __end_of_main 0172  
                 ??_beep 0031                   ??_main 0037                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070                   _INTCON 000B  
                 _TMR0IF 005A           __CFG_PWRTE$OFF 0000                   saved_w 007E  
__end_of__initialization 002C           __pcstackCOMMON 0070             __pidataBANK0 0253  
          __end_of_rsend 027D            __end_of_rsget 0283            __end_of_write 0253  
                ??_rsend 0031                  ??_rsget 0031                  ??_write 0031  
             __pbssBANK0 003D       __size_of_read_tmr1 0019               __pmaintext 0030  
             __pintentry 0004                  _CCP1CON 0017                  _CCP2CON 001D  
                __ptext1 0241                  __ptext2 027D                  __ptext3 0228  
                __ptext4 0275                  __ptext5 0172                  __ptext6 01D0  
      __end_of_read_tmr1 0241                  main@cmd 003C                  main@msg 003B  
   end_of_initialization 002C            ?_oversampling 0070      start_initialization 0015  
         ??_oversampling 0070               init_fetch0 0264              __pdataBANK0 0020  
            __pbssCOMMON 007A                ___latbits 0002            __pcstackBANK0 0031  
              _read_tmr1 0228           __size_of_rsend 0008           __size_of_rsget 0006  
         __size_of_write 0012        interrupt_function 0004     __end_of_oversampling 0228  
             ?_read_tmr1 0070                 beep@j_57 0035                 beep@dash 0032  
          __size_of_beep 005E            __size_of_main 0142                 init_ram0 0268  
            ??_read_tmr1 0032                 intlevel1 0000                write@duty 0031  
  __size_of_oversampling 0058                 rsend@msg 0031               _OPTION_REG 0081  
           _oversampling 01D0  
