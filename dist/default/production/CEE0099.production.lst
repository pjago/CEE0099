

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Jan  1 09:17:03 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0202                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0202  3420               	retlw	32
   122  0203  3420               	retlw	32
   123  0204  3420               	retlw	32
   124  0205  3420               	retlw	32
   125  0206  3420               	retlw	32
   126  0207  3420               	retlw	32
   127  0208  3420               	retlw	32
   128  0209  3420               	retlw	32
   129  020A  3420               	retlw	32
   130  020B  3420               	retlw	32
   131  020C  3420               	retlw	32
   132  020D  3420               	retlw	32
   133  020E  3420               	retlw	32
   134  020F  3420               	retlw	32
   135  0210  3420               	retlw	32
   136  0211  3420               	retlw	32
   137  0212  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  3002               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  2217   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01BB               	clrf	__pbssBANK0& (0+127)
   184  0022  01BC               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BD               	clrf	(__pbssBANK0+2)& (0+127)
   186                           
   187                           ; Clear objects allocated to COMMON
   188  0024  01F6               	clrf	__pbssCOMMON& (0+127)
   189  0025  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   190  0026  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   191  0027                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0027                     __end_of__initialization:	
   195  0027  0183               	clrf	3
   196  0028  120A  118A  282B   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssCOMMON
   199  0076                     __pbssCOMMON:	
   200  0076                     _T1ZOH:	
   201  0076                     	ds	2
   202  0078                     _kT0:	
   203  0078                     	ds	1
   204                           
   205                           	psect	bssBANK0
   206  003B                     __pbssBANK0:	
   207  003B                     _PWMZOH:	
   208  003B                     	ds	1
   209  003C                     _T0PS:	
   210  003C                     	ds	1
   211  003D                     _RC:	
   212  003D                     	ds	1
   213                           
   214                           	psect	dataBANK0
   215  0020                     __pdataBANK0:	
   216  0020                     _BUF:	
   217  0020                     	ds	17
   218                           
   219                           	psect	inittext
   220  0213                     init_fetch0:	
   221                           ;	Called with low address in FSR and high address in W
   222                           
   223  0213  087E               	movf	126,w
   224  0214  008A               	movwf	10
   225  0215  087F               	movf	127,w
   226  0216  0082               	movwf	2
   227  0217                     init_ram0:	
   228                           ;Called with:
   229                           ;	high address of idata address in btemp 
   230                           ;	low address of idata address in btemp+1 
   231                           ;	low address of data in FSR
   232                           ;	high address + 1 of data in btemp-1
   233                           
   234  0217  2213  120A  118A   	fcall	init_fetch0
   235  021A  0080               	movwf	0
   236  021B  0A84               	incf	4,f
   237  021C  0804               	movf	4,w
   238  021D  067D               	xorwf	125,w
   239  021E  1903               	btfsc	3,2
   240  021F  3400               	retlw	0
   241  0220  0AFF               	incf	127,f
   242  0221  1903               	btfsc	3,2
   243  0222  0AFE               	incf	126,f
   244  0223  2A17               	goto	init_ram0
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:	
   248  0070                     ?_beep:	
   249  0070                     ?_rsend:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_rsget:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_read_tmr1:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_write:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_sampling:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ??_sampling:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_main:	
   268                           ; 1 bytes @ 0x0
   269                           
   270                           
   271                           ; 2 bytes @ 0x0
   272  0070                     	ds	5
   273  0075                     ??_beep:	
   274  0075                     ??_rsend:	
   275                           ; 1 bytes @ 0x5
   276                           
   277  0075                     ??_rsget:	
   278                           ; 1 bytes @ 0x5
   279                           
   280  0075                     ??_write:	
   281                           ; 1 bytes @ 0x5
   282                           
   283  0075                     rsend@msg:	
   284                           ; 1 bytes @ 0x5
   285                           
   286  0075                     write@duty:	
   287                           ; 1 bytes @ 0x5
   288                           
   289                           
   290                           ; 1 bytes @ 0x5
   291  0075                     	ds	1
   292  0076                     ??_read_tmr1:	
   293                           
   294                           	psect	cstackBANK0
   295  0031                     __pcstackBANK0:	
   296                           ; 1 bytes @ 0x6
   297                           
   298  0031                     beep@dash:	
   299                           
   300                           ; 1 bytes @ 0x0
   301  0031                     	ds	1
   302  0032                     beep@j:	
   303                           
   304                           ; 2 bytes @ 0x1
   305  0032                     	ds	2
   306  0034                     beep@j_56:	
   307                           
   308                           ; 2 bytes @ 0x3
   309  0034                     	ds	2
   310  0036                     ??_main:	
   311                           
   312                           ; 1 bytes @ 0x5
   313  0036                     	ds	2
   314  0038                     main@x:	
   315                           
   316                           ; 1 bytes @ 0x7
   317  0038                     	ds	1
   318  0039                     main@msg:	
   319                           
   320                           ; 1 bytes @ 0x8
   321  0039                     	ds	1
   322  003A                     main@cmd:	
   323                           
   324                           ; 1 bytes @ 0x9
   325  003A                     	ds	1
   326                           
   327                           	psect	maintext
   328  002B                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 83 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  cmd             1    9[BANK0 ] unsigned char 
   339 ;;  msg             1    8[BANK0 ] unsigned char 
   340 ;;  x               1    7[BANK0 ] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2  112[None  ] int 
   343 ;; Registers used:
   344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : B00/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   350 ;;      Params:         0       0       0       0       0
   351 ;;      Locals:         0       3       0       0       0
   352 ;;      Temps:          0       2       0       0       0
   353 ;;      Totals:         0       5       0       0       0
   354 ;;Total ram usage:        5 bytes
   355 ;; Hardware stack levels required when called:    3
   356 ;; This function calls:
   357 ;;		_beep
   358 ;;		_read_tmr1
   359 ;;		_rsget
   360 ;;		_write
   361 ;; This function is called by:
   362 ;;		Startup code after reset
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           
   367                           ;psect for function _main
   368  002B                     _main:	
   369                           
   370                           ;main.c: 84: OPTION_REG = 0x85;
   371                           
   372                           ;incstack = 0
   373                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   374  002B  3085               	movlw	133
   375  002C  1683               	bsf	3,5	;RP0=1, select bank1
   376  002D  1303               	bcf	3,6	;RP1=0, select bank1
   377  002E  0081               	movwf	1	;volatile
   378                           
   379                           ;main.c: 85: INTCON = 0x80;
   380  002F  3080               	movlw	128
   381  0030  008B               	movwf	11	;volatile
   382                           
   383                           ;main.c: 86: T1CON = 0x03;
   384  0031  3003               	movlw	3
   385  0032  1283               	bcf	3,5	;RP0=0, select bank0
   386  0033  1303               	bcf	3,6	;RP1=0, select bank0
   387  0034  0090               	movwf	16	;volatile
   388                           
   389                           ;main.c: 87: CCP1CON = 0x0F;
   390  0035  300F               	movlw	15
   391  0036  0097               	movwf	23	;volatile
   392                           
   393                           ;main.c: 88: CCPR1L = 0;
   394  0037  0195               	clrf	21	;volatile
   395                           
   396                           ;main.c: 89: CCP2CON = 0x0F;
   397  0038  300F               	movlw	15
   398  0039  009D               	movwf	29	;volatile
   399                           
   400                           ;main.c: 90: CCPR2L = 0;
   401  003A  019B               	clrf	27	;volatile
   402                           
   403                           ;main.c: 91: PR2 = 100;
   404  003B  3064               	movlw	100
   405  003C  1683               	bsf	3,5	;RP0=1, select bank1
   406  003D  1303               	bcf	3,6	;RP1=0, select bank1
   407  003E  0092               	movwf	18	;volatile
   408                           
   409                           ;main.c: 92: T2CON = 0x04;
   410  003F  3004               	movlw	4
   411  0040  1283               	bcf	3,5	;RP0=0, select bank0
   412  0041  1303               	bcf	3,6	;RP1=0, select bank0
   413  0042  0092               	movwf	18	;volatile
   414                           
   415                           ;main.c: 93: ADCON1 = 0x05;
   416  0043  3005               	movlw	5
   417  0044  1683               	bsf	3,5	;RP0=1, select bank1
   418  0045  1303               	bcf	3,6	;RP1=0, select bank1
   419  0046  009F               	movwf	31	;volatile
   420                           
   421                           ;main.c: 94: TRISC = 0xFD;
   422  0047  30FD               	movlw	253
   423  0048  0087               	movwf	7	;volatile
   424                           
   425                           ;main.c: 95: TRISB = 0xFF;
   426  0049  30FF               	movlw	255
   427  004A  0086               	movwf	6	;volatile
   428                           
   429                           ;main.c: 96: TRISA = 0xDF;
   430  004B  30DF               	movlw	223
   431  004C  0085               	movwf	5	;volatile
   432                           
   433                           ;main.c: 97: RCSTA = 0x90;
   434  004D  3090               	movlw	144
   435  004E  1283               	bcf	3,5	;RP0=0, select bank0
   436  004F  1303               	bcf	3,6	;RP1=0, select bank0
   437  0050  0098               	movwf	24	;volatile
   438                           
   439                           ;main.c: 98: TXSTA = 0x24;
   440  0051  3024               	movlw	36
   441  0052  1683               	bsf	3,5	;RP0=1, select bank1
   442  0053  1303               	bcf	3,6	;RP1=0, select bank1
   443  0054  0098               	movwf	24	;volatile
   444                           
   445                           ;main.c: 99: SPBRG = 12;
   446  0055  300C               	movlw	12
   447  0056  0099               	movwf	25	;volatile
   448                           
   449                           ;main.c: 103: if (PORTB & 0x02) {
   450  0057  1283               	bcf	3,5	;RP0=0, select bank0
   451  0058  1303               	bcf	3,6	;RP1=0, select bank0
   452  0059  1C86               	btfss	6,1	;volatile
   453  005A  28F6               	goto	l982
   454                           
   455                           ;main.c: 104: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   456  005B  3000               	movlw	0
   457  005C  120A  118A  2151  120A  118A  	fcall	_beep
   458  0061  3082               	movlw	130
   459  0062  1283               	bcf	3,5	;RP0=0, select bank0
   460  0063  1303               	bcf	3,6	;RP1=0, select bank0
   461  0064  00B7               	movwf	??_main+1
   462  0065  30DD               	movlw	221
   463  0066  00B6               	movwf	??_main
   464  0067                     u407:	
   465  0067  0BB6               	decfsz	??_main,f
   466  0068  2867               	goto	u407
   467  0069  0BB7               	decfsz	??_main+1,f
   468  006A  2867               	goto	u407
   469                           
   470                           ;main.c: 105: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   471  006B  3000               	movlw	0
   472  006C  120A  118A  2151  120A  118A  	fcall	_beep
   473  0071  3082               	movlw	130
   474  0072  1283               	bcf	3,5	;RP0=0, select bank0
   475  0073  1303               	bcf	3,6	;RP1=0, select bank0
   476  0074  00B7               	movwf	??_main+1
   477  0075  30DD               	movlw	221
   478  0076  00B6               	movwf	??_main
   479  0077                     u417:	
   480  0077  0BB6               	decfsz	??_main,f
   481  0078  2877               	goto	u417
   482  0079  0BB7               	decfsz	??_main+1,f
   483  007A  2877               	goto	u417
   484                           
   485                           ;main.c: 106: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   486  007B  3000               	movlw	0
   487  007C  120A  118A  2151  120A  118A  	fcall	_beep
   488  0081  3082               	movlw	130
   489  0082  1283               	bcf	3,5	;RP0=0, select bank0
   490  0083  1303               	bcf	3,6	;RP1=0, select bank0
   491  0084  00B7               	movwf	??_main+1
   492  0085  30DD               	movlw	221
   493  0086  00B6               	movwf	??_main
   494  0087                     u427:	
   495  0087  0BB6               	decfsz	??_main,f
   496  0088  2887               	goto	u427
   497  0089  0BB7               	decfsz	??_main+1,f
   498  008A  2887               	goto	u427
   499  008B  28DB               	goto	l954
   500  008C                     l960:	
   501                           ;main.c: 112: case 'r': case '7': read_tmr1(); break;
   502                           
   503                           ;main.c: 111: switch (BUF[0]) {
   504                           
   505  008C  120A  118A  21D3  120A  118A  	fcall	_read_tmr1
   506  0091  28D8               	goto	l976
   507  0092                     l962:	
   508                           ;main.c: 113: case 'w': case '5': write(BUF[1]); break;
   509                           
   510  0092  1283               	bcf	3,5	;RP0=0, select bank0
   511  0093  1303               	bcf	3,6	;RP1=0, select bank0
   512  0094  0821               	movf	_BUF+1,w
   513  0095  120A  118A  21EC  120A  118A  	fcall	_write
   514  009A  28D8               	goto	l976
   515  009B                     l964:	
   516                           ;main.c: 114: case 'x': case '1': write(BUF[1]); read_tmr1(); break;
   517                           
   518  009B  1283               	bcf	3,5	;RP0=0, select bank0
   519  009C  1303               	bcf	3,6	;RP1=0, select bank0
   520  009D  0821               	movf	_BUF+1,w
   521  009E  120A  118A  21EC  120A  118A  	fcall	_write
   522  00A3  120A  118A  21D3  120A  118A  	fcall	_read_tmr1
   523  00A8  28D8               	goto	l976
   524  00A9                     l966:	
   525                           ;main.c: 115: case 's': case '2': write(0); beep(0); beep(0); break;
   526                           
   527  00A9  3000               	movlw	0
   528  00AA  120A  118A  21EC  120A  118A  	fcall	_write
   529  00AF  3000               	movlw	0
   530  00B0  120A  118A  2151  120A  118A  	fcall	_beep
   531  00B5  3000               	movlw	0
   532  00B6  120A  118A  2151  120A  118A  	fcall	_beep
   533                           
   534                           ;main.c: 116: }
   535  00BB  28D8               	goto	l976
   536  00BC                     l974:	
   537  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   538  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   539  00BE  0820               	movf	_BUF,w
   540                           
   541                           ; Switch size 1, requested type "space"
   542                           ; Number of cases is 8, Range of values is 49 to 120
   543                           ; switch strategies available:
   544                           ; Name         Instructions Cycles
   545                           ; simple_byte           25    13 (average)
   546                           ; direct_byte          227    11 (fixed)
   547                           ; jumptable            263     9 (fixed)
   548                           ;	Chosen strategy is simple_byte
   549  00BF  3A31               	xorlw	49	; case 49
   550  00C0  1903               	skipnz
   551  00C1  289B               	goto	l964
   552  00C2  3A03               	xorlw	3	; case 50
   553  00C3  1903               	skipnz
   554  00C4  28A9               	goto	l966
   555  00C5  3A07               	xorlw	7	; case 53
   556  00C6  1903               	skipnz
   557  00C7  2892               	goto	l962
   558  00C8  3A02               	xorlw	2	; case 55
   559  00C9  1903               	skipnz
   560  00CA  288C               	goto	l960
   561  00CB  3A45               	xorlw	69	; case 114
   562  00CC  1903               	skipnz
   563  00CD  288C               	goto	l960
   564  00CE  3A01               	xorlw	1	; case 115
   565  00CF  1903               	skipnz
   566  00D0  28A9               	goto	l966
   567  00D1  3A04               	xorlw	4	; case 119
   568  00D2  1903               	skipnz
   569  00D3  2892               	goto	l962
   570  00D4  3A0F               	xorlw	15	; case 120
   571  00D5  1903               	skipnz
   572  00D6  289B               	goto	l964
   573  00D7  28D8               	goto	l976
   574  00D8                     l976:	
   575                           
   576                           ;main.c: 117: RC = 0;
   577  00D8  1283               	bcf	3,5	;RP0=0, select bank0
   578  00D9  1303               	bcf	3,6	;RP1=0, select bank0
   579  00DA  01BD               	clrf	_RC
   580  00DB                     l954:	
   581                           ;main.c: 107: while (1) {
   582                           
   583                           ;main.c: 118: }
   584                           
   585                           
   586                           ;main.c: 109: char x = rsget();
   587  00DB  120A  118A  222C  120A  118A  	fcall	_rsget
   588  00E0  1283               	bcf	3,5	;RP0=0, select bank0
   589  00E1  1303               	bcf	3,6	;RP1=0, select bank0
   590  00E2  00B6               	movwf	??_main
   591  00E3  0836               	movf	??_main,w
   592  00E4  00B8               	movwf	main@x
   593                           
   594                           ;main.c: 110: if (x == '\n') {
   595  00E5  300A               	movlw	10
   596  00E6  0638               	xorwf	main@x,w
   597  00E7  1903               	btfsc	3,2
   598  00E8  28BC               	goto	l974
   599                           
   600                           ;main.c: 119: else {
   601                           ;main.c: 120: BUF[RC] = x;
   602  00E9  0838               	movf	main@x,w
   603  00EA  00B6               	movwf	??_main
   604  00EB  083D               	movf	_RC,w
   605  00EC  3E20               	addlw	(low (_BUF| 0))& (0+255)
   606  00ED  0084               	movwf	4
   607  00EE  0836               	movf	??_main,w
   608  00EF  1383               	bcf	3,7	;select IRP bank0
   609  00F0  0080               	movwf	0
   610                           
   611                           ;main.c: 121: RC++;
   612  00F1  3001               	movlw	1
   613  00F2  00B6               	movwf	??_main
   614  00F3  0836               	movf	??_main,w
   615  00F4  07BD               	addwf	_RC,f
   616  00F5  28DB               	goto	l954
   617  00F6                     l982:	
   618                           ;main.c: 122: }
   619                           ;main.c: 123: }
   620                           ;main.c: 124: }
   621                           
   622                           
   623                           ;main.c: 126: else {
   624                           ;main.c: 127: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   625  00F6  3000               	movlw	0
   626  00F7  120A  118A  2151  120A  118A  	fcall	_beep
   627  00FC  3082               	movlw	130
   628  00FD  1283               	bcf	3,5	;RP0=0, select bank0
   629  00FE  1303               	bcf	3,6	;RP1=0, select bank0
   630  00FF  00B7               	movwf	??_main+1
   631  0100  30DD               	movlw	221
   632  0101  00B6               	movwf	??_main
   633  0102                     u437:	
   634  0102  0BB6               	decfsz	??_main,f
   635  0103  2902               	goto	u437
   636  0104  0BB7               	decfsz	??_main+1,f
   637  0105  2902               	goto	u437
   638                           
   639                           ;main.c: 128: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   640  0106  3001               	movlw	1
   641  0107  120A  118A  2151  120A  118A  	fcall	_beep
   642  010C  3082               	movlw	130
   643  010D  1283               	bcf	3,5	;RP0=0, select bank0
   644  010E  1303               	bcf	3,6	;RP1=0, select bank0
   645  010F  00B7               	movwf	??_main+1
   646  0110  30DD               	movlw	221
   647  0111  00B6               	movwf	??_main
   648  0112                     u447:	
   649  0112  0BB6               	decfsz	??_main,f
   650  0113  2912               	goto	u447
   651  0114  0BB7               	decfsz	??_main+1,f
   652  0115  2912               	goto	u447
   653  0116  2925               	goto	l988
   654  0117                     l994:	
   655                           
   656                           ;main.c: 134: PWMZOH = msg;
   657  0117  0839               	movf	main@msg,w
   658  0118  00B6               	movwf	??_main
   659  0119  0836               	movf	??_main,w
   660  011A  00BB               	movwf	_PWMZOH
   661                           
   662                           ;main.c: 135: }
   663  011B  2925               	goto	l988
   664  011C                     l998:	
   665                           
   666                           ;main.c: 137: T0PS = msg;
   667  011C  0839               	movf	main@msg,w
   668  011D  00B6               	movwf	??_main
   669  011E  0836               	movf	??_main,w
   670  011F  00BC               	movwf	_T0PS
   671                           
   672                           ;main.c: 138: TMR1 = 0;
   673  0120  018E               	clrf	14	;volatile
   674  0121  018F               	clrf	15	;volatile
   675  0122  0181               	clrf	1	;# 
   676  0123  168B               	bsf	11,5	;# 
   677  0124  1410               	bsf	16,0	;# 
   678  0125                     l988:	
   679                           ;main.c: 129: while (1) {
   680                           
   681                           ;main.c: 142: }
   682                           
   683                           
   684                           ;main.c: 131: char cmd = rsget();
   685  0125  120A  118A  222C  120A  118A  	fcall	_rsget
   686  012A  1283               	bcf	3,5	;RP0=0, select bank0
   687  012B  1303               	bcf	3,6	;RP1=0, select bank0
   688  012C  00B6               	movwf	??_main
   689  012D  0836               	movf	??_main,w
   690  012E  00BA               	movwf	main@cmd
   691                           
   692                           ;main.c: 132: char msg = rsget();
   693  012F  120A  118A  222C  120A  118A  	fcall	_rsget
   694  0134  1283               	bcf	3,5	;RP0=0, select bank0
   695  0135  1303               	bcf	3,6	;RP1=0, select bank0
   696  0136  00B6               	movwf	??_main
   697  0137  0836               	movf	??_main,w
   698  0138  00B9               	movwf	main@msg
   699                           
   700                           ;main.c: 133: if (cmd == 'x') {
   701  0139  3078               	movlw	120
   702  013A  063A               	xorwf	main@cmd,w
   703  013B  1903               	btfsc	3,2
   704  013C  2917               	goto	l994
   705                           
   706                           ;main.c: 136: else if (cmd == 't') {
   707  013D  3074               	movlw	116
   708  013E  063A               	xorwf	main@cmd,w
   709  013F  1903               	btfsc	3,2
   710  0140  291C               	goto	l998
   711                           
   712                           ;main.c: 143: else if (cmd == 's') {
   713  0141  3073               	movlw	115
   714  0142  1283               	bcf	3,5	;RP0=0, select bank0
   715  0143  1303               	bcf	3,6	;RP1=0, select bank0
   716  0144  063A               	xorwf	main@cmd,w
   717  0145  1D03               	btfss	3,2
   718  0146  2925               	goto	l988
   719                           
   720                           ;main.c: 144: PWM = 0;
   721  0147  019B               	clrf	27
   722                           
   723                           ;main.c: 145: INTCON &= 0xDF;
   724  0148  30DF               	movlw	223
   725  0149  00B6               	movwf	??_main
   726  014A  0836               	movf	??_main,w
   727  014B  058B               	andwf	11,f	;volatile
   728                           
   729                           ;main.c: 146: T1CON &= 0xFE;
   730  014C  30FE               	movlw	254
   731  014D  00B6               	movwf	??_main
   732  014E  0836               	movf	??_main,w
   733  014F  0590               	andwf	16,f	;volatile
   734  0150  2925               	goto	l988
   735  0151                     __end_of_main:	
   736                           ;main.c: 147: }
   737                           ;main.c: 148: }
   738                           ;main.c: 149: }
   739                           ;main.c: 150: return 0;
   740                           ;	Return value of _main is never used
   741                           
   742                           
   743                           	psect	text1
   744  01EC                     __ptext1:	
   745 ;; *************** function _write *****************
   746 ;; Defined at:
   747 ;;		line 61 in file "main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  duty            1    wreg     char 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  duty            1    5[COMMON] char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   761 ;;      Params:         0       0       0       0       0
   762 ;;      Locals:         1       0       0       0       0
   763 ;;      Temps:          0       0       0       0       0
   764 ;;      Totals:         1       0       0       0       0
   765 ;;Total ram usage:        1 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; Hardware stack levels required when called:    1
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           
   776                           ;psect for function _write
   777  01EC                     _write:	
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _write: [wreg+status,2]
   781                           ;write@duty stored from wreg
   782  01EC  00F5               	movwf	write@duty
   783                           
   784                           ;main.c: 62: if (duty > 100) PWM = 100;
   785  01ED  0875               	movf	write@duty,w
   786  01EE  3A80               	xorlw	128
   787  01EF  3E1B               	addlw	-229
   788  01F0  1C03               	skipc
   789  01F1  29F7               	goto	l85
   790  01F2  3064               	movlw	100
   791  01F3  1283               	bcf	3,5	;RP0=0, select bank0
   792  01F4  1303               	bcf	3,6	;RP1=0, select bank0
   793  01F5  009B               	movwf	27
   794  01F6  0008               	return
   795  01F7                     l85:	
   796                           
   797                           ;main.c: 63: else if (duty < 0) PWM = 0;
   798  01F7  1FF5               	btfss	write@duty,7
   799  01F8  29FD               	goto	l806
   800  01F9  1283               	bcf	3,5	;RP0=0, select bank0
   801  01FA  1303               	bcf	3,6	;RP1=0, select bank0
   802  01FB  019B               	clrf	27
   803  01FC  0008               	return
   804  01FD                     l806:	
   805                           
   806                           ;main.c: 64: else PWM = duty;
   807  01FD  0875               	movf	write@duty,w
   808  01FE  1283               	bcf	3,5	;RP0=0, select bank0
   809  01FF  1303               	bcf	3,6	;RP1=0, select bank0
   810  0200  009B               	movwf	27
   811  0201  0008               	return
   812  0202                     __end_of_write:	
   813                           
   814                           	psect	text2
   815  022C                     __ptext2:	
   816 ;; *************** function _rsget *****************
   817 ;; Defined at:
   818 ;;		line 47 in file "main.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;		None
   821 ;; Auto vars:     Size  Location     Type
   822 ;;		None
   823 ;; Return value:  Size  Location     Type
   824 ;;                  1    wreg      unsigned char 
   825 ;; Registers used:
   826 ;;		wreg
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   832 ;;      Params:         0       0       0       0       0
   833 ;;      Locals:         0       0       0       0       0
   834 ;;      Temps:          0       0       0       0       0
   835 ;;      Totals:         0       0       0       0       0
   836 ;;Total ram usage:        0 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:    1
   839 ;; This function calls:
   840 ;;		Nothing
   841 ;; This function is called by:
   842 ;;		_main
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           
   847                           ;psect for function _rsget
   848  022C                     _rsget:	
   849  022C                     l76:	
   850                           ;main.c: 48: while (!RCIF) continue;
   851                           
   852                           ;incstack = 0
   853                           ; Regs used in _rsget: [wreg]
   854                           
   855  022C  1283               	bcf	3,5	;RP0=0, select bank0
   856  022D  1303               	bcf	3,6	;RP1=0, select bank0
   857  022E  1E8C               	btfss	12,5	;volatile
   858  022F  2A2C               	goto	l76
   859                           
   860                           ;main.c: 49: return RCREG;
   861  0230  081A               	movf	26,w	;volatile
   862  0231  0008               	return
   863  0232                     __end_of_rsget:	
   864                           
   865                           	psect	text3
   866  01D3                     __ptext3:	
   867 ;; *************** function _read_tmr1 *****************
   868 ;; Defined at:
   869 ;;		line 54 in file "main.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;		None
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0, pclath, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   883 ;;      Params:         0       0       0       0       0
   884 ;;      Locals:         0       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0
   886 ;;      Totals:         0       0       0       0       0
   887 ;;Total ram usage:        0 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    2
   890 ;; This function calls:
   891 ;;		_rsend
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           
   898                           ;psect for function _read_tmr1
   899  01D3                     _read_tmr1:	
   900                           
   901                           ;main.c: 55: T1ZOH = TMR1;
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   905  01D3  1283               	bcf	3,5	;RP0=0, select bank0
   906  01D4  1303               	bcf	3,6	;RP1=0, select bank0
   907  01D5  080F               	movf	15,w	;volatile
   908  01D6  00F7               	movwf	_T1ZOH+1
   909  01D7  080E               	movf	14,w	;volatile
   910  01D8  00F6               	movwf	_T1ZOH
   911                           
   912                           ;main.c: 56: rsend(T1ZOH >> 8);
   913  01D9  0877               	movf	_T1ZOH+1,w
   914  01DA  120A  118A  2224  120A  118A  	fcall	_rsend
   915                           
   916                           ;main.c: 57: rsend(T1ZOH);
   917  01DF  0876               	movf	_T1ZOH,w
   918  01E0  120A  118A  2224   	fcall	_rsend
   919                           
   920                           ;main.c: 58: TMR1 -= T1ZOH;
   921  01E3  0876               	movf	_T1ZOH,w
   922  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   923  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   924  01E6  028E               	subwf	14,f	;volatile
   925  01E7  0877               	movf	_T1ZOH+1,w
   926  01E8  1C03               	skipc
   927  01E9  038F               	decf	15,f	;volatile
   928  01EA  028F               	subwf	15,f	;volatile
   929  01EB  0008               	return
   930  01EC                     __end_of_read_tmr1:	
   931                           
   932                           	psect	text4
   933  0224                     __ptext4:	
   934 ;; *************** function _rsend *****************
   935 ;; Defined at:
   936 ;;		line 42 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  msg             1    wreg     unsigned char 
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  msg             1    5[COMMON] unsigned char 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   950 ;;      Params:         0       0       0       0       0
   951 ;;      Locals:         1       0       0       0       0
   952 ;;      Temps:          0       0       0       0       0
   953 ;;      Totals:         1       0       0       0       0
   954 ;;Total ram usage:        1 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    1
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_read_tmr1
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           
   965                           ;psect for function _rsend
   966  0224                     _rsend:	
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _rsend: [wreg]
   970                           ;rsend@msg stored from wreg
   971  0224  00F5               	movwf	rsend@msg
   972  0225                     l70:	
   973                           ;main.c: 43: while (!TXIF) continue;
   974                           
   975  0225  1283               	bcf	3,5	;RP0=0, select bank0
   976  0226  1303               	bcf	3,6	;RP1=0, select bank0
   977  0227  1E0C               	btfss	12,4	;volatile
   978  0228  2A25               	goto	l70
   979                           
   980                           ;main.c: 44: TXREG = msg;
   981  0229  0875               	movf	rsend@msg,w
   982  022A  0099               	movwf	25	;volatile
   983  022B  0008               	return
   984  022C                     __end_of_rsend:	
   985                           
   986                           	psect	text5
   987  0151                     __ptext5:	
   988 ;; *************** function _beep *****************
   989 ;; Defined at:
   990 ;;		line 31 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  dash            1    wreg     unsigned char 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  dash            1    0[BANK0 ] unsigned char 
   995 ;;  j               2    3[BANK0 ] int 
   996 ;;  j               2    1[BANK0 ] int 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, btemp+1
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1006 ;;      Params:         0       0       0       0       0
  1007 ;;      Locals:         0       5       0       0       0
  1008 ;;      Temps:          1       0       0       0       0
  1009 ;;      Totals:         1       5       0       0       0
  1010 ;;Total ram usage:        6 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    1
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           
  1021                           ;psect for function _beep
  1022  0151                     _beep:	
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1026                           ;beep@dash stored from wreg
  1027  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0153  00B1               	movwf	beep@dash
  1030                           
  1031                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1032  0154  0831               	movf	beep@dash,w
  1033  0155  1D03               	btfss	3,2
  1034  0156  297F               	goto	l776
  1035  0157  01B2               	clrf	beep@j
  1036  0158  01B3               	clrf	beep@j+1
  1037  0159                     L1:	
  1038  0159  0833               	movf	beep@j+1,w
  1039  015A  3A80               	xorlw	128
  1040  015B  00FF               	movwf	127
  1041  015C  3080               	movlw	128
  1042  015D  027F               	subwf	127,w
  1043  015E  1D03               	skipz
  1044  015F  2962               	goto	u205
  1045  0160  3064               	movlw	100
  1046  0161  0232               	subwf	beep@j,w
  1047  0162                     u205:	
  1048  0162  1803               	btfsc	3,0
  1049  0163  0008               	return
  1050                           
  1051                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1052  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1053  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1054  0166  1685               	bsf	5,5
  1055  0167  30C7               	movlw	199
  1056  0168  00F5               	movwf	??_beep
  1057  0169                     u457:	
  1058  0169  296A               	nop2
  1059  016A  0BF5               	decfsz	??_beep,f
  1060  016B  2969               	goto	u457
  1061  016C  296D               	nop2
  1062  016D  296E               	nop2
  1063                           
  1064                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1065  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1066  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0170  1285               	bcf	5,5
  1068  0171  30A6               	movlw	166
  1069  0172  00F5               	movwf	??_beep
  1070  0173                     u467:	
  1071  0173  0BF5               	decfsz	??_beep,f
  1072  0174  2973               	goto	u467
  1073  0175  0000               	nop
  1074  0176  3001               	movlw	1
  1075  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1076  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1077  0179  07B2               	addwf	beep@j,f
  1078  017A  1803               	skipnc
  1079  017B  0AB3               	incf	beep@j+1,f
  1080  017C  3000               	movlw	0
  1081  017D  07B3               	addwf	beep@j+1,f
  1082  017E  2959               	goto	L1
  1083  017F                     l776:	
  1084                           ;main.c: 35: }
  1085                           
  1086                           
  1087                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1088  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1089  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1090  0181  01B4               	clrf	beep@j_56
  1091  0182  01B5               	clrf	beep@j_56+1
  1092  0183                     L2:	
  1093  0183  0835               	movf	beep@j_56+1,w
  1094  0184  3A80               	xorlw	128
  1095  0185  00FF               	movwf	127
  1096  0186  3081               	movlw	129
  1097  0187  027F               	subwf	127,w
  1098  0188  1D03               	skipz
  1099  0189  298C               	goto	u225
  1100  018A  30F4               	movlw	244
  1101  018B  0234               	subwf	beep@j_56,w
  1102  018C                     u225:	
  1103  018C  1803               	btfsc	3,0
  1104  018D  0008               	return
  1105                           
  1106                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1107  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1108  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0190  1685               	bsf	5,5
  1110  0191  30C7               	movlw	199
  1111  0192  00F5               	movwf	??_beep
  1112  0193                     u477:	
  1113  0193  2994               	nop2
  1114  0194  0BF5               	decfsz	??_beep,f
  1115  0195  2993               	goto	u477
  1116  0196  2997               	nop2
  1117  0197  2998               	nop2
  1118                           
  1119                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1120  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1121  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1122  019A  1285               	bcf	5,5
  1123  019B  30A6               	movlw	166
  1124  019C  00F5               	movwf	??_beep
  1125  019D                     u487:	
  1126  019D  0BF5               	decfsz	??_beep,f
  1127  019E  299D               	goto	u487
  1128  019F  0000               	nop
  1129  01A0  3001               	movlw	1
  1130  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1131  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1132  01A3  07B4               	addwf	beep@j_56,f
  1133  01A4  1803               	skipnc
  1134  01A5  0AB5               	incf	beep@j_56+1,f
  1135  01A6  3000               	movlw	0
  1136  01A7  07B5               	addwf	beep@j_56+1,f
  1137  01A8  2983               	goto	L2
  1138  01A9                     __end_of_beep:	
  1139                           
  1140                           	psect	text6
  1141  01A9                     __ptext6:	
  1142 ;; *************** function _sampling *****************
  1143 ;; Defined at:
  1144 ;;		line 70 in file "main.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, status,2, status,0
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1158 ;;      Params:         0       0       0       0       0
  1159 ;;      Locals:         0       0       0       0       0
  1160 ;;      Temps:          5       0       0       0       0
  1161 ;;      Totals:         5       0       0       0       0
  1162 ;;Total ram usage:        5 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		Interrupt level 1
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           
  1172                           ;psect for function _sampling
  1173  01A9                     _sampling:	
  1174                           
  1175                           ;main.c: 71: if (kT0 < T0PS) kT0++;
  1176  01A9  083C               	movf	_T0PS,w
  1177  01AA  0278               	subwf	_kT0,w	;volatile
  1178  01AB  1803               	skipnc
  1179  01AC  29B2               	goto	i1l812
  1180  01AD  3001               	movlw	1
  1181  01AE  00F0               	movwf	??_sampling
  1182  01AF  0870               	movf	??_sampling,w
  1183  01B0  07F8               	addwf	_kT0,f	;volatile
  1184  01B1  29C7               	goto	i1l824
  1185  01B2                     i1l812:	
  1186                           
  1187                           ;main.c: 72: else {
  1188                           ;main.c: 73: kT0 = 0;
  1189  01B2  01F8               	clrf	_kT0	;volatile
  1190                           
  1191                           ;main.c: 74: T1ZOH = TMR1;
  1192  01B3  080F               	movf	15,w	;volatile
  1193  01B4  00F7               	movwf	_T1ZOH+1
  1194  01B5  080E               	movf	14,w	;volatile
  1195  01B6  00F6               	movwf	_T1ZOH
  1196  01B7                     i1l102:	
  1197                           ;main.c: 75: while (!TXIF) continue; TXREG = T1ZOH;
  1198                           
  1199  01B7  1E0C               	btfss	12,4	;volatile
  1200  01B8  29B7               	goto	i1l102
  1201  01B9  0876               	movf	_T1ZOH,w
  1202  01BA  0099               	movwf	25	;volatile
  1203  01BB                     i1l105:	
  1204                           ;main.c: 76: while (!TXIF) continue; TXREG = T1ZOH >> 8;
  1205                           
  1206  01BB  1E0C               	btfss	12,4	;volatile
  1207  01BC  29BB               	goto	i1l105
  1208  01BD  0877               	movf	_T1ZOH+1,w
  1209  01BE  0099               	movwf	25	;volatile
  1210                           
  1211                           ;main.c: 77: TMR1 -= T1ZOH;
  1212  01BF  0876               	movf	_T1ZOH,w
  1213  01C0  028E               	subwf	14,f	;volatile
  1214  01C1  0877               	movf	_T1ZOH+1,w
  1215  01C2  1C03               	skipc
  1216  01C3  038F               	decf	15,f	;volatile
  1217  01C4  028F               	subwf	15,f	;volatile
  1218                           
  1219                           ;main.c: 78: PWM = PWMZOH;
  1220  01C5  083B               	movf	_PWMZOH,w
  1221  01C6  009B               	movwf	27
  1222  01C7                     i1l824:	
  1223                           
  1224                           ;main.c: 79: }
  1225                           ;main.c: 80: TMR0IF = 0;
  1226  01C7  110B               	bcf	11,2	;volatile
  1227  01C8  0874               	movf	??_sampling+4,w
  1228  01C9  00FF               	movwf	127
  1229  01CA  0873               	movf	??_sampling+3,w
  1230  01CB  008A               	movwf	10
  1231  01CC  0872               	movf	??_sampling+2,w
  1232  01CD  0084               	movwf	4
  1233  01CE  0E71               	swapf	(??_sampling+1)^(0+-128),w
  1234  01CF  0083               	movwf	3
  1235  01D0  0EFE               	swapf	126,f
  1236  01D1  0E7E               	swapf	126,w
  1237  01D2  0009               	retfie
  1238  01D3                     __end_of_sampling:	
  1239  007E                     btemp	set	126	;btemp
  1240  007E                     wtemp0	set	126
  1241                           
  1242                           	psect	intentry
  1243  0004                     __pintentry:	
  1244                           ;incstack = 0
  1245                           ; Regs used in _sampling: [wreg+status,2+status,0]
  1246                           
  1247  0004                     interrupt_function:	
  1248  007E                     saved_w	set	btemp
  1249  0004  00FE               	movwf	btemp
  1250  0005  0E03               	swapf	3,w
  1251  0006  00F1               	movwf	??_sampling+1
  1252  0007  0804               	movf	4,w
  1253  0008  00F2               	movwf	??_sampling+2
  1254  0009  080A               	movf	10,w
  1255  000A  00F3               	movwf	??_sampling+3
  1256  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1257  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1258  000D  087F               	movf	btemp+1,w
  1259  000E  00F4               	movwf	??_sampling+4
  1260  000F  120A  118A  29A9   	ljmp	_sampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80     10      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     428
                                              5 BANK0      5     5      0
                               _beep
                          _read_tmr1
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (2) _rsend                                                1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              5 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsget
   _write

 _sampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      27      12        0.0%
ABS                  0      0      27       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Jan  1 09:17:03 2018

                      pc 0002              __CFG_CP$OFF 0000                       l70 0225  
                     l76 022C                       l85 01F7                       _RC 003D  
                     fsr 0004                      TMR0 0001                      l806 01FD  
                    l776 017F                      l960 008C                      l962 0092  
                    l954 00DB                      l964 009B                      l966 00A9  
                    l974 00BC                      l982 00F6                      l976 00D8  
                    l994 0117                      l988 0125                      l998 011C  
                    _BUF 0020                      _BUZ 002D                      u205 0162  
                    u225 018C                      _PR2 0092                      u407 0067  
                    u417 0077             __CFG_CPD$OFF 0000                      u427 0087  
                    u437 0102                      u447 0112                      u457 0169  
                    u467 0173                      u477 0193                      u487 019D  
                    _PWM 001B                      _kT0 0078                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000                     T1CON 0010  
           __CFG_LVP$OFF 0000                     _T0PS 003C                     _RCIF 0065  
                   _TMR1 000E                     _TXIF 0064             __CFG_WRT$OFF 0000  
                   _beep 0151                     _main 002B                     btemp 007E  
                   start 0012                    INTCON 000B                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    i1l102 01B7                    i1l105 01BB  
                  _T1ZOH 0076                    i1l812 01B2                    i1l824 01C7  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0032                    _rsend 0224                    _rsget 022C  
                  main@x 0038                    _write 01EC           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_beep 01A9             __end_of_main 0151  
                 ??_beep 0075                   ??_main 0036                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070                   _INTCON 000B  
                 _TMR0IF 005A                   _PWMZOH 003B           __CFG_PWRTE$OFF 0000  
       __end_of_sampling 01D3                   saved_w 007E  __end_of__initialization 0027  
         __pcstackCOMMON 0070             __pidataBANK0 0202            __end_of_rsend 022C  
          __end_of_rsget 0232            __end_of_write 0202                  ??_rsend 0075  
                ??_rsget 0075                  ??_write 0075               __pbssBANK0 003B  
     __size_of_read_tmr1 0019               __pmaintext 002B               __pintentry 0004  
                _CCP1CON 0017                  _CCP2CON 001D                ?_sampling 0070  
                __ptext1 01EC                  __ptext2 022C                  __ptext3 01D3  
                __ptext4 0224                  __ptext5 0151                  __ptext6 01A9  
      __end_of_read_tmr1 01EC                  main@cmd 003A                  main@msg 0039  
   end_of_initialization 0027               ??_sampling 0070      start_initialization 0015  
             init_fetch0 0213              __pdataBANK0 0020              __pbssCOMMON 0076  
              ___latbits 0002            __pcstackBANK0 0031        __size_of_sampling 002A  
              _read_tmr1 01D3           __size_of_rsend 0008           __size_of_rsget 0006  
         __size_of_write 0016        interrupt_function 0004               ?_read_tmr1 0070  
               beep@j_56 0034                 beep@dash 0031            __size_of_beep 0058  
          __size_of_main 0126                 _sampling 01A9                 init_ram0 0217  
            ??_read_tmr1 0076                 intlevel1 0000                write@duty 0075  
               rsend@msg 0075               _OPTION_REG 0081  
