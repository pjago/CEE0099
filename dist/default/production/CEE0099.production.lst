

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Dec 11 01:18:08 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	bitnvCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           ; Version 1.43
    37                           ; Generated 25/07/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataCOMRAM
    72  00107A                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _FAN
    76  00107A  FFFF               	dw	65535
    77  00107C  0000               	dw	0
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	opt stack 0
    82  000800  00                 	db	0
    83  000801                     _dpowers:
    84                           	opt stack 0
    85  000801  0001               	dw	1
    86  000803  000A               	dw	10
    87  000805  0064               	dw	100
    88  000807  03E8               	dw	1000
    89  000809  2710               	dw	10000
    90  00080B                     __end_of_dpowers:
    91                           	opt stack 0
    92  00080B                     _BAUD:
    93                           	opt stack 0
    94  00080B  4B00               	dw	19200
    95  00080D  0000               	dw	0
    96  00080F                     __end_of_BAUD:
    97                           	opt stack 0
    98  00080F                     _IFOSC:
    99                           	opt stack 0
   100  00080F  4B40               	dw	19264
   101  000811  004C               	dw	76
   102  000813                     __end_of_IFOSC:
   103                           	opt stack 0
   104  000813                     _T1FOSC:
   105                           	opt stack 0
   106  000813  0168               	dw	360
   107  000815                     __end_of_T1FOSC:
   108                           	opt stack 0
   109  000815                     STR_1:
   110  000815  4C                 	db	76	;'L'
   111  000816  41                 	db	65	;'A'
   112  000817  42                 	db	66	;'B'
   113  000818  2E                 	db	46
   114  000819  43                 	db	67	;'C'
   115  00081A  4F                 	db	79	;'O'
   116  00081B  4E                 	db	78	;'N'
   117  00081C  54                 	db	84	;'T'
   118  00081D  2E                 	db	46
   119  00081E  44                 	db	68	;'D'
   120  00081F  49                 	db	73	;'I'
   121  000820  47                 	db	71	;'G'
   122  000821  49                 	db	73	;'I'
   123  000822  54                 	db	84	;'T'
   124  000823  41                 	db	65	;'A'
   125  000824  4C                 	db	76	;'L'
   126  000825  00                 	db	0
   127  000826                     STR_2:
   128  000826  53                 	db	83	;'S'
   129  000827  65                 	db	101	;'e'
   130  000828  6A                 	db	106	;'j'
   131  000829  61                 	db	97	;'a'
   132  00082A  20                 	db	32
   133  00082B  42                 	db	66	;'B'
   134  00082C  65                 	db	101	;'e'
   135  00082D  6D                 	db	109	;'m'
   136  00082E  2D                 	db	45
   137  00082F  56                 	db	86	;'V'
   138  000830  69                 	db	105	;'i'
   139  000831  6E                 	db	110	;'n'
   140  000832  64                 	db	100	;'d'
   141  000833  6F                 	db	111	;'o'
   142  000834  21                 	db	33
   143  000835  00                 	db	0
   144  000836                     STR_4:
   145  000836  70                 	db	112	;'p'
   146  000837  77                 	db	119	;'w'
   147  000838  6D                 	db	109	;'m'
   148  000839  3A                 	db	58	;':'
   149  00083A  20                 	db	32
   150  00083B  25                 	db	37
   151  00083C  33                 	db	51	;'3'
   152  00083D  64                 	db	100	;'d'
   153  00083E  25                 	db	37
   154  00083F  25                 	db	37
   155  000840  00                 	db	0
   156  000841                     STR_3:
   157  000841  72                 	db	114	;'r'
   158  000842  70                 	db	112	;'p'
   159  000843  73                 	db	115	;'s'
   160  000844  3A                 	db	58	;':'
   161  000845  20                 	db	32
   162  000846  25                 	db	37
   163  000847  33                 	db	51	;'3'
   164  000848  75                 	db	117	;'u'
   165  000849  00                 	db	0
   166  00084A                     STR_5:
   167  00084A  25                 	db	37
   168  00084B  75                 	db	117	;'u'
   169  00084C  00                 	db	0
   170  0000                     
   171                           ; #config settings
   172  00084D  00                 	db	0	; dummy byte at the end
   173  0000                     
   174                           	psect	bitnvCOMRAM
   175  000240                     __pbitnvCOMRAM:
   176                           	opt stack 0
   177  000240                     _PUT:
   178                           	opt stack 0
   179  000240                     	ds	1
   180  0000                     _TMR0	set	4054
   181  0000                     _TMR1	set	4046
   182  0000                     _SPBRG	set	4015
   183  0000                     _TXSTA	set	4012
   184  0000                     _RCSTA	set	4011
   185  0000                     _TRISA	set	3986
   186  0000                     _TRISE	set	3990
   187  0000                     _TRISD	set	3989
   188  0000                     _TRISB	set	3987
   189  0000                     _INTCON2	set	4081
   190  0000                     _INTCON	set	4082
   191  0000                     _T0CON	set	4053
   192  0000                     _TRISC	set	3988
   193  0000                     _T2CON	set	4042
   194  0000                     _PR2	set	4043
   195  0000                     _CCPR1L	set	4030
   196  0000                     _CCP1CON	set	4029
   197  0000                     _T1CON	set	4045
   198  0000                     _RCREG	set	4014
   199  0000                     _TXREG	set	4013
   200  0000                     _INT0IF	set	32657
   201  0000                     _RCIF	set	31989
   202  0000                     _TXIF	set	31988
   203                           
   204                           	psect	cinit
   205  000FB2                     __pcinit:
   206                           	opt stack 0
   207  000FB2                     start_initialization:
   208                           	opt stack 0
   209  000FB2                     __initialization:
   210                           	opt stack 0
   211                           
   212                           ; Initialize objects allocated to COMRAM (4 bytes)
   213                           ; load TBLPTR registers with __pidataCOMRAM
   214  000FB2  0E7A               	movlw	low __pidataCOMRAM
   215  000FB4  6EF6               	movwf	tblptrl,c
   216  000FB6  0E10               	movlw	high __pidataCOMRAM
   217  000FB8  6EF7               	movwf	tblptrh,c
   218  000FBA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   219  000FBC  6EF8               	movwf	tblptru,c
   220  000FBE  EE00  F044         	lfsr	0,__pdataCOMRAM
   221  000FC2  EE10 F004          	lfsr	1,4
   222  000FC6                     copy_data0:
   223  000FC6  0009               	tblrd		*+
   224  000FC8  CFF5 FFEE          	movff	tablat,postinc0
   225  000FCC  50E5               	movf	postdec1,w,c
   226  000FCE  50E1               	movf	fsr1l,w,c
   227  000FD0  E1FA               	bnz	copy_data0
   228  000FD2                     end_of_initialization:
   229                           	opt stack 0
   230  000FD2                     __end_of__initialization:
   231                           	opt stack 0
   232  000FD2  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   233  000FD4  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   234  000FD6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   235  000FD8  6EF8               	movwf	tblptru,c
   236  000FDA  0100               	movlb	0
   237  000FDC  EF23  F006         	goto	_main	;jump to C main() function
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           postdec1	equ	0xFE5
   244                           fsr1l	equ	0xFE1
   245                           
   246                           	psect	dataCOMRAM
   247  000044                     __pdataCOMRAM:
   248                           	opt stack 0
   249  000044                     _FAN:
   250                           	opt stack 0
   251  000044                     	ds	4
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           postdec1	equ	0xFE5
   258                           fsr1l	equ	0xFE1
   259                           
   260                           	psect	cstackBANK0
   261  000060                     __pcstackBANK0:
   262                           	opt stack 0
   263  000060                     main@buffer:
   264                           	opt stack 0
   265                           
   266                           ; 6 bytes @ 0x0
   267  000060                     	ds	6
   268  000066                     main@idx:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x6
   272  000066                     	ds	2
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           postdec1	equ	0xFE5
   279                           fsr1l	equ	0xFE1
   280                           
   281                           	psect	cstackCOMRAM
   282  000001                     __pcstackCOMRAM:
   283                           	opt stack 0
   284  000001                     ??_raycast_intersection_cleared:
   285  000001                     
   286                           ; 2 bytes @ 0x0
   287  000001                     	ds	18
   288  000013                     ??_isdigit:
   289  000013                     ??_beep:
   290  000013                     ?___wmul:
   291                           	opt stack 0
   292  000013                     putch@msg:
   293                           	opt stack 0
   294  000013                     prog_lcd@msg:
   295                           	opt stack 0
   296  000013                     write@duty:
   297                           	opt stack 0
   298  000013                     ___wmul@multiplier:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x12
   302  000013                     	ds	1
   303  000014                     _isdigit$378:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x13
   307  000014                     	ds	1
   308  000015                     isdigit@c:
   309                           	opt stack 0
   310  000015                     beep@j:
   311                           	opt stack 0
   312  000015                     ___wmul@multiplicand:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x14
   316  000015                     	ds	2
   317  000017                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x16
   321  000017                     	ds	2
   322  000019                     ?___lwdiv:
   323                           	opt stack 0
   324  000019                     ___lwdiv@dividend:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x18
   328  000019                     	ds	2
   329  00001B                     ___lwdiv@divisor:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x1A
   333  00001B                     	ds	2
   334  00001D                     ___lwdiv@counter:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x1C
   338  00001D                     	ds	1
   339  00001E                     ___lwdiv@quotient:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x1D
   343  00001E                     	ds	2
   344  000020                     ?___lwmod:
   345                           	opt stack 0
   346  000020                     ?_rps_timer1:
   347                           	opt stack 0
   348  000020                     ___lwmod@dividend:
   349                           	opt stack 0
   350  000020                     rps_timer1@x:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x1F
   354  000020                     	ds	2
   355  000022                     ___lwmod@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x21
   359  000022                     	ds	2
   360  000024                     ___lwmod@counter:
   361                           	opt stack 0
   362  000024                     rps_timer1@dt:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x23
   366  000024                     	ds	1
   367  000025                     ?_printf:
   368                           	opt stack 0
   369  000025                     printf@f:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x24
   373  000025                     	ds	1
   374  000026                     
   375                           ; 1 bytes @ 0x25
   376  000026                     	ds	3
   377  000029                     ??_printf:
   378                           
   379                           ; 1 bytes @ 0x28
   380  000029                     	ds	4
   381  00002D                     printf@cp:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x2C
   385  00002D                     	ds	2
   386  00002F                     printf@prec:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x2E
   390  00002F                     	ds	1
   391  000030                     printf@ap:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x2F
   395  000030                     	ds	2
   396  000032                     printf@len:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x31
   400  000032                     	ds	2
   401  000034                     printf@flag:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x33
   405  000034                     	ds	1
   406  000035                     printf@val:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x34
   410  000035                     	ds	2
   411  000037                     printf@width:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x36
   415  000037                     	ds	2
   416  000039                     printf@c:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x38
   420  000039                     	ds	1
   421  00003A                     ??_init_lcd:
   422  00003A                     main_lcd@value:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x39
   426  00003A                     	ds	2
   427  00003C                     main_lcd@duty:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x3B
   431  00003C                     	ds	1
   432  00003D                     io_switch@x:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x3C
   436  00003D                     	ds	2
   437  00003F                     ?_buffer_serial:
   438                           	opt stack 0
   439  00003F                     buffer_serial@buffer:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x3E
   443  00003F                     	ds	2
   444  000041                     buffer_serial@idx:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x40
   448  000041                     	ds	2
   449  000043                     
   450                           ; 1 bytes @ 0x42
   451  000043                     	ds	1
   452  000044                     tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           ; 1 bytes @ 0x43
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 231 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  buffer          6    0[BANK0 ] unsigned char [6]
   471 ;;  idx             2    6[BANK0 ] int 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  2  135[None  ] int 
   474 ;; Registers used:
   475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   481 ;;      Params:         0       0       0       0       0       0       0       0       0
   482 ;;      Locals:         0       8       0       0       0       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0       0       0       0       0
   484 ;;      Totals:         0       8       0       0       0       0       0       0       0
   485 ;;Total ram usage:        8 bytes
   486 ;; Hardware stack levels required when called:    6
   487 ;; This function calls:
   488 ;;		_beep
   489 ;;		_buffer_serial
   490 ;;		_init_lcd
   491 ;; This function is called by:
   492 ;;		Startup code after reset
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text0
   497  000C46                     __ptext0:
   498                           	opt stack 0
   499  000C46                     _main:
   500                           	opt stack 25
   501                           
   502                           ;main.c: 232: T1CON = 0x0B;
   503                           
   504                           ;incstack = 0
   505  000C46  0E0B               	movlw	11
   506  000C48  6ECD               	movwf	4045,c	;volatile
   507                           
   508                           ;main.c: 233: CCP1CON = 0x0F;
   509  000C4A  0E0F               	movlw	15
   510  000C4C  6EBD               	movwf	4029,c	;volatile
   511                           
   512                           ;main.c: 234: CCPR1L = 0;
   513  000C4E  0E00               	movlw	0
   514  000C50  6EBE               	movwf	4030,c	;volatile
   515                           
   516                           ;main.c: 235: PR2 = 100;
   517  000C52  0E64               	movlw	100
   518  000C54  6ECB               	movwf	4043,c	;volatile
   519                           
   520                           ;main.c: 236: T2CON = 0x04;
   521  000C56  0E04               	movlw	4
   522  000C58  6ECA               	movwf	4042,c	;volatile
   523                           
   524                           ;main.c: 237: TRISC = 0xFB;
   525  000C5A  0EFB               	movlw	251
   526  000C5C  6E94               	movwf	3988,c	;volatile
   527                           
   528                           ;main.c: 238: T0CON = 0xFF;
   529  000C5E  68D5               	setf	4053,c	;volatile
   530                           
   531                           ;main.c: 239: INTCON = 0x90;
   532  000C60  0E90               	movlw	144
   533  000C62  6EF2               	movwf	intcon,c	;volatile
   534                           
   535                           ;main.c: 240: INTCON2 = 0x00;
   536  000C64  0E00               	movlw	0
   537  000C66  6EF1               	movwf	intcon2,c	;volatile
   538                           
   539                           ;main.c: 241: TRISB = 0x7F;
   540  000C68  0E7F               	movlw	127
   541  000C6A  6E93               	movwf	3987,c	;volatile
   542                           
   543                           ;main.c: 242: INTCON = 0x90;
   544  000C6C  0E90               	movlw	144
   545  000C6E  6EF2               	movwf	intcon,c	;volatile
   546                           
   547                           ;main.c: 243: TRISD = 0x00;
   548  000C70  0E00               	movlw	0
   549  000C72  6E95               	movwf	3989,c	;volatile
   550                           
   551                           ;main.c: 244: TRISE = 0xF8;
   552  000C74  0EF8               	movlw	248
   553  000C76  6E96               	movwf	3990,c	;volatile
   554                           
   555                           ;main.c: 245: TRISA = 0xCF;
   556  000C78  0ECF               	movlw	207
   557  000C7A  6E92               	movwf	3986,c	;volatile
   558                           
   559                           ;main.c: 246: RCSTA = 0x90;
   560  000C7C  0E90               	movlw	144
   561  000C7E  6EAB               	movwf	4011,c	;volatile
   562                           
   563                           ;main.c: 247: TXSTA = 0x24;
   564  000C80  0E24               	movlw	36
   565  000C82  6EAC               	movwf	4012,c	;volatile
   566                           
   567                           ;main.c: 248: SPBRG = 64;
   568  000C84  0E40               	movlw	64
   569  000C86  6EAF               	movwf	4015,c	;volatile
   570                           
   571                           ;main.c: 249: init_lcd();
   572  000C88  EC60  F006         	call	_init_lcd	;wreg free
   573                           
   574                           ;main.c: 250: beep();
   575  000C8C  ECD3  F006         	call	_beep	;wreg free
   576                           
   577                           ;main.c: 251: beep();
   578  000C90  ECD3  F006         	call	_beep	;wreg free
   579                           
   580                           ;main.c: 252: beep();
   581  000C94  ECD3  F006         	call	_beep	;wreg free
   582                           
   583                           ;main.c: 253: char buffer[6];
   584                           ;main.c: 254: int idx = 0;
   585  000C98  0E00               	movlw	0
   586  000C9A  0100               	movlb	0	; () banked
   587  000C9C  6F67               	movwf	(main@idx+1)& (0+255),b
   588  000C9E  0E00               	movlw	0
   589  000CA0  6F66               	movwf	main@idx& (0+255),b
   590  000CA2                     
   591                           ; BSR set to: 0
   592  000CA2  0E60               	movlw	low main@buffer
   593  000CA4  6E3F               	movwf	buffer_serial@buffer,c
   594  000CA6  0E00               	movlw	high main@buffer
   595  000CA8  6E40               	movwf	buffer_serial@buffer+1,c
   596  000CAA  C066  F041         	movff	main@idx,buffer_serial@idx
   597  000CAE  C067  F042         	movff	main@idx+1,buffer_serial@idx+1
   598  000CB2  EC78  F007         	call	_buffer_serial	;wreg free
   599  000CB6  C03F  F066         	movff	?_buffer_serial,main@idx
   600  000CBA  C040  F067         	movff	?_buffer_serial+1,main@idx+1
   601  000CBE  D7F1               	goto	l136
   602  000CC0                     __end_of_main:
   603                           	opt stack 0
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           intcon	equ	0xFF2
   609                           intcon2	equ	0xFF1
   610                           postinc0	equ	0xFEE
   611                           postdec1	equ	0xFE5
   612                           fsr1l	equ	0xFE1
   613                           
   614 ;; *************** function _init_lcd *****************
   615 ;; Defined at:
   616 ;;		line 130 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   630 ;;      Params:         0       0       0       0       0       0       0       0       0
   631 ;;      Locals:         0       0       0       0       0       0       0       0       0
   632 ;;      Temps:          1       0       0       0       0       0       0       0       0
   633 ;;      Totals:         1       0       0       0       0       0       0       0       0
   634 ;;Total ram usage:        1 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:    3
   637 ;; This function calls:
   638 ;;		_printf
   639 ;;		_prog_lcd
   640 ;; This function is called by:
   641 ;;		_main
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text1
   646  000CC0                     __ptext1:
   647                           	opt stack 0
   648  000CC0                     _init_lcd:
   649                           	opt stack 27
   650                           
   651                           ;main.c: 131: PUT = 1;
   652                           
   653                           ;incstack = 0
   654  000CC0  8048               	bsf	_PUT/(0+8),_PUT& (0+7),c
   655                           
   656                           ;main.c: 132: LCD.RW = 0;
   657  000CC2  9284               	bcf	3972,1,c
   658                           
   659                           ;main.c: 133: prog_lcd(0x30); _delay((unsigned long)((5)*(20000000/4000.0)));
   660  000CC4  0E30               	movlw	48
   661  000CC6  EC27  F008         	call	_prog_lcd
   662  000CCA  0E21               	movlw	33
   663  000CCC  6E3A               	movwf	??_init_lcd& (0+255),c
   664  000CCE  0E76               	movlw	118
   665  000CD0                     u987:
   666  000CD0  2EE8               	decfsz	wreg,f,c
   667  000CD2  D7FE               	bra	u987
   668  000CD4  2E3A               	decfsz	??_init_lcd& (0+255),f,c
   669  000CD6  D7FC               	bra	u987
   670  000CD8  D000               	nop2	
   671                           
   672                           ;main.c: 134: prog_lcd(0x30); _delay((unsigned long)((100)*(20000000/4000000.0)));
   673  000CDA  0E30               	movlw	48
   674  000CDC  EC27  F008         	call	_prog_lcd
   675  000CE0  0EA6               	movlw	166
   676  000CE2                     u997:
   677  000CE2  2EE8               	decfsz	wreg,f,c
   678  000CE4  D7FE               	bra	u997
   679  000CE6  D000               	nop2	
   680                           
   681                           ;main.c: 135: prog_lcd(0x30);
   682  000CE8  0E30               	movlw	48
   683  000CEA  EC27  F008         	call	_prog_lcd
   684                           
   685                           ;main.c: 136: prog_lcd(0x38);
   686  000CEE  0E38               	movlw	56
   687  000CF0  EC27  F008         	call	_prog_lcd
   688                           
   689                           ;main.c: 137: prog_lcd(0x01); _delay((unsigned long)((2)*(20000000/4000.0)));
   690  000CF4  0E01               	movlw	1
   691  000CF6  EC27  F008         	call	_prog_lcd
   692  000CFA  0E0D               	movlw	13
   693  000CFC  6E3A               	movwf	??_init_lcd& (0+255),c
   694  000CFE  0EFC               	movlw	252
   695  000D00                     u1007:
   696  000D00  2EE8               	decfsz	wreg,f,c
   697  000D02  D7FE               	bra	u1007
   698  000D04  2E3A               	decfsz	??_init_lcd& (0+255),f,c
   699  000D06  D7FC               	bra	u1007
   700                           
   701                           ;main.c: 138: prog_lcd(0x0C);
   702  000D08  0E0C               	movlw	12
   703  000D0A  EC27  F008         	call	_prog_lcd
   704                           
   705                           ;main.c: 139: prog_lcd(0x06);
   706  000D0E  0E06               	movlw	6
   707  000D10  EC27  F008         	call	_prog_lcd
   708                           
   709                           ;main.c: 140: prog_lcd(0x80);
   710  000D14  0E80               	movlw	128
   711  000D16  EC27  F008         	call	_prog_lcd
   712                           
   713                           ;main.c: 141: printf("LAB.CONT.DIGITAL");
   714  000D1A  0E15               	movlw	low STR_1
   715  000D1C  6E25               	movwf	printf@f,c
   716  000D1E  0E08               	movlw	high STR_1
   717  000D20  6E26               	movwf	printf@f+1,c
   718  000D22  EC27  F004         	call	_printf	;wreg free
   719                           
   720                           ;main.c: 142: prog_lcd(0xC0);
   721  000D26  0EC0               	movlw	192
   722  000D28  EC27  F008         	call	_prog_lcd
   723                           
   724                           ;main.c: 143: printf("Seja Bem-Vindo!");
   725  000D2C  0E26               	movlw	low STR_2
   726  000D2E  6E25               	movwf	printf@f,c
   727  000D30  0E08               	movlw	high STR_2
   728  000D32  6E26               	movwf	printf@f+1,c
   729  000D34  EC27  F004         	call	_printf	;wreg free
   730  000D38  0012               	return	
   731  000D3A                     __end_of_init_lcd:
   732                           	opt stack 0
   733                           tblptru	equ	0xFF8
   734                           tblptrh	equ	0xFF7
   735                           tblptrl	equ	0xFF6
   736                           tablat	equ	0xFF5
   737                           intcon	equ	0xFF2
   738                           intcon2	equ	0xFF1
   739                           postinc0	equ	0xFEE
   740                           wreg	equ	0xFE8
   741                           postdec1	equ	0xFE5
   742                           fsr1l	equ	0xFE1
   743                           
   744 ;; *************** function _buffer_serial *****************
   745 ;; Defined at:
   746 ;;		line 219 in file "main.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;  buffer          2   62[COMRAM] PTR unsigned char 
   749 ;;		 -> main@buffer(6), 
   750 ;;  idx             2   64[COMRAM] int 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  2   62[COMRAM] int 
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   762 ;;      Params:         4       0       0       0       0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0       0       0       0       0
   764 ;;      Temps:          1       0       0       0       0       0       0       0       0
   765 ;;      Totals:         5       0       0       0       0       0       0       0       0
   766 ;;Total ram usage:        5 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    5
   769 ;; This function calls:
   770 ;;		_getch
   771 ;;		_io_switch
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text2
   778  000EF0                     __ptext2:
   779                           	opt stack 0
   780  000EF0                     _buffer_serial:
   781                           	opt stack 25
   782                           
   783                           ;main.c: 220: buffer[idx] = getch();
   784                           
   785                           ;incstack = 0
   786  000EF0  5041               	movf	buffer_serial@idx,w,c
   787  000EF2  243F               	addwf	buffer_serial@buffer,w,c
   788  000EF4  6ED9               	movwf	fsr2l,c
   789  000EF6  5042               	movf	buffer_serial@idx+1,w,c
   790  000EF8  2040               	addwfc	buffer_serial@buffer+1,w,c
   791  000EFA  6EDA               	movwf	fsr2h,c
   792  000EFC  EC39  F008         	call	_getch	;wreg free
   793  000F00  6EDF               	movwf	indf2,c
   794                           
   795                           ;main.c: 221: if (buffer[idx] == '\n') {
   796  000F02  5041               	movf	buffer_serial@idx,w,c
   797  000F04  243F               	addwf	buffer_serial@buffer,w,c
   798  000F06  6ED9               	movwf	fsr2l,c
   799  000F08  5042               	movf	buffer_serial@idx+1,w,c
   800  000F0A  2040               	addwfc	buffer_serial@buffer+1,w,c
   801  000F0C  6EDA               	movwf	fsr2h,c
   802  000F0E  0E0A               	movlw	10
   803  000F10  18DE               	xorwf	postinc2,w,c
   804  000F12  A4D8               	btfss	status,2,c
   805  000F14  D00B               	goto	l129
   806                           
   807                           ;main.c: 222: idx=0;
   808  000F16  0E00               	movlw	0
   809  000F18  6E42               	movwf	buffer_serial@idx+1,c
   810  000F1A  0E00               	movlw	0
   811  000F1C  6E41               	movwf	buffer_serial@idx,c
   812                           
   813                           ;main.c: 223: io_switch(buffer);
   814  000F1E  C03F  F03D         	movff	buffer_serial@buffer,io_switch@x
   815  000F22  C040  F03E         	movff	buffer_serial@buffer+1,io_switch@x+1
   816  000F26  EC74  F005         	call	_io_switch	;wreg free
   817                           
   818                           ;main.c: 224: }
   819  000F2A  D002               	goto	l130
   820  000F2C                     l129:
   821                           
   822                           ;main.c: 225: else {
   823                           ;main.c: 226: idx++;
   824  000F2C  4A41               	infsnz	buffer_serial@idx,f,c
   825  000F2E  2A42               	incf	buffer_serial@idx+1,f,c
   826  000F30                     l130:
   827                           
   828                           ;main.c: 227: }
   829                           ;main.c: 228: return idx;
   830  000F30  C041  F03F         	movff	buffer_serial@idx,?_buffer_serial
   831  000F34  C042  F040         	movff	buffer_serial@idx+1,?_buffer_serial+1
   832  000F38  0012               	return	
   833  000F3A                     __end_of_buffer_serial:
   834                           	opt stack 0
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           intcon	equ	0xFF2
   840                           intcon2	equ	0xFF1
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           postdec1	equ	0xFE5
   844                           fsr1l	equ	0xFE1
   845                           indf2	equ	0xFDF
   846                           postinc2	equ	0xFDE
   847                           fsr2h	equ	0xFDA
   848                           fsr2l	equ	0xFD9
   849                           status	equ	0xFD8
   850                           
   851 ;; *************** function _io_switch *****************
   852 ;; Defined at:
   853 ;;		line 205 in file "main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  x               2   60[COMRAM] PTR unsigned char 
   856 ;;		 -> main@buffer(6), 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   868 ;;      Params:         2       0       0       0       0       0       0       0       0
   869 ;;      Locals:         0       0       0       0       0       0       0       0       0
   870 ;;      Temps:          0       0       0       0       0       0       0       0       0
   871 ;;      Totals:         2       0       0       0       0       0       0       0       0
   872 ;;Total ram usage:        2 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    4
   875 ;; This function calls:
   876 ;;		_beep
   877 ;;		_main_lcd
   878 ;;		_read_tmr0
   879 ;;		_read_tmr1
   880 ;;		_write
   881 ;; This function is called by:
   882 ;;		_buffer_serial
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text3
   887  000AE8                     __ptext3:
   888                           	opt stack 0
   889  000AE8                     _io_switch:
   890                           	opt stack 25
   891                           
   892                           ;main.c: 206: switch (x[0]) {
   893                           
   894                           ;incstack = 0
   895  000AE8  D03A               	goto	l116
   896  000AEA  ECFF  F006         	call	_read_tmr0	;wreg free
   897  000AEE  D054               	goto	l118
   898  000AF0  EE20 F001          	lfsr	2,1
   899  000AF4  503D               	movf	io_switch@x,w,c
   900  000AF6  26D9               	addwf	fsr2l,f,c
   901  000AF8  503E               	movf	io_switch@x+1,w,c
   902  000AFA  22DA               	addwfc	fsr2h,f,c
   903  000AFC  50DF               	movf	indf2,w,c
   904  000AFE  EC35  F008         	call	_write
   905  000B02  D04A               	goto	l118
   906  000B04  ECFF  F006         	call	_read_tmr0	;wreg free
   907  000B08  EE20 F001          	lfsr	2,1
   908  000B0C  503D               	movf	io_switch@x,w,c
   909  000B0E  26D9               	addwf	fsr2l,f,c
   910  000B10  503E               	movf	io_switch@x+1,w,c
   911  000B12  22DA               	addwfc	fsr2h,f,c
   912  000B14  50DF               	movf	indf2,w,c
   913  000B16  EC35  F008         	call	_write
   914  000B1A  D03E               	goto	l118
   915  000B1C  EC52  F007         	call	_read_tmr1	;wreg free
   916  000B20  D03B               	goto	l118
   917  000B22  EE20 F001          	lfsr	2,1
   918  000B26  503D               	movf	io_switch@x,w,c
   919  000B28  26D9               	addwf	fsr2l,f,c
   920  000B2A  503E               	movf	io_switch@x+1,w,c
   921  000B2C  22DA               	addwfc	fsr2h,f,c
   922  000B2E  50DF               	movf	indf2,w,c
   923  000B30  EC35  F008         	call	_write
   924  000B34  D031               	goto	l118
   925  000B36  EC52  F007         	call	_read_tmr1	;wreg free
   926  000B3A  EE20 F001          	lfsr	2,1
   927  000B3E  503D               	movf	io_switch@x,w,c
   928  000B40  26D9               	addwf	fsr2l,f,c
   929  000B42  503E               	movf	io_switch@x+1,w,c
   930  000B44  22DA               	addwfc	fsr2h,f,c
   931  000B46  50DF               	movf	indf2,w,c
   932  000B48  EC35  F008         	call	_write
   933  000B4C  D025               	goto	l118
   934  000B4E                     
   935                           ;main.c: 214: case '2': write(0); beep(); beep(); break;
   936  000B4E  0E00               	movlw	0
   937  000B50  EC35  F008         	call	_write
   938  000B54  ECD3  F006         	call	_beep	;wreg free
   939  000B58  ECD3  F006         	call	_beep	;wreg free
   940                           
   941                           ;main.c: 215: }
   942  000B5C  D01D               	goto	l118
   943  000B5E                     l116:
   944  000B5E  C03D  FFD9         	movff	io_switch@x,fsr2l
   945  000B62  C03E  FFDA         	movff	io_switch@x+1,fsr2h
   946  000B66  50DF               	movf	indf2,w,c
   947                           
   948                           ; Switch size 1, requested type "space"
   949                           ; Number of cases is 8, Range of values is 49 to 120
   950                           ; switch strategies available:
   951                           ; Name         Instructions Cycles
   952                           ; simple_byte           25    13 (average)
   953                           ;	Chosen strategy is simple_byte
   954  000B68  0A31               	xorlw	49	; case 49
   955  000B6A  B4D8               	btfsc	status,2,c
   956  000B6C  D7CB               	goto	l120
   957  000B6E  0A03               	xorlw	3	; case 50
   958  000B70  B4D8               	btfsc	status,2,c
   959  000B72  D7ED               	goto	l124
   960  000B74  0A07               	xorlw	7	; case 53
   961  000B76  B4D8               	btfsc	status,2,c
   962  000B78  D7BB               	goto	l119
   963  000B7A  0A02               	xorlw	2	; case 55
   964  000B7C  B4D8               	btfsc	status,2,c
   965  000B7E  D7B5               	goto	l117
   966  000B80  0A45               	xorlw	69	; case 114
   967  000B82  B4D8               	btfsc	status,2,c
   968  000B84  D7CB               	goto	l121
   969  000B86  0A01               	xorlw	1	; case 115
   970  000B88  B4D8               	btfsc	status,2,c
   971  000B8A  D7E1               	goto	l124
   972  000B8C  0A04               	xorlw	4	; case 119
   973  000B8E  B4D8               	btfsc	status,2,c
   974  000B90  D7C8               	goto	l122
   975  000B92  0A0F               	xorlw	15	; case 120
   976  000B94  B4D8               	btfsc	status,2,c
   977  000B96  D7CF               	goto	l123
   978  000B98                     l118:
   979                           
   980                           ;main.c: 216: main_lcd(FAN.value, PWM);
   981  000B98  C046  F03A         	movff	_FAN+2,main_lcd@value	;volatile
   982  000B9C  C047  F03B         	movff	_FAN+3,main_lcd@value+1	;volatile
   983  000BA0  CFBE F03C          	movff	4030,main_lcd@duty
   984  000BA4  ECBE  F007         	call	_main_lcd	;wreg free
   985  000BA8  0012               	return		;funcret
   986  000BAA                     __end_of_io_switch:
   987                           	opt stack 0
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           intcon	equ	0xFF2
   993                           intcon2	equ	0xFF1
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           indf2	equ	0xFDF
   999                           postinc2	equ	0xFDE
  1000                           fsr2h	equ	0xFDA
  1001                           fsr2l	equ	0xFD9
  1002                           status	equ	0xFD8
  1003                           
  1004 ;; *************** function _write *****************
  1005 ;; Defined at:
  1006 ;;		line 199 in file "main.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;  duty            1    wreg     unsigned char 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  duty            1   18[COMRAM] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         0       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        1 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    1
  1027 ;; This function calls:
  1028 ;;		Nothing
  1029 ;; This function is called by:
  1030 ;;		_io_switch
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           	psect	text4
  1035  00106A                     __ptext4:
  1036                           	opt stack 0
  1037  00106A                     _write:
  1038                           	opt stack 27
  1039                           
  1040                           ;incstack = 0
  1041                           ;write@duty stored from wreg
  1042  00106A  6E13               	movwf	write@duty,c
  1043                           
  1044                           ;main.c: 200: PWM = duty;
  1045  00106C  C013  FFBE         	movff	write@duty,4030
  1046  001070  0012               	return		;funcret
  1047  001072                     __end_of_write:
  1048                           	opt stack 0
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           intcon	equ	0xFF2
  1054                           intcon2	equ	0xFF1
  1055                           postinc0	equ	0xFEE
  1056                           wreg	equ	0xFE8
  1057                           postdec1	equ	0xFE5
  1058                           fsr1l	equ	0xFE1
  1059                           indf2	equ	0xFDF
  1060                           postinc2	equ	0xFDE
  1061                           fsr2h	equ	0xFDA
  1062                           fsr2l	equ	0xFD9
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _read_tmr1 *****************
  1066 ;; Defined at:
  1067 ;;		line 182 in file "main.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1084 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:        0 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    3
  1088 ;; This function calls:
  1089 ;;		_printf
  1090 ;;		_rps_timer1
  1091 ;; This function is called by:
  1092 ;;		_io_switch
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text5
  1097  000EA4                     __ptext5:
  1098                           	opt stack 0
  1099  000EA4                     _read_tmr1:
  1100                           	opt stack 25
  1101                           
  1102                           ;main.c: 183: PUT = 0;
  1103                           
  1104                           ;incstack = 0
  1105  000EA4  9048               	bcf	_PUT/(0+8),_PUT& (0+7),c
  1106                           
  1107                           ;main.c: 184: FAN = rps_timer1(FAN, TMR1);
  1108  000EA6  C044  F020         	movff	_FAN,rps_timer1@x	;volatile
  1109  000EAA  C045  F021         	movff	_FAN+1,rps_timer1@x+1	;volatile
  1110  000EAE  C046  F022         	movff	_FAN+2,rps_timer1@x+2	;volatile
  1111  000EB2  C047  F023         	movff	_FAN+3,rps_timer1@x+3	;volatile
  1112  000EB6  CFCE F024          	movff	4046,rps_timer1@dt	;volatile
  1113  000EBA  CFCF F025          	movff	4047,rps_timer1@dt+1	;volatile
  1114  000EBE  EC9D  F006         	call	_rps_timer1	;wreg free
  1115  000EC2  C020  F044         	movff	?_rps_timer1,_FAN	;volatile
  1116  000EC6  C021  F045         	movff	?_rps_timer1+1,_FAN+1	;volatile
  1117  000ECA  C022  F046         	movff	?_rps_timer1+2,_FAN+2	;volatile
  1118  000ECE  C023  F047         	movff	?_rps_timer1+3,_FAN+3	;volatile
  1119                           
  1120                           ;main.c: 185: printf("%u", FAN.value);
  1121  000ED2  0E4A               	movlw	low STR_5
  1122  000ED4  6E25               	movwf	printf@f,c
  1123  000ED6  0E08               	movlw	high STR_5
  1124  000ED8  6E26               	movwf	printf@f+1,c
  1125  000EDA  C046  F027         	movff	_FAN+2,?_printf+2	;volatile
  1126  000EDE  C047  F028         	movff	_FAN+3,?_printf+3	;volatile
  1127  000EE2  EC27  F004         	call	_printf	;wreg free
  1128                           
  1129                           ;main.c: 186: TMR1 = 0;
  1130  000EE6  0E00               	movlw	0
  1131  000EE8  6ECF               	movwf	4047,c	;volatile
  1132  000EEA  0E00               	movlw	0
  1133  000EEC  6ECE               	movwf	4046,c	;volatile
  1134  000EEE  0012               	return	
  1135  000EF0                     __end_of_read_tmr1:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           intcon	equ	0xFF2
  1142                           intcon2	equ	0xFF1
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1l	equ	0xFE1
  1147                           indf2	equ	0xFDF
  1148                           postinc2	equ	0xFDE
  1149                           fsr2h	equ	0xFDA
  1150                           fsr2l	equ	0xFD9
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _read_tmr0 *****************
  1154 ;; Defined at:
  1155 ;;		line 190 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1169 ;;      Params:         0       0       0       0       0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1172 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    3
  1176 ;; This function calls:
  1177 ;;		_printf
  1178 ;;		_rps_timer1
  1179 ;; This function is called by:
  1180 ;;		_io_switch
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text6
  1185  000DFE                     __ptext6:
  1186                           	opt stack 0
  1187  000DFE                     _read_tmr0:
  1188                           	opt stack 25
  1189                           
  1190                           ;main.c: 191: PUT = 0;
  1191                           
  1192                           ;incstack = 0
  1193  000DFE  9048               	bcf	_PUT/(0+8),_PUT& (0+7),c
  1194                           
  1195                           ;main.c: 192: printf("%u", TMR0);
  1196  000E00  0E4A               	movlw	low STR_5
  1197  000E02  6E25               	movwf	printf@f,c
  1198  000E04  0E08               	movlw	high STR_5
  1199  000E06  6E26               	movwf	printf@f+1,c
  1200  000E08  CFD6 F027          	movff	4054,?_printf+2	;volatile
  1201  000E0C  CFD7 F028          	movff	4055,?_printf+3	;volatile
  1202  000E10  EC27  F004         	call	_printf	;wreg free
  1203                           
  1204                           ;main.c: 193: TMR0 = 0;
  1205  000E14  0E00               	movlw	0
  1206  000E16  6ED7               	movwf	4055,c	;volatile
  1207  000E18  0E00               	movlw	0
  1208  000E1A  6ED6               	movwf	4054,c	;volatile
  1209                           
  1210                           ;main.c: 194: FAN = rps_timer1(FAN, TMR1);
  1211  000E1C  C044  F020         	movff	_FAN,rps_timer1@x	;volatile
  1212  000E20  C045  F021         	movff	_FAN+1,rps_timer1@x+1	;volatile
  1213  000E24  C046  F022         	movff	_FAN+2,rps_timer1@x+2	;volatile
  1214  000E28  C047  F023         	movff	_FAN+3,rps_timer1@x+3	;volatile
  1215  000E2C  CFCE F024          	movff	4046,rps_timer1@dt	;volatile
  1216  000E30  CFCF F025          	movff	4047,rps_timer1@dt+1	;volatile
  1217  000E34  EC9D  F006         	call	_rps_timer1	;wreg free
  1218  000E38  C020  F044         	movff	?_rps_timer1,_FAN	;volatile
  1219  000E3C  C021  F045         	movff	?_rps_timer1+1,_FAN+1	;volatile
  1220  000E40  C022  F046         	movff	?_rps_timer1+2,_FAN+2	;volatile
  1221  000E44  C023  F047         	movff	?_rps_timer1+3,_FAN+3	;volatile
  1222                           
  1223                           ;main.c: 195: TMR1 = 0;
  1224  000E48  0E00               	movlw	0
  1225  000E4A  6ECF               	movwf	4047,c	;volatile
  1226  000E4C  0E00               	movlw	0
  1227  000E4E  6ECE               	movwf	4046,c	;volatile
  1228  000E50  0012               	return	
  1229  000E52                     __end_of_read_tmr0:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           intcon	equ	0xFF2
  1236                           intcon2	equ	0xFF1
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           fsr1l	equ	0xFE1
  1241                           indf2	equ	0xFDF
  1242                           postinc2	equ	0xFDE
  1243                           fsr2h	equ	0xFDA
  1244                           fsr2l	equ	0xFD9
  1245                           status	equ	0xFD8
  1246                           
  1247 ;; *************** function _rps_timer1 *****************
  1248 ;; Defined at:
  1249 ;;		line 170 in file "main.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;  x               4   31[COMRAM] volatile struct .
  1252 ;;  dt              2   35[COMRAM] unsigned int 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  4   31[COMRAM] struct .
  1257 ;; Registers used:
  1258 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1264 ;;      Params:         6       0       0       0       0       0       0       0       0
  1265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1266 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1267 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1268 ;;Total ram usage:        6 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; Hardware stack levels required when called:    2
  1271 ;; This function calls:
  1272 ;;		___lwdiv
  1273 ;;		___wmul
  1274 ;; This function is called by:
  1275 ;;		_read_tmr1
  1276 ;;		_read_tmr0
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text7
  1281  000D3A                     __ptext7:
  1282                           	opt stack 0
  1283  000D3A                     _rps_timer1:
  1284                           	opt stack 25
  1285                           
  1286                           ;main.c: 171: if (x.count > 0) {
  1287                           
  1288                           ;incstack = 0
  1289  000D3A  5020               	movf	rps_timer1@x,w,c	;volatile
  1290  000D3C  1021               	iorwf	rps_timer1@x+1,w,c	;volatile
  1291  000D3E  B4D8               	btfsc	status,2,c
  1292  000D40  D023               	goto	l102
  1293                           
  1294                           ;main.c: 172: x.value = T1FOSC * x.count / dt;
  1295  000D42  C020  F013         	movff	rps_timer1@x,___wmul@multiplier	;volatile
  1296  000D46  C021  F014         	movff	rps_timer1@x+1,___wmul@multiplier+1	;volatile
  1297  000D4A  0E13               	movlw	low _T1FOSC
  1298  000D4C  6EF6               	movwf	tblptrl,c
  1299  000D4E                     	if	1	;There is more than 1 active tblptr byte
  1300  000D4E  0E08               	movlw	high _T1FOSC
  1301  000D50  6EF7               	movwf	tblptrh,c
  1302  000D52                     	endif
  1303  000D52                     	if	0	;There are less than 3 active tblptr bytes
  1304  000D52                     	endif
  1305  000D52  0009               	tblrd		*+
  1306  000D54  CFF5 F015          	movff	tablat,___wmul@multiplicand
  1307  000D58  000A               	tblrd		*-
  1308  000D5A  CFF5 F016          	movff	tablat,___wmul@multiplicand+1
  1309  000D5E  EC05  F008         	call	___wmul	;wreg free
  1310  000D62  C013  F019         	movff	?___wmul,___lwdiv@dividend
  1311  000D66  C014  F01A         	movff	?___wmul+1,___lwdiv@dividend+1
  1312  000D6A  C024  F01B         	movff	rps_timer1@dt,___lwdiv@divisor
  1313  000D6E  C025  F01C         	movff	rps_timer1@dt+1,___lwdiv@divisor+1
  1314  000D72  EC29  F007         	call	___lwdiv	;wreg free
  1315  000D76  C019  F022         	movff	?___lwdiv,rps_timer1@x+2	;volatile
  1316  000D7A  C01A  F023         	movff	?___lwdiv+1,rps_timer1@x+3	;volatile
  1317                           
  1318                           ;main.c: 173: x.count = 0;
  1319  000D7E  0E00               	movlw	0
  1320  000D80  6E21               	movwf	rps_timer1@x+1,c	;volatile
  1321  000D82  0E00               	movlw	0
  1322  000D84  6E20               	movwf	rps_timer1@x,c	;volatile
  1323                           
  1324                           ;main.c: 174: }
  1325  000D86  D006               	goto	l103
  1326  000D88                     l102:
  1327                           
  1328                           ;main.c: 175: else {
  1329                           ;main.c: 176: x.count = -1;
  1330  000D88  6820               	setf	rps_timer1@x,c	;volatile
  1331  000D8A  6821               	setf	rps_timer1@x+1,c	;volatile
  1332                           
  1333                           ;main.c: 177: x.value = 0;
  1334  000D8C  0E00               	movlw	0
  1335  000D8E  6E23               	movwf	rps_timer1@x+3,c	;volatile
  1336  000D90  0E00               	movlw	0
  1337  000D92  6E22               	movwf	rps_timer1@x+2,c	;volatile
  1338  000D94                     l103:
  1339                           
  1340                           ;main.c: 178: }
  1341                           ;main.c: 179: return x;
  1342  000D94  C020  F020         	movff	rps_timer1@x,?_rps_timer1	;volatile
  1343  000D98  C021  F021         	movff	rps_timer1@x+1,?_rps_timer1+1	;volatile
  1344  000D9C  C022  F022         	movff	rps_timer1@x+2,?_rps_timer1+2	;volatile
  1345  000DA0  C023  F023         	movff	rps_timer1@x+3,?_rps_timer1+3	;volatile
  1346  000DA4  0012               	return	
  1347  000DA6                     __end_of_rps_timer1:
  1348                           	opt stack 0
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           intcon	equ	0xFF2
  1354                           intcon2	equ	0xFF1
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           postdec1	equ	0xFE5
  1358                           fsr1l	equ	0xFE1
  1359                           indf2	equ	0xFDF
  1360                           postinc2	equ	0xFDE
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _main_lcd *****************
  1366 ;; Defined at:
  1367 ;;		line 147 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  value           2   57[COMRAM] unsigned int 
  1370 ;;  duty            1   59[COMRAM] unsigned char 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1382 ;;      Params:         3       0       0       0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1385 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1386 ;;Total ram usage:        3 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    3
  1389 ;; This function calls:
  1390 ;;		_printf
  1391 ;;		_prog_lcd
  1392 ;; This function is called by:
  1393 ;;		_io_switch
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text8
  1398  000F7C                     __ptext8:
  1399                           	opt stack 0
  1400  000F7C                     _main_lcd:
  1401                           	opt stack 25
  1402                           
  1403                           ;main.c: 148: PUT = 1;
  1404                           
  1405                           ;incstack = 0
  1406  000F7C  8048               	bsf	_PUT/(0+8),_PUT& (0+7),c
  1407                           
  1408                           ;main.c: 149: prog_lcd(0xC0);
  1409  000F7E  0EC0               	movlw	192
  1410  000F80  EC27  F008         	call	_prog_lcd
  1411                           
  1412                           ;main.c: 150: printf("rps: %3u", value);
  1413  000F84  0E41               	movlw	low STR_3
  1414  000F86  6E25               	movwf	printf@f,c
  1415  000F88  0E08               	movlw	high STR_3
  1416  000F8A  6E26               	movwf	printf@f+1,c
  1417  000F8C  C03A  F027         	movff	main_lcd@value,?_printf+2
  1418  000F90  C03B  F028         	movff	main_lcd@value+1,?_printf+3
  1419  000F94  EC27  F004         	call	_printf	;wreg free
  1420                           
  1421                           ;main.c: 151: prog_lcd(0xC8);
  1422  000F98  0EC8               	movlw	200
  1423  000F9A  EC27  F008         	call	_prog_lcd
  1424                           
  1425                           ;main.c: 152: printf("pwm: %3d%%", duty);
  1426  000F9E  0E36               	movlw	low STR_4
  1427  000FA0  6E25               	movwf	printf@f,c
  1428  000FA2  0E08               	movlw	high STR_4
  1429  000FA4  6E26               	movwf	printf@f+1,c
  1430  000FA6  C03C  F027         	movff	main_lcd@duty,?_printf+2
  1431  000FAA  6A28               	clrf	?_printf+3,c
  1432  000FAC  EC27  F004         	call	_printf	;wreg free
  1433  000FB0  0012               	return		;funcret
  1434  000FB2                     __end_of_main_lcd:
  1435                           	opt stack 0
  1436                           tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           intcon	equ	0xFF2
  1441                           intcon2	equ	0xFF1
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postdec1	equ	0xFE5
  1445                           fsr1l	equ	0xFE1
  1446                           indf2	equ	0xFDF
  1447                           postinc2	equ	0xFDE
  1448                           fsr2h	equ	0xFDA
  1449                           fsr2l	equ	0xFD9
  1450                           status	equ	0xFD8
  1451                           
  1452 ;; *************** function _prog_lcd *****************
  1453 ;; Defined at:
  1454 ;;		line 122 in file "main.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  msg             1    wreg     unsigned char 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  msg             1   18[COMRAM] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1468 ;;      Params:         0       0       0       0       0       0       0       0       0
  1469 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1471 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1472 ;;Total ram usage:        1 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    1
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_init_lcd
  1479 ;;		_main_lcd
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text9
  1484  00104E                     __ptext9:
  1485                           	opt stack 0
  1486  00104E                     _prog_lcd:
  1487                           	opt stack 28
  1488                           
  1489                           ;incstack = 0
  1490                           ;prog_lcd@msg stored from wreg
  1491  00104E  6E13               	movwf	prog_lcd@msg,c
  1492                           
  1493                           ;main.c: 123: LCD.RS = 0;
  1494  001050  9084               	bcf	3972,0,c
  1495                           
  1496                           ;main.c: 124: LCD.CH = msg;
  1497  001052  C013  FF83         	movff	prog_lcd@msg,3971
  1498                           
  1499                           ;main.c: 125: LCD.EN = 1; _delay((unsigned long)((1)*(20000000/4000000.0)));
  1500  001056  8484               	bsf	3972,2,c
  1501  001058  D000               	nop2		;2 cycle nop
  1502  00105A  D000               	nop2		;2 cycle nop
  1503  00105C  F000               	nop	
  1504                           
  1505                           ;main.c: 126: LCD.EN = 0; _delay((unsigned long)((50)*(20000000/4000000.0)));
  1506  00105E  9484               	bcf	3972,2,c
  1507  001060  0E53               	movlw	83
  1508  001062                     u1017:
  1509  001062  2EE8               	decfsz	wreg,f,c
  1510  001064  D7FE               	bra	u1017
  1511  001066  F000               	nop	
  1512  001068  0012               	return	
  1513  00106A                     __end_of_prog_lcd:
  1514                           	opt stack 0
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           intcon	equ	0xFF2
  1520                           intcon2	equ	0xFF1
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           postdec1	equ	0xFE5
  1524                           fsr1l	equ	0xFE1
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           fsr2h	equ	0xFDA
  1528                           fsr2l	equ	0xFD9
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _printf *****************
  1532 ;; Defined at:
  1533 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  f               2   36[COMRAM] PTR const unsigned char 
  1536 ;;		 -> STR_6(3), STR_5(3), STR_4(11), STR_3(9), 
  1537 ;;		 -> STR_2(16), STR_1(17), 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  tmpval          4    0        struct .
  1540 ;;  width           2   54[COMRAM] int 
  1541 ;;  val             2   52[COMRAM] unsigned int 
  1542 ;;  len             2   49[COMRAM] unsigned int 
  1543 ;;  ap              2   47[COMRAM] PTR void [1]
  1544 ;;		 -> ?_printf(2), 
  1545 ;;  cp              2   44[COMRAM] PTR const unsigned char 
  1546 ;;		 -> printf@c(1), 
  1547 ;;  c               1   56[COMRAM] char 
  1548 ;;  flag            1   51[COMRAM] unsigned char 
  1549 ;;  prec            1   46[COMRAM] char 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  2   36[COMRAM] int 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1559 ;;      Params:         4       0       0       0       0       0       0       0       0
  1560 ;;      Locals:        13       0       0       0       0       0       0       0       0
  1561 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1562 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1563 ;;Total ram usage:       21 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    2
  1566 ;; This function calls:
  1567 ;;		___lwdiv
  1568 ;;		___lwmod
  1569 ;;		___wmul
  1570 ;;		_isdigit
  1571 ;;		_putch
  1572 ;; This function is called by:
  1573 ;;		_init_lcd
  1574 ;;		_main_lcd
  1575 ;;		_read_tmr1
  1576 ;;		_read_tmr0
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text10
  1581  00084E                     __ptext10:
  1582                           	opt stack 0
  1583  00084E                     _printf:
  1584                           	opt stack 27
  1585                           
  1586                           ;doprnt.c: 466: va_list ap;
  1587                           ;doprnt.c: 499: signed char c;
  1588                           ;doprnt.c: 501: int width;
  1589                           ;doprnt.c: 506: signed char prec;
  1590                           ;doprnt.c: 508: unsigned char flag;
  1591                           ;doprnt.c: 523: union {
  1592                           ;doprnt.c: 524: unsigned long vd;
  1593                           ;doprnt.c: 525: double integ;
  1594                           ;doprnt.c: 526: } tmpval;
  1595                           ;doprnt.c: 528: unsigned int val;
  1596                           ;doprnt.c: 529: unsigned len;
  1597                           ;doprnt.c: 530: const char * cp;
  1598                           ;doprnt.c: 533: *ap = __va_start();
  1599                           
  1600                           ;incstack = 0
  1601  00084E  0E27               	movlw	low (?_printf+2)
  1602  000850  6E30               	movwf	printf@ap,c
  1603  000852  0E00               	movlw	high (?_printf+2)
  1604  000854  6E31               	movwf	printf@ap+1,c
  1605                           
  1606                           ;doprnt.c: 536: while(c = *f++) {
  1607  000856  D13B               	goto	u910
  1608  000858                     
  1609                           ;doprnt.c: 538: if(c != '%')
  1610  000858  0E25               	movlw	37
  1611  00085A  1839               	xorwf	printf@c,w,c
  1612  00085C  B4D8               	btfsc	status,2,c
  1613  00085E  D004               	goto	l154
  1614                           
  1615                           ;doprnt.c: 540: {
  1616                           ;doprnt.c: 541: (putch(c) );
  1617  000860  5039               	movf	printf@c,w,c
  1618  000862  ECF0  F007         	call	_putch
  1619                           
  1620                           ;doprnt.c: 542: continue;
  1621  000866  D133               	goto	u910
  1622  000868                     l154:
  1623                           
  1624                           ;doprnt.c: 543: }
  1625                           ;doprnt.c: 546: width = 0;
  1626  000868  0E00               	movlw	0
  1627  00086A  6E38               	movwf	printf@width+1,c
  1628  00086C  0E00               	movlw	0
  1629  00086E  6E37               	movwf	printf@width,c
  1630                           
  1631                           ;doprnt.c: 548: flag = 0;
  1632  000870  0E00               	movlw	0
  1633  000872  6E34               	movwf	printf@flag,c
  1634                           
  1635                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1636  000874  C025  FFF6         	movff	printf@f,tblptrl
  1637  000878  C026  FFF7         	movff	printf@f+1,tblptrh
  1638  00087C                     	if	0	;tblptru may be non-zero
  1639  00087C                     	endif
  1640  00087C                     	if	0	;tblptru may be non-zero
  1641  00087C                     	endif
  1642  00087C  0008               	tblrd		*
  1643  00087E  50F5               	movf	tablat,w,c
  1644  000880  EC18  F008         	call	_isdigit
  1645  000884  A0D8               	btfss	status,0,c
  1646  000886  D06C               	goto	l158
  1647                           
  1648                           ;doprnt.c: 598: width = 0;
  1649  000888  0E00               	movlw	0
  1650  00088A  6E38               	movwf	printf@width+1,c
  1651  00088C  0E00               	movlw	0
  1652  00088E  6E37               	movwf	printf@width,c
  1653  000890                     
  1654                           ;doprnt.c: 600: width *= 10;
  1655  000890  C037  F013         	movff	printf@width,___wmul@multiplier
  1656  000894  C038  F014         	movff	printf@width+1,___wmul@multiplier+1
  1657  000898  0E00               	movlw	0
  1658  00089A  6E16               	movwf	___wmul@multiplicand+1,c
  1659  00089C  0E0A               	movlw	10
  1660  00089E  6E15               	movwf	___wmul@multiplicand,c
  1661  0008A0  EC05  F008         	call	___wmul	;wreg free
  1662  0008A4  C013  F037         	movff	?___wmul,printf@width
  1663  0008A8  C014  F038         	movff	?___wmul+1,printf@width+1
  1664                           
  1665                           ;doprnt.c: 601: width += *f++ - '0';
  1666  0008AC  0ED0               	movlw	208
  1667  0008AE  6E29               	movwf	??_printf& (0+255),c
  1668  0008B0  0EFF               	movlw	255
  1669  0008B2  6E2A               	movwf	(??_printf+1)& (0+255),c
  1670  0008B4  C025  FFF6         	movff	printf@f,tblptrl
  1671  0008B8  C026  FFF7         	movff	printf@f+1,tblptrh
  1672  0008BC                     	if	0	;tblptru may be non-zero
  1673  0008BC                     	endif
  1674  0008BC                     	if	0	;tblptru may be non-zero
  1675  0008BC                     	endif
  1676  0008BC  0008               	tblrd		*
  1677  0008BE  50F5               	movf	tablat,w,c
  1678  0008C0  6E2B               	movwf	(??_printf+2)& (0+255),c
  1679  0008C2  6A2C               	clrf	(??_printf+3)& (0+255),c
  1680  0008C4  5029               	movf	??_printf,w,c
  1681  0008C6  262B               	addwf	??_printf+2,f,c
  1682  0008C8  502A               	movf	??_printf+1,w,c
  1683  0008CA  222C               	addwfc	??_printf+3,f,c
  1684  0008CC  502B               	movf	??_printf+2,w,c
  1685  0008CE  2637               	addwf	printf@width,f,c
  1686  0008D0  502C               	movf	??_printf+3,w,c
  1687  0008D2  2238               	addwfc	printf@width+1,f,c
  1688  0008D4  4A25               	infsnz	printf@f,f,c
  1689  0008D6  2A26               	incf	printf@f+1,f,c
  1690                           
  1691                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1692  0008D8  C025  FFF6         	movff	printf@f,tblptrl
  1693  0008DC  C026  FFF7         	movff	printf@f+1,tblptrh
  1694  0008E0                     	if	0	;tblptru may be non-zero
  1695  0008E0                     	endif
  1696  0008E0                     	if	0	;tblptru may be non-zero
  1697  0008E0                     	endif
  1698  0008E0  0008               	tblrd		*
  1699  0008E2  50F5               	movf	tablat,w,c
  1700  0008E4  EC18  F008         	call	_isdigit
  1701  0008E8  A0D8               	btfss	status,0,c
  1702  0008EA  D03A               	goto	l158
  1703  0008EC  D7D1               	goto	l156
  1704  0008EE                     
  1705                           ;doprnt.c: 757: if(width > len)
  1706  0008EE  5037               	movf	printf@width,w,c
  1707  0008F0  5C32               	subwf	printf@len,w,c
  1708  0008F2  5038               	movf	printf@width+1,w,c
  1709  0008F4  5833               	subwfb	printf@len+1,w,c
  1710  0008F6  B0D8               	btfsc	status,0,c
  1711  0008F8  D005               	goto	l165
  1712                           
  1713                           ;doprnt.c: 758: width -= len;
  1714  0008FA  5032               	movf	printf@len,w,c
  1715  0008FC  5E37               	subwf	printf@width,f,c
  1716  0008FE  5033               	movf	printf@len+1,w,c
  1717  000900  5A38               	subwfb	printf@width+1,f,c
  1718  000902  D008               	goto	l167
  1719  000904                     l165:
  1720                           
  1721                           ;doprnt.c: 759: else
  1722                           ;doprnt.c: 760: width = 0;
  1723  000904  0E00               	movlw	0
  1724  000906  6E38               	movwf	printf@width+1,c
  1725  000908  0E00               	movlw	0
  1726  00090A  6E37               	movwf	printf@width,c
  1727                           
  1728                           ;doprnt.c: 764: while(width--)
  1729  00090C  D003               	goto	l167
  1730  00090E                     l1565:
  1731                           
  1732                           ;doprnt.c: 765: (putch(' ') );
  1733  00090E  0E20               	movlw	32
  1734  000910  ECF0  F007         	call	_putch
  1735  000914                     l167:
  1736  000914  0637               	decf	printf@width,f,c
  1737  000916  A0D8               	btfss	status,0,c
  1738  000918  0638               	decf	printf@width+1,f,c
  1739  00091A  2837               	incf	printf@width,w,c
  1740  00091C  E1F8               	bnz	l1565
  1741  00091E  2838               	incf	printf@width+1,w,c
  1742  000920  B4D8               	btfsc	status,2,c
  1743  000922  D00A               	goto	l170
  1744  000924  D7F4               	goto	l168
  1745  000926                     l1569:
  1746                           
  1747                           ;doprnt.c: 768: (putch(*cp++) );
  1748  000926  C02D  FFD9         	movff	printf@cp,fsr2l
  1749  00092A  C02E  FFDA         	movff	printf@cp+1,fsr2h
  1750  00092E  50DF               	movf	indf2,w,c
  1751  000930  ECF0  F007         	call	_putch
  1752  000934  4A2D               	infsnz	printf@cp,f,c
  1753  000936  2A2E               	incf	printf@cp+1,f,c
  1754  000938                     l170:
  1755  000938  0632               	decf	printf@len,f,c
  1756  00093A  A0D8               	btfss	status,0,c
  1757  00093C  0633               	decf	printf@len+1,f,c
  1758  00093E  2832               	incf	printf@len,w,c
  1759  000940  E1F2               	bnz	l1569
  1760  000942  2833               	incf	printf@len+1,w,c
  1761  000944  B4D8               	btfsc	status,2,c
  1762  000946  D0C3               	goto	u910
  1763  000948  D7EE               	goto	l171
  1764  00094A                     
  1765                           ;doprnt.c: 805: cp = (char *)&c;
  1766  00094A  0E39               	movlw	low printf@c
  1767  00094C  6E2D               	movwf	printf@cp,c
  1768  00094E  0E00               	movlw	high printf@c
  1769  000950  6E2E               	movwf	printf@cp+1,c
  1770                           
  1771                           ;doprnt.c: 806: len = 1;
  1772  000952  0E00               	movlw	0
  1773  000954  6E33               	movwf	printf@len+1,c
  1774  000956  0E01               	movlw	1
  1775  000958  6E32               	movwf	printf@len,c
  1776                           
  1777                           ;doprnt.c: 807: goto dostring;
  1778  00095A  D7C9               	goto	l164
  1779  00095C                     
  1780                           ;doprnt.c: 818: flag |= 0x40;
  1781  00095C  8C34               	bsf	printf@flag,6,c
  1782                           
  1783                           ;doprnt.c: 822: }
  1784                           
  1785                           ;doprnt.c: 819: break;
  1786  00095E  D017               	goto	l163
  1787  000960                     l158:
  1788  000960  C025  FFF6         	movff	printf@f,tblptrl
  1789  000964  C026  FFF7         	movff	printf@f+1,tblptrh
  1790  000968  4A25               	infsnz	printf@f,f,c
  1791  00096A  2A26               	incf	printf@f+1,f,c
  1792  00096C                     	if	0	;tblptru may be non-zero
  1793  00096C                     	endif
  1794  00096C                     	if	0	;tblptru may be non-zero
  1795  00096C                     	endif
  1796  00096C  0008               	tblrd		*
  1797  00096E  CFF5 F039          	movff	tablat,printf@c
  1798  000972  5039               	movf	printf@c,w,c
  1799                           
  1800                           ; Switch size 1, requested type "space"
  1801                           ; Number of cases is 4, Range of values is 0 to 117
  1802                           ; switch strategies available:
  1803                           ; Name         Instructions Cycles
  1804                           ; simple_byte           13     7 (average)
  1805                           ;	Chosen strategy is simple_byte
  1806  000974  0A00               	xorlw	0	; case 0
  1807  000976  B4D8               	btfsc	status,2,c
  1808  000978  0012               	return	
  1809  00097A  0A64               	xorlw	100	; case 100
  1810  00097C  B4D8               	btfsc	status,2,c
  1811  00097E  D007               	goto	l163
  1812  000980  0A0D               	xorlw	13	; case 105
  1813  000982  B4D8               	btfsc	status,2,c
  1814  000984  D004               	goto	l163
  1815  000986  0A1C               	xorlw	28	; case 117
  1816  000988  B4D8               	btfsc	status,2,c
  1817  00098A  D7E8               	goto	l174
  1818  00098C  D7DE               	goto	l173
  1819  00098E                     l163:
  1820                           
  1821                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  1822  00098E  BC34               	btfsc	printf@flag,6,c
  1823  000990  D015               	goto	l175
  1824                           
  1825                           ;doprnt.c: 1253: {
  1826                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1827  000992  C030  FFD9         	movff	printf@ap,fsr2l
  1828  000996  C031  FFDA         	movff	printf@ap+1,fsr2h
  1829  00099A  CFDE F035          	movff	postinc2,printf@val
  1830  00099E  CFDD F036          	movff	postdec2,printf@val+1
  1831  0009A2  0E02               	movlw	2
  1832  0009A4  2630               	addwf	printf@ap,f,c
  1833  0009A6  0E00               	movlw	0
  1834  0009A8  2231               	addwfc	printf@ap+1,f,c
  1835                           
  1836                           ;doprnt.c: 1261: if((int)val < 0) {
  1837  0009AA  AE36               	btfss	printf@val+1,7,c
  1838  0009AC  D013               	goto	l177
  1839                           
  1840                           ;doprnt.c: 1262: flag |= 0x03;
  1841  0009AE  0E03               	movlw	3
  1842  0009B0  1234               	iorwf	printf@flag,f,c
  1843                           
  1844                           ;doprnt.c: 1263: val = -val;
  1845  0009B2  6C35               	negf	printf@val,c
  1846  0009B4  1E36               	comf	printf@val+1,f,c
  1847  0009B6  B0D8               	btfsc	status,0,c
  1848  0009B8  2A36               	incf	printf@val+1,f,c
  1849                           
  1850                           ;doprnt.c: 1264: }
  1851                           ;doprnt.c: 1266: }
  1852  0009BA  D00C               	goto	l177
  1853  0009BC                     l175:
  1854                           
  1855                           ;doprnt.c: 1268: else
  1856                           ;doprnt.c: 1273: {
  1857                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1858  0009BC  C030  FFD9         	movff	printf@ap,fsr2l
  1859  0009C0  C031  FFDA         	movff	printf@ap+1,fsr2h
  1860  0009C4  CFDE F035          	movff	postinc2,printf@val
  1861  0009C8  CFDD F036          	movff	postdec2,printf@val+1
  1862  0009CC  0E02               	movlw	2
  1863  0009CE  2630               	addwf	printf@ap,f,c
  1864  0009D0  0E00               	movlw	0
  1865  0009D2  2231               	addwfc	printf@ap+1,f,c
  1866  0009D4                     l177:
  1867                           
  1868                           ;doprnt.c: 1287: }
  1869                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1870  0009D4  0E01               	movlw	1
  1871  0009D6  6E39               	movwf	printf@c,c
  1872  0009D8                     l1601:
  1873  0009D8  0E05               	movlw	5
  1874  0009DA  1839               	xorwf	printf@c,w,c
  1875  0009DC  B4D8               	btfsc	status,2,c
  1876  0009DE  D012               	goto	u840
  1877                           
  1878                           ;doprnt.c: 1306: if(val < dpowers[c])
  1879  0009E0  5039               	movf	printf@c,w,c
  1880  0009E2  0D02               	mullw	2
  1881  0009E4  0E01               	movlw	low _dpowers
  1882  0009E6  24F3               	addwf	prodl,w,c
  1883  0009E8  6EF6               	movwf	tblptrl,c
  1884  0009EA  0E08               	movlw	high _dpowers
  1885  0009EC  20F4               	addwfc	prodh,w,c
  1886  0009EE  6EF7               	movwf	tblptrh,c
  1887  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  1888  0009F0                     	endif
  1889  0009F0  0009               	tblrd		*+
  1890  0009F2  50F5               	movf	tablat,w,c
  1891  0009F4  5C35               	subwf	printf@val,w,c
  1892  0009F6  0009               	tblrd		*+
  1893  0009F8  50F5               	movf	tablat,w,c
  1894  0009FA  5836               	subwfb	printf@val+1,w,c
  1895  0009FC  A0D8               	btfss	status,0,c
  1896  0009FE  D002               	goto	u840
  1897                           
  1898                           ;doprnt.c: 1307: break;
  1899  000A00  2A39               	incf	printf@c,f,c
  1900  000A02  D7EA               	goto	l1601
  1901  000A04                     u840:
  1902                           
  1903                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1904  000A04  5037               	movf	printf@width,w,c
  1905  000A06  1038               	iorwf	printf@width+1,w,c
  1906  000A08  B4D8               	btfsc	status,2,c
  1907  000A0A  D009               	goto	l181
  1908  000A0C  C034  F029         	movff	printf@flag,??_printf
  1909  000A10  0E03               	movlw	3
  1910  000A12  1629               	andwf	??_printf,f,c
  1911  000A14  B4D8               	btfsc	status,2,c
  1912  000A16  D003               	goto	l181
  1913                           
  1914                           ;doprnt.c: 1346: width--;
  1915  000A18  0637               	decf	printf@width,f,c
  1916  000A1A  A0D8               	btfss	status,0,c
  1917  000A1C  0638               	decf	printf@width+1,f,c
  1918  000A1E                     l181:
  1919                           
  1920                           ;doprnt.c: 1381: if(width > c)
  1921  000A1E  0E80               	movlw	128
  1922  000A20  BE39               	btfsc	printf@c,7,c
  1923  000A22  0E7F               	movlw	127
  1924  000A24  6E29               	movwf	??_printf& (0+255),c
  1925  000A26  5037               	movf	printf@width,w,c
  1926  000A28  5C39               	subwf	printf@c,w,c
  1927  000A2A  5038               	movf	printf@width+1,w,c
  1928  000A2C  0A80               	xorlw	128
  1929  000A2E  5829               	subwfb	??_printf& (0+255),w,c
  1930  000A30  B0D8               	btfsc	status,0,c
  1931  000A32  D007               	goto	l182
  1932                           
  1933                           ;doprnt.c: 1382: width -= c;
  1934  000A34  5039               	movf	printf@c,w,c
  1935  000A36  5E37               	subwf	printf@width,f,c
  1936  000A38  0E00               	movlw	0
  1937  000A3A  BE39               	btfsc	printf@c,7,c
  1938  000A3C  0EFF               	movlw	255
  1939  000A3E  5A38               	subwfb	printf@width+1,f,c
  1940  000A40  D004               	goto	l183
  1941  000A42                     l182:
  1942                           
  1943                           ;doprnt.c: 1383: else
  1944                           ;doprnt.c: 1384: width = 0;
  1945  000A42  0E00               	movlw	0
  1946  000A44  6E38               	movwf	printf@width+1,c
  1947  000A46  0E00               	movlw	0
  1948  000A48  6E37               	movwf	printf@width,c
  1949  000A4A                     l183:
  1950                           
  1951                           ;doprnt.c: 1422: {
  1952                           ;doprnt.c: 1424: if(width
  1953                           ;doprnt.c: 1428: )
  1954  000A4A  5037               	movf	printf@width,w,c
  1955  000A4C  1038               	iorwf	printf@width+1,w,c
  1956  000A4E  B4D8               	btfsc	status,2,c
  1957  000A50  D00A               	goto	u890
  1958  000A52                     u880:
  1959                           
  1960                           ;doprnt.c: 1430: (putch(' ') );
  1961                           
  1962                           ;doprnt.c: 1429: do
  1963  000A52  0E20               	movlw	32
  1964  000A54  ECF0  F007         	call	_putch
  1965                           
  1966                           ;doprnt.c: 1431: while(--width);
  1967  000A58  0637               	decf	printf@width,f,c
  1968  000A5A  A0D8               	btfss	status,0,c
  1969  000A5C  0638               	decf	printf@width+1,f,c
  1970  000A5E  5037               	movf	printf@width,w,c
  1971  000A60  1038               	iorwf	printf@width+1,w,c
  1972  000A62  A4D8               	btfss	status,2,c
  1973  000A64  D7F6               	goto	u880
  1974  000A66                     u890:
  1975                           
  1976                           ;doprnt.c: 1438: if(flag & 0x03)
  1977  000A66  C034  F029         	movff	printf@flag,??_printf
  1978  000A6A  0E03               	movlw	3
  1979  000A6C  1629               	andwf	??_printf,f,c
  1980  000A6E  B4D8               	btfsc	status,2,c
  1981  000A70  D003               	goto	l187
  1982                           
  1983                           ;doprnt.c: 1439: (putch('-') );
  1984  000A72  0E2D               	movlw	45
  1985  000A74  ECF0  F007         	call	_putch
  1986  000A78                     l187:
  1987                           
  1988                           ;doprnt.c: 1469: }
  1989                           ;doprnt.c: 1472: prec = c;
  1990  000A78  C039  F02F         	movff	printf@c,printf@prec
  1991                           
  1992                           ;doprnt.c: 1474: while(prec--) {
  1993  000A7C  D024               	goto	l188
  1994  000A7E                     
  1995                           ;doprnt.c: 1478: {
  1996                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1997  000A7E  502F               	movf	printf@prec,w,c
  1998  000A80  0D02               	mullw	2
  1999  000A82  0E01               	movlw	low _dpowers
  2000  000A84  24F3               	addwf	prodl,w,c
  2001  000A86  6EF6               	movwf	tblptrl,c
  2002  000A88  0E08               	movlw	high _dpowers
  2003  000A8A  20F4               	addwfc	prodh,w,c
  2004  000A8C  6EF7               	movwf	tblptrh,c
  2005  000A8E                     	if	0	;There are less than 3 active tblptr bytes
  2006  000A8E                     	endif
  2007  000A8E  0009               	tblrd		*+
  2008  000A90  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  2009  000A94  000A               	tblrd		*-
  2010  000A96  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  2011  000A9A  C035  F019         	movff	printf@val,___lwdiv@dividend
  2012  000A9E  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  2013  000AA2  EC29  F007         	call	___lwdiv	;wreg free
  2014  000AA6  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  2015  000AAA  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  2016  000AAE  0E00               	movlw	0
  2017  000AB0  6E23               	movwf	___lwmod@divisor+1,c
  2018  000AB2  0E0A               	movlw	10
  2019  000AB4  6E22               	movwf	___lwmod@divisor,c
  2020  000AB6  EC9D  F007         	call	___lwmod	;wreg free
  2021  000ABA  5020               	movf	?___lwmod,w,c
  2022  000ABC  0F30               	addlw	48
  2023  000ABE  6E39               	movwf	printf@c,c
  2024                           
  2025                           ;doprnt.c: 1523: }
  2026                           ;doprnt.c: 1524: (putch(c) );
  2027  000AC0  5039               	movf	printf@c,w,c
  2028  000AC2  ECF0  F007         	call	_putch
  2029  000AC6                     l188:
  2030  000AC6  062F               	decf	printf@prec,f,c
  2031  000AC8  282F               	incf	printf@prec,w,c
  2032  000ACA  A4D8               	btfss	status,2,c
  2033  000ACC  D7D8               	goto	l189
  2034  000ACE                     u910:
  2035  000ACE  C025  FFF6         	movff	printf@f,tblptrl
  2036  000AD2  C026  FFF7         	movff	printf@f+1,tblptrh
  2037  000AD6  4A25               	infsnz	printf@f,f,c
  2038  000AD8  2A26               	incf	printf@f+1,f,c
  2039  000ADA                     	if	0	;tblptru may be non-zero
  2040  000ADA                     	endif
  2041  000ADA                     	if	0	;tblptru may be non-zero
  2042  000ADA                     	endif
  2043  000ADA  0008               	tblrd		*
  2044  000ADC  CFF5 F039          	movff	tablat,printf@c
  2045  000AE0  5039               	movf	printf@c,w,c
  2046  000AE2  B4D8               	btfsc	status,2,c
  2047  000AE4  0012               	return	
  2048  000AE6  D6B8               	goto	l153
  2049  000AE8                     __end_of_printf:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodh	equ	0xFF4
  2056                           prodl	equ	0xFF3
  2057                           intcon	equ	0xFF2
  2058                           intcon2	equ	0xFF1
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1l	equ	0xFE1
  2063                           indf2	equ	0xFDF
  2064                           postinc2	equ	0xFDE
  2065                           postdec2	equ	0xFDD
  2066                           fsr2h	equ	0xFDA
  2067                           fsr2l	equ	0xFD9
  2068                           status	equ	0xFD8
  2069                           
  2070 ;; *************** function _putch *****************
  2071 ;; Defined at:
  2072 ;;		line 103 in file "main.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  msg             1    wreg     unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  msg             1   18[COMRAM] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2086 ;;      Params:         0       0       0       0       0       0       0       0       0
  2087 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2089 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2090 ;;Total ram usage:        1 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_printf
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text11
  2101  000FE0                     __ptext11:
  2102                           	opt stack 0
  2103  000FE0                     _putch:
  2104                           	opt stack 27
  2105                           
  2106                           ;incstack = 0
  2107                           ;putch@msg stored from wreg
  2108  000FE0  6E13               	movwf	putch@msg,c
  2109                           
  2110                           ;main.c: 104: if (PUT) {
  2111  000FE2  A048               	btfss	_PUT/(0+8),_PUT& (0+7),c
  2112  000FE4  D00D               	goto	l72
  2113                           
  2114                           ;main.c: 105: LCD.RS = 1;
  2115  000FE6  8084               	bsf	3972,0,c
  2116                           
  2117                           ;main.c: 106: LCD.CH = msg;
  2118  000FE8  C013  FF83         	movff	putch@msg,3971
  2119                           
  2120                           ;main.c: 107: LCD.EN = 1; _delay((unsigned long)((1)*(20000000/4000000.0)));
  2121  000FEC  8484               	bsf	3972,2,c
  2122  000FEE  D000               	nop2		;2 cycle nop
  2123  000FF0  D000               	nop2		;2 cycle nop
  2124  000FF2  F000               	nop	
  2125                           
  2126                           ;main.c: 108: LCD.EN = 0; _delay((unsigned long)((50)*(20000000/4000000.0)));
  2127  000FF4  9484               	bcf	3972,2,c
  2128  000FF6  0E53               	movlw	83
  2129  000FF8                     u1027:
  2130  000FF8  2EE8               	decfsz	wreg,f,c
  2131  000FFA  D7FE               	bra	u1027
  2132  000FFC  F000               	nop	
  2133                           
  2134                           ;main.c: 109: }
  2135  000FFE  0012               	return	
  2136  001000                     l72:
  2137                           
  2138                           ;main.c: 110: else {
  2139                           ;main.c: 111: while(!TXIF) continue;
  2140  001000  A89E               	btfss	3998,4,c	;volatile
  2141  001002  D7FE               	goto	l72
  2142                           
  2143                           ;main.c: 112: TXREG = msg;
  2144  001004  C013  FFAD         	movff	putch@msg,4013	;volatile
  2145  001008  0012               	return	
  2146  00100A                     __end_of_putch:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1l	equ	0xFE1
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function _isdigit *****************
  2168 ;; Defined at:
  2169 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  c               1    wreg     unsigned char 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  c               1   20[COMRAM] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;		None               void
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2183 ;;      Params:         0       0       0       0       0       0       0       0       0
  2184 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2185 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2186 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2187 ;;Total ram usage:        3 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    1
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_printf
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text12
  2198  001030                     __ptext12:
  2199                           	opt stack 0
  2200  001030                     _isdigit:
  2201                           	opt stack 27
  2202                           
  2203                           ;incstack = 0
  2204                           ;isdigit@c stored from wreg
  2205  001030  6E15               	movwf	isdigit@c,c
  2206  001032  0E00               	movlw	0
  2207  001034  6E14               	movwf	_isdigit$378,c
  2208  001036  0E3A               	movlw	58
  2209  001038  6015               	cpfslt	isdigit@c,c
  2210  00103A  D005               	goto	l522
  2211  00103C  0E2F               	movlw	47
  2212  00103E  6415               	cpfsgt	isdigit@c,c
  2213  001040  D002               	goto	l522
  2214  001042  0E01               	movlw	1
  2215  001044  6E14               	movwf	_isdigit$378,c
  2216  001046                     l522:
  2217  001046  C014  F013         	movff	_isdigit$378,??_isdigit
  2218  00104A  3013               	rrcf	??_isdigit,w,c
  2219  00104C  0012               	return	
  2220  00104E                     __end_of_isdigit:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           prodh	equ	0xFF4
  2227                           prodl	equ	0xFF3
  2228                           intcon	equ	0xFF2
  2229                           intcon2	equ	0xFF1
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           postdec1	equ	0xFE5
  2233                           fsr1l	equ	0xFE1
  2234                           indf2	equ	0xFDF
  2235                           postinc2	equ	0xFDE
  2236                           postdec2	equ	0xFDD
  2237                           fsr2h	equ	0xFDA
  2238                           fsr2l	equ	0xFD9
  2239                           status	equ	0xFD8
  2240                           
  2241 ;; *************** function ___wmul *****************
  2242 ;; Defined at:
  2243 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  multiplier      2   18[COMRAM] unsigned int 
  2246 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  product         2   22[COMRAM] unsigned int 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  2   18[COMRAM] unsigned int 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0, prodl, prodh
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2258 ;;      Params:         4       0       0       0       0       0       0       0       0
  2259 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2261 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2262 ;;Total ram usage:        6 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    1
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_rps_timer1
  2269 ;;		_printf
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text13
  2274  00100A                     __ptext13:
  2275                           	opt stack 0
  2276  00100A                     ___wmul:
  2277                           	opt stack 27
  2278                           
  2279                           ;incstack = 0
  2280  00100A  5013               	movf	___wmul@multiplier,w,c
  2281  00100C  0215               	mulwf	___wmul@multiplicand,c
  2282  00100E  CFF3 F017          	movff	prodl,___wmul@product
  2283  001012  CFF4 F018          	movff	prodh,___wmul@product+1
  2284  001016  5013               	movf	___wmul@multiplier,w,c
  2285  001018  0216               	mulwf	___wmul@multiplicand+1,c
  2286  00101A  50F3               	movf	prodl,w,c
  2287  00101C  2618               	addwf	___wmul@product+1,f,c
  2288  00101E  5014               	movf	___wmul@multiplier+1,w,c
  2289  001020  0215               	mulwf	___wmul@multiplicand,c
  2290  001022  50F3               	movf	prodl,w,c
  2291  001024  2618               	addwf	___wmul@product+1,f,c
  2292  001026  C017  F013         	movff	___wmul@product,?___wmul
  2293  00102A  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2294  00102E  0012               	return	
  2295  001030                     __end_of___wmul:
  2296                           	opt stack 0
  2297                           tblptru	equ	0xFF8
  2298                           tblptrh	equ	0xFF7
  2299                           tblptrl	equ	0xFF6
  2300                           tablat	equ	0xFF5
  2301                           prodh	equ	0xFF4
  2302                           prodl	equ	0xFF3
  2303                           intcon	equ	0xFF2
  2304                           intcon2	equ	0xFF1
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1l	equ	0xFE1
  2309                           indf2	equ	0xFDF
  2310                           postinc2	equ	0xFDE
  2311                           postdec2	equ	0xFDD
  2312                           fsr2h	equ	0xFDA
  2313                           fsr2l	equ	0xFD9
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function ___lwmod *****************
  2317 ;; Defined at:
  2318 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  dividend        2   31[COMRAM] unsigned int 
  2321 ;;  divisor         2   33[COMRAM] unsigned int 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  counter         1   35[COMRAM] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  2   31[COMRAM] unsigned int 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2333 ;;      Params:         4       0       0       0       0       0       0       0       0
  2334 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2336 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2337 ;;Total ram usage:        5 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_printf
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text14
  2348  000F3A                     __ptext14:
  2349                           	opt stack 0
  2350  000F3A                     ___lwmod:
  2351                           	opt stack 27
  2352                           
  2353                           ;incstack = 0
  2354  000F3A  5022               	movf	___lwmod@divisor,w,c
  2355  000F3C  1023               	iorwf	___lwmod@divisor+1,w,c
  2356  000F3E  B4D8               	btfsc	status,2,c
  2357  000F40  D018               	goto	l616
  2358  000F42  0E01               	movlw	1
  2359  000F44  6E24               	movwf	___lwmod@counter,c
  2360  000F46  D004               	goto	l611
  2361  000F48  90D8               	bcf	status,0,c
  2362  000F4A  3622               	rlcf	___lwmod@divisor,f,c
  2363  000F4C  3623               	rlcf	___lwmod@divisor+1,f,c
  2364  000F4E  2A24               	incf	___lwmod@counter,f,c
  2365  000F50                     l611:
  2366  000F50  AE23               	btfss	___lwmod@divisor+1,7,c
  2367  000F52  D7FA               	goto	l612
  2368  000F54                     u720:
  2369  000F54  5022               	movf	___lwmod@divisor,w,c
  2370  000F56  5C20               	subwf	___lwmod@dividend,w,c
  2371  000F58  5023               	movf	___lwmod@divisor+1,w,c
  2372  000F5A  5821               	subwfb	___lwmod@dividend+1,w,c
  2373  000F5C  A0D8               	btfss	status,0,c
  2374  000F5E  D004               	goto	l615
  2375  000F60  5022               	movf	___lwmod@divisor,w,c
  2376  000F62  5E20               	subwf	___lwmod@dividend,f,c
  2377  000F64  5023               	movf	___lwmod@divisor+1,w,c
  2378  000F66  5A21               	subwfb	___lwmod@dividend+1,f,c
  2379  000F68                     l615:
  2380  000F68  90D8               	bcf	status,0,c
  2381  000F6A  3223               	rrcf	___lwmod@divisor+1,f,c
  2382  000F6C  3222               	rrcf	___lwmod@divisor,f,c
  2383  000F6E  2E24               	decfsz	___lwmod@counter,f,c
  2384  000F70  D7F1               	goto	u720
  2385  000F72                     l616:
  2386  000F72  C020  F020         	movff	___lwmod@dividend,?___lwmod
  2387  000F76  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  2388  000F7A  0012               	return		;funcret
  2389  000F7C                     __end_of___lwmod:
  2390                           	opt stack 0
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           intcon2	equ	0xFF1
  2399                           postinc0	equ	0xFEE
  2400                           wreg	equ	0xFE8
  2401                           postdec1	equ	0xFE5
  2402                           fsr1l	equ	0xFE1
  2403                           indf2	equ	0xFDF
  2404                           postinc2	equ	0xFDE
  2405                           postdec2	equ	0xFDD
  2406                           fsr2h	equ	0xFDA
  2407                           fsr2l	equ	0xFD9
  2408                           status	equ	0xFD8
  2409                           
  2410 ;; *************** function ___lwdiv *****************
  2411 ;; Defined at:
  2412 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  dividend        2   24[COMRAM] unsigned int 
  2415 ;;  divisor         2   26[COMRAM] unsigned int 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  quotient        2   29[COMRAM] unsigned int 
  2418 ;;  counter         1   28[COMRAM] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  2   24[COMRAM] unsigned int 
  2421 ;; Registers used:
  2422 ;;		wreg, status,2, status,0
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2428 ;;      Params:         4       0       0       0       0       0       0       0       0
  2429 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2431 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2432 ;;Total ram usage:        7 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_rps_timer1
  2439 ;;		_printf
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text15
  2444  000E52                     __ptext15:
  2445                           	opt stack 0
  2446  000E52                     ___lwdiv:
  2447                           	opt stack 27
  2448                           
  2449                           ;incstack = 0
  2450  000E52  0E00               	movlw	0
  2451  000E54  6E1F               	movwf	___lwdiv@quotient+1,c
  2452  000E56  0E00               	movlw	0
  2453  000E58  6E1E               	movwf	___lwdiv@quotient,c
  2454  000E5A  501B               	movf	___lwdiv@divisor,w,c
  2455  000E5C  101C               	iorwf	___lwdiv@divisor+1,w,c
  2456  000E5E  B4D8               	btfsc	status,2,c
  2457  000E60  D01C               	goto	l606
  2458  000E62  0E01               	movlw	1
  2459  000E64  6E1D               	movwf	___lwdiv@counter,c
  2460  000E66  D004               	goto	l601
  2461  000E68  90D8               	bcf	status,0,c
  2462  000E6A  361B               	rlcf	___lwdiv@divisor,f,c
  2463  000E6C  361C               	rlcf	___lwdiv@divisor+1,f,c
  2464  000E6E  2A1D               	incf	___lwdiv@counter,f,c
  2465  000E70                     l601:
  2466  000E70  AE1C               	btfss	___lwdiv@divisor+1,7,c
  2467  000E72  D7FA               	goto	l602
  2468  000E74                     u690:
  2469  000E74  90D8               	bcf	status,0,c
  2470  000E76  361E               	rlcf	___lwdiv@quotient,f,c
  2471  000E78  361F               	rlcf	___lwdiv@quotient+1,f,c
  2472  000E7A  501B               	movf	___lwdiv@divisor,w,c
  2473  000E7C  5C19               	subwf	___lwdiv@dividend,w,c
  2474  000E7E  501C               	movf	___lwdiv@divisor+1,w,c
  2475  000E80  581A               	subwfb	___lwdiv@dividend+1,w,c
  2476  000E82  A0D8               	btfss	status,0,c
  2477  000E84  D005               	goto	l605
  2478  000E86  501B               	movf	___lwdiv@divisor,w,c
  2479  000E88  5E19               	subwf	___lwdiv@dividend,f,c
  2480  000E8A  501C               	movf	___lwdiv@divisor+1,w,c
  2481  000E8C  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  2482  000E8E  801E               	bsf	___lwdiv@quotient,0,c
  2483  000E90                     l605:
  2484  000E90  90D8               	bcf	status,0,c
  2485  000E92  321C               	rrcf	___lwdiv@divisor+1,f,c
  2486  000E94  321B               	rrcf	___lwdiv@divisor,f,c
  2487  000E96  2E1D               	decfsz	___lwdiv@counter,f,c
  2488  000E98  D7ED               	goto	u690
  2489  000E9A                     l606:
  2490  000E9A  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  2491  000E9E  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2492  000EA2  0012               	return		;funcret
  2493  000EA4                     __end_of___lwdiv:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           intcon	equ	0xFF2
  2502                           intcon2	equ	0xFF1
  2503                           postinc0	equ	0xFEE
  2504                           wreg	equ	0xFE8
  2505                           postdec1	equ	0xFE5
  2506                           fsr1l	equ	0xFE1
  2507                           indf2	equ	0xFDF
  2508                           postinc2	equ	0xFDE
  2509                           postdec2	equ	0xFDD
  2510                           fsr2h	equ	0xFDA
  2511                           fsr2l	equ	0xFD9
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _beep *****************
  2515 ;; Defined at:
  2516 ;;		line 95 in file "main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  j               2   20[COMRAM] int 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2530 ;;      Params:         0       0       0       0       0       0       0       0       0
  2531 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2532 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2533 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2534 ;;Total ram usage:        4 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    1
  2537 ;; This function calls:
  2538 ;;		Nothing
  2539 ;; This function is called by:
  2540 ;;		_io_switch
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text16
  2546  000DA6                     __ptext16:
  2547                           	opt stack 0
  2548  000DA6                     _beep:
  2549                           	opt stack 27
  2550                           
  2551                           ;main.c: 96: _delay((unsigned long)((100)*(20000000/4000.0)));
  2552                           
  2553                           ;incstack = 0
  2554  000DA6  0E03               	movlw	3
  2555  000DA8  6E14               	movwf	(??_beep+1)& (0+255),c
  2556  000DAA  0E8A               	movlw	138
  2557  000DAC  6E13               	movwf	??_beep& (0+255),c
  2558  000DAE  0E56               	movlw	86
  2559  000DB0                     u1037:
  2560  000DB0  2EE8               	decfsz	wreg,f,c
  2561  000DB2  D7FE               	bra	u1037
  2562  000DB4  2E13               	decfsz	??_beep& (0+255),f,c
  2563  000DB6  D7FC               	bra	u1037
  2564  000DB8  2E14               	decfsz	(??_beep+1)& (0+255),f,c
  2565  000DBA  D7FA               	bra	u1037
  2566                           
  2567                           ;main.c: 97: for (int j = 0; j < 100; ++j) {
  2568  000DBC  0E00               	movlw	0
  2569  000DBE  6E16               	movwf	beep@j+1,c
  2570  000DC0  0E00               	movlw	0
  2571  000DC2  6E15               	movwf	beep@j,c
  2572  000DC4                     l1661:
  2573  000DC4  BE16               	btfsc	beep@j+1,7,c
  2574  000DC6  D006               	goto	l67
  2575  000DC8  5016               	movf	beep@j+1,w,c
  2576  000DCA  E118               	bnz	l69
  2577  000DCC  0E64               	movlw	100
  2578  000DCE  5C15               	subwf	beep@j,w,c
  2579  000DD0  B0D8               	btfsc	status,0,c
  2580  000DD2  0012               	return	
  2581  000DD4                     l67:
  2582                           
  2583                           ;main.c: 98: BUZ = 1; _delay((unsigned long)((1000)*(20000000/4000000.0)));
  2584  000DD4  8A80               	bsf	3968,5,c
  2585  000DD6  0E07               	movlw	7
  2586  000DD8  6E13               	movwf	??_beep& (0+255),c
  2587  000DDA  0E7D               	movlw	125
  2588  000DDC                     u1047:
  2589  000DDC  2EE8               	decfsz	wreg,f,c
  2590  000DDE  D7FE               	bra	u1047
  2591  000DE0  2E13               	decfsz	??_beep& (0+255),f,c
  2592  000DE2  D7FC               	bra	u1047
  2593  000DE4  F000               	nop	
  2594                           
  2595                           ;main.c: 99: BUZ = 0; _delay((unsigned long)((500)*(20000000/4000000.0)));
  2596  000DE6  9A80               	bcf	3968,5,c
  2597  000DE8  0E04               	movlw	4
  2598  000DEA  6E13               	movwf	??_beep& (0+255),c
  2599  000DEC  0E3E               	movlw	62
  2600  000DEE                     u1057:
  2601  000DEE  2EE8               	decfsz	wreg,f,c
  2602  000DF0  D7FE               	bra	u1057
  2603  000DF2  2E13               	decfsz	??_beep& (0+255),f,c
  2604  000DF4  D7FC               	bra	u1057
  2605  000DF6  4A15               	infsnz	beep@j,f,c
  2606  000DF8  2A16               	incf	beep@j+1,f,c
  2607  000DFA  D7E4               	goto	l1661
  2608  000DFC                     l69:
  2609  000DFC  0012               	return		;funcret
  2610  000DFE                     __end_of_beep:
  2611                           	opt stack 0
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           prodh	equ	0xFF4
  2617                           prodl	equ	0xFF3
  2618                           intcon	equ	0xFF2
  2619                           intcon2	equ	0xFF1
  2620                           postinc0	equ	0xFEE
  2621                           wreg	equ	0xFE8
  2622                           postdec1	equ	0xFE5
  2623                           fsr1l	equ	0xFE1
  2624                           indf2	equ	0xFDF
  2625                           postinc2	equ	0xFDE
  2626                           postdec2	equ	0xFDD
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _getch *****************
  2632 ;; Defined at:
  2633 ;;		line 117 in file "main.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      unsigned char 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2647 ;;      Params:         0       0       0       0       0       0       0       0       0
  2648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2650 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2651 ;;Total ram usage:        0 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_buffer_serial
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text17
  2662  001072                     __ptext17:
  2663                           	opt stack 0
  2664  001072                     _getch:
  2665                           	opt stack 28
  2666                           
  2667                           ;main.c: 118: while(!RCIF) continue;
  2668                           
  2669                           ;incstack = 0
  2670  001072  AA9E               	btfss	3998,5,c	;volatile
  2671  001074  D7FE               	goto	_getch
  2672                           
  2673                           ;main.c: 119: return RCREG;
  2674  001076  50AE               	movf	4014,w,c	;volatile
  2675  001078  0012               	return	
  2676  00107A                     __end_of_getch:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           intcon	equ	0xFF2
  2685                           intcon2	equ	0xFF1
  2686                           postinc0	equ	0xFEE
  2687                           wreg	equ	0xFE8
  2688                           postdec1	equ	0xFE5
  2689                           fsr1l	equ	0xFE1
  2690                           indf2	equ	0xFDF
  2691                           postinc2	equ	0xFDE
  2692                           postdec2	equ	0xFDD
  2693                           fsr2h	equ	0xFDA
  2694                           fsr2l	equ	0xFD9
  2695                           status	equ	0xFD8
  2696                           
  2697 ;; *************** function _raycast_intersection_cleared *****************
  2698 ;; Defined at:
  2699 ;;		line 164 in file "main.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;		None
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;		None
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		status,2, status,0
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2713 ;;      Params:         0       0       0       0       0       0       0       0       0
  2714 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2715 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2716 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2717 ;;Total ram usage:       18 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		Interrupt level 2
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	intcode
  2727  000008                     __pintcode:
  2728                           	opt stack 0
  2729  000008                     _raycast_intersection_cleared:
  2730                           	opt stack 25
  2731                           
  2732                           ;incstack = 0
  2733  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2734  00000A  EDD5  F005         	call	int_func,f	;refresh shadow registers
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           intcon	equ	0xFF2
  2742                           intcon2	equ	0xFF1
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postdec1	equ	0xFE5
  2746                           fsr1l	equ	0xFE1
  2747                           indf2	equ	0xFDF
  2748                           postinc2	equ	0xFDE
  2749                           postdec2	equ	0xFDD
  2750                           fsr2h	equ	0xFDA
  2751                           fsr2l	equ	0xFD9
  2752                           status	equ	0xFD8
  2753                           
  2754                           	psect	intcode_body
  2755  000BAA                     __pintcode_body:
  2756                           	opt stack 25
  2757  000BAA                     int_func:
  2758                           	opt stack 25
  2759  000BAA  0006               	pop		; remove dummy address from shadow register refresh
  2760  000BAC  CFFA F001          	movff	pclath,??_raycast_intersection_cleared
  2761  000BB0  CFFB F002          	movff	pclatu,??_raycast_intersection_cleared+1
  2762  000BB4  CFE9 F003          	movff	fsr0l,??_raycast_intersection_cleared+2
  2763  000BB8  CFEA F004          	movff	fsr0h,??_raycast_intersection_cleared+3
  2764  000BBC  CFE1 F005          	movff	fsr1l,??_raycast_intersection_cleared+4
  2765  000BC0  CFE2 F006          	movff	fsr1h,??_raycast_intersection_cleared+5
  2766  000BC4  CFD9 F007          	movff	fsr2l,??_raycast_intersection_cleared+6
  2767  000BC8  CFDA F008          	movff	fsr2h,??_raycast_intersection_cleared+7
  2768  000BCC  CFF3 F009          	movff	prodl,??_raycast_intersection_cleared+8
  2769  000BD0  CFF4 F00A          	movff	prodh,??_raycast_intersection_cleared+9
  2770  000BD4  CFF6 F00B          	movff	tblptrl,??_raycast_intersection_cleared+10
  2771  000BD8  CFF7 F00C          	movff	tblptrh,??_raycast_intersection_cleared+11
  2772  000BDC  CFF8 F00D          	movff	tblptru,??_raycast_intersection_cleared+12
  2773  000BE0  CFF5 F00E          	movff	tablat,??_raycast_intersection_cleared+13
  2774  000BE4  C049  F00F         	movff	btemp,??_raycast_intersection_cleared+14
  2775  000BE8  C04A  F010         	movff	btemp+1,??_raycast_intersection_cleared+15
  2776  000BEC  C04B  F011         	movff	btemp+2,??_raycast_intersection_cleared+16
  2777  000BF0  C04C  F012         	movff	btemp+3,??_raycast_intersection_cleared+17
  2778                           
  2779                           ;main.c: 165: FAN.count++;
  2780  000BF4  4A44               	infsnz	_FAN,f,c	;volatile
  2781  000BF6  2A45               	incf	_FAN+1,f,c	;volatile
  2782                           
  2783                           ;main.c: 166: INT0IF = 0;
  2784  000BF8  92F2               	bcf	intcon,1,c	;volatile
  2785                           
  2786                           ;main.c: 167: return;
  2787  000BFA  C012  F04C         	movff	??_raycast_intersection_cleared+17,btemp+3
  2788  000BFE  C011  F04B         	movff	??_raycast_intersection_cleared+16,btemp+2
  2789  000C02  C010  F04A         	movff	??_raycast_intersection_cleared+15,btemp+1
  2790  000C06  C00F  F049         	movff	??_raycast_intersection_cleared+14,btemp
  2791  000C0A  C00E  FFF5         	movff	??_raycast_intersection_cleared+13,tablat
  2792  000C0E  C00D  FFF8         	movff	??_raycast_intersection_cleared+12,tblptru
  2793  000C12  C00C  FFF7         	movff	??_raycast_intersection_cleared+11,tblptrh
  2794  000C16  C00B  FFF6         	movff	??_raycast_intersection_cleared+10,tblptrl
  2795  000C1A  C00A  FFF4         	movff	??_raycast_intersection_cleared+9,prodh
  2796  000C1E  C009  FFF3         	movff	??_raycast_intersection_cleared+8,prodl
  2797  000C22  C008  FFDA         	movff	??_raycast_intersection_cleared+7,fsr2h
  2798  000C26  C007  FFD9         	movff	??_raycast_intersection_cleared+6,fsr2l
  2799  000C2A  C006  FFE2         	movff	??_raycast_intersection_cleared+5,fsr1h
  2800  000C2E  C005  FFE1         	movff	??_raycast_intersection_cleared+4,fsr1l
  2801  000C32  C004  FFEA         	movff	??_raycast_intersection_cleared+3,fsr0h
  2802  000C36  C003  FFE9         	movff	??_raycast_intersection_cleared+2,fsr0l
  2803  000C3A  C002  FFFB         	movff	??_raycast_intersection_cleared+1,pclatu
  2804  000C3E  C001  FFFA         	movff	??_raycast_intersection_cleared,pclath
  2805  000C42  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2806  000C44  0011               	retfie		f
  2807  000C46                     __end_of_raycast_intersection_cleared:
  2808                           	opt stack 0
  2809                           pclatu	equ	0xFFB
  2810                           pclath	equ	0xFFA
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           prodh	equ	0xFF4
  2816                           prodl	equ	0xFF3
  2817                           intcon	equ	0xFF2
  2818                           intcon2	equ	0xFF1
  2819                           postinc0	equ	0xFEE
  2820                           fsr0h	equ	0xFEA
  2821                           fsr0l	equ	0xFE9
  2822                           wreg	equ	0xFE8
  2823                           postdec1	equ	0xFE5
  2824                           fsr1h	equ	0xFE2
  2825                           fsr1l	equ	0xFE1
  2826                           indf2	equ	0xFDF
  2827                           postinc2	equ	0xFDE
  2828                           postdec2	equ	0xFDD
  2829                           fsr2h	equ	0xFDA
  2830                           fsr2l	equ	0xFD9
  2831                           status	equ	0xFD8
  2832                           pclatu	equ	0xFFB
  2833                           pclath	equ	0xFFA
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           prodh	equ	0xFF4
  2839                           prodl	equ	0xFF3
  2840                           intcon	equ	0xFF2
  2841                           intcon2	equ	0xFF1
  2842                           postinc0	equ	0xFEE
  2843                           fsr0h	equ	0xFEA
  2844                           fsr0l	equ	0xFE9
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1h	equ	0xFE2
  2848                           fsr1l	equ	0xFE1
  2849                           indf2	equ	0xFDF
  2850                           postinc2	equ	0xFDE
  2851                           postdec2	equ	0xFDD
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856                           	psect	rparam
  2857  0000                     pclatu	equ	0xFFB
  2858                           pclath	equ	0xFFA
  2859                           tblptru	equ	0xFF8
  2860                           tblptrh	equ	0xFF7
  2861                           tblptrl	equ	0xFF6
  2862                           tablat	equ	0xFF5
  2863                           prodh	equ	0xFF4
  2864                           prodl	equ	0xFF3
  2865                           intcon	equ	0xFF2
  2866                           intcon2	equ	0xFF1
  2867                           postinc0	equ	0xFEE
  2868                           fsr0h	equ	0xFEA
  2869                           fsr0l	equ	0xFE9
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881                           	psect	temp
  2882  000049                     btemp:
  2883                           	opt stack 0
  2884  000049                     	ds	1
  2885  0000                     int$flags	set	btemp
  2886  0000                     wtemp6	set	btemp+1
  2887                           pclatu	equ	0xFFB
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           intcon	equ	0xFF2
  2896                           intcon2	equ	0xFF1
  2897                           postinc0	equ	0xFEE
  2898                           fsr0h	equ	0xFEA
  2899                           fsr0l	equ	0xFE9
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1h	equ	0xFE2
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    20
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     67      72
    BANK0           160      8       8
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[11]), STR_3(CODE[9]), 
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    buffer_serial@buffer	PTR unsigned char  size(2) Largest target is 6
		 -> main@buffer(BANK0[6]), 

    io_switch@x	PTR unsigned char  size(2) Largest target is 6
		 -> main@buffer(BANK0[6]), 


Critical Paths under _main in COMRAM

    _main->_buffer_serial
    _init_lcd->_printf
    _buffer_serial->_io_switch
    _io_switch->_main_lcd
    _read_tmr1->_printf
    _read_tmr0->_printf
    _rps_timer1->___lwdiv
    _main_lcd->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _raycast_intersection_cleared in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _raycast_intersection_cleared in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _raycast_intersection_cleared in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _raycast_intersection_cleared in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _raycast_intersection_cleared in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _raycast_intersection_cleared in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _raycast_intersection_cleared in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _raycast_intersection_cleared in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _raycast_intersection_cleared in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   18714
                                              0 BANK0      8     8      0
                               _beep
                      _buffer_serial
                           _init_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0    3544
                                             57 COMRAM     1     1      0
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (1) _buffer_serial                                        5     1      4   15029
                                             62 COMRAM     5     1      4
                              _getch
                          _io_switch
 ---------------------------------------------------------------------------------
 (2) _io_switch                                            2     0      2   14657
                                             60 COMRAM     2     0      2
                               _beep
                           _main_lcd
                          _read_tmr0
                          _read_tmr1
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _read_tmr1                                            0     0      0    5279
                             _printf
                         _rps_timer1
 ---------------------------------------------------------------------------------
 (3) _read_tmr0                                            0     0      0    5279
                             _printf
                         _rps_timer1
 ---------------------------------------------------------------------------------
 (4) _rps_timer1                                           6     0      6    1757
                                             31 COMRAM     6     0      6
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _main_lcd                                             3     0      3    3786
                                             57 COMRAM     3     0      3
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (2) _prog_lcd                                             1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              25    21      4    3522
                                             36 COMRAM    21    17      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     592
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                             24 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _beep                                                 4     4      0      46
                                             18 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _raycast_intersection_cleared                        18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _buffer_serial
     _getch
     _io_switch
       _beep
       _main_lcd
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
         _prog_lcd
       _read_tmr0
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
         _rps_timer1
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _read_tmr1
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
         _rps_timer1
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _write
   _init_lcd
     _printf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
       _putch
     _prog_lcd

 _raycast_intersection_cleared (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8       8       5        5.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     43      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50      20        0.0%
DATA                 0      0      50       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Dec 11 01:18:08 2017

                                   l72 1000                                     l67 0DD4  
                                   l69 0DFC                    ___wmul@multiplicand 0015  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    l102 0D88  
                                  l103 0D94                                    l120 0B04  
                                  l121 0B1C                                    l122 0B22  
                                  l130 0F30                                    l123 0B36  
                                  l116 0B5E                                    l124 0B4E  
                                  l117 0AEA                                    l118 0B98  
                                  l119 0AF0                                    l136 0CA2  
                                  l153 0858                                    l129 0F2C  
                                  l170 0938                                    l154 0868  
                                  l171 0926                                    l163 098E  
                                  l164 08EE                                    l156 0890  
                                  l181 0A1E                                    l173 094A  
                                  l165 0904                                    l182 0A42  
                                  l158 0960                                    l174 095C  
                                  l183 0A4A                                    l175 09BC  
                                  l167 0914                                    l168 090E  
                                  l601 0E70                                    l177 09D4  
                                  l602 0E68                                    l522 1046  
                                  l611 0F50                                    l187 0A78  
                                  l612 0F48                                    l188 0AC6  
                                  l605 0E90                                    l189 0A7E  
                                  l606 0E9A                                    l615 0F68  
                                  l616 0F72                                    _FAN 0044  
                         __CFG_CPB$OFF 000000                                    _LCD 000F83  
                                  _BUZ 007C05                                    _PR2 000FCB  
                         __CFG_CPD$OFF 000000                                    u720 0F54  
                                  u910 0ACE                                    u840 0A04  
                                  u690 0E74                                    u880 0A52  
                                  u890 0A66                                    u987 0CD0  
                                  _PWM 000FBE                                    u997 0CE2  
                                  _PUT 0240                           __CFG_BOR$OFF 000000  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1601 09D8  
                                 l1661 0DC4                                   l1565 090E  
                                 l1569 0926                                   _BAUD 080B  
                                 STR_1 0815                                   STR_2 0826  
                                 STR_3 0841                                   STR_4 0836  
                                 STR_5 084A                                   STR_6 084A  
                                 u1007 0D00                                   u1017 1062  
                                 u1027 0FF8                                   u1037 0DB0  
                                 u1047 0DDC                                   u1057 0DEE  
                                 _RCIF 007CF5                                   _TMR0 000FD6  
                                 _TMR1 000FCE                                   _TXIF 007CF4  
                                 _beep 0DA6                                   _main 0C46  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   btemp 0049  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                        __CFG_PLLDIV$5 000000                         __CFG_CCP2MX$ON 000000  
                                ?_beep 0001                                  ?_main 0001  
                                _T0CON 000FD5                                  _T1CON 000FCD  
                                _T2CON 000FCA                                  _IFOSC 080F  
                      __end_of___lwdiv 0EA4                        __end_of___lwmod 0F7C  
                                _RCREG 000FAE                                  _RCSTA 000FAB  
                                _SPBRG 000FAF                          __CFG_USBDIV$1 000000  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                                  _TXREG 000FAD  
                                _TXSTA 000FAC                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                       __CFG_EBTRB$OFF 000000                                  beep@j 0015  
                                _getch 1072                        __end_of_dpowers 080B  
                      __end_of_isdigit 104E                                  _putch 0FE0  
                                _write 106A                                  pclath 000FFA  
                                tablat 000FF5                                  status 000FD8  
                                wtemp6 004A                         __CFG_ICPRT$OFF 000000  
                      ??_buffer_serial 0043                         __CFG_PBADEN$ON 000000  
                         __end_of_BAUD 080F                        __initialization 0FB2  
                         __end_of_beep 0DFE                           __end_of_main 0CC0  
                     buffer_serial@idx 0041                                 ??_beep 0013  
                               ??_main 0044                          __activetblptr 000002  
                               ?_getch 0001                                 _CCPR1L 000FBE  
                  buffer_serial@buffer 003F                                 ?_putch 0001  
                               ?_write 0001                                 _T1FOSC 0813  
                               _INT0IF 007F91                                 _INTCON 000FF2  
                         rps_timer1@dt 0024                         __CFG_XINST$OFF 000000  
                               ___wmul 100A                           main_lcd@duty 003C  
                     __end_of_main_lcd 0FB2                         __CFG_STVREN$ON 000000  
                            ??___lwdiv 001D                              ??___lwmod 0024  
                     __end_of_init_lcd 0D3A                                 _printf 084E  
                         __pdataCOMRAM 0044                              ??_isdigit 0013  
                         __mediumconst 0000                       __end_of_prog_lcd 106A  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                             __accesstop 0060  
              __end_of__initialization 0FD2                          ___rparam_used 000001  
                        __end_of_IFOSC 0813                         __pcstackCOMRAM 0001  
                        __end_of_getch 107A                          __end_of_putch 100A  
                        __end_of_write 1072                                ??_getch 0013  
                              ??_putch 0013                                ??_write 0013  
                   __size_of_io_switch 00C2                     __size_of_read_tmr0 0054  
                   __size_of_read_tmr1 004C                                ?___wmul 0013  
                              _CCP1CON 000FBD                                ?_printf 0025  
                              _INTCON2 000FF1                              ?_main_lcd 003A  
                      __CFG_VREGEN$OFF 000000                              ?_init_lcd 0001  
                              __Hparam 0000                                __Lparam 0000  
                            ?_prog_lcd 0001                        __size_of___wmul 0026  
                              ___lwdiv 0E52                                ___lwmod 0F3A  
                         __psmallconst 0800                          main_lcd@value 003A  
                              __pcinit 0FB2                                __ramtop 0800  
                              __ptext0 0C46                                __ptext1 0CC0  
                              __ptext2 0EF0                                __ptext3 0AE8  
                              __ptext4 106A                                __ptext5 0EA4  
                              __ptext6 0DFE                                __ptext7 0D3A  
                              __ptext8 0F7C                                __ptext9 104E  
                      __size_of_printf 029A                      __end_of_io_switch 0BAA  
                              _dpowers 0801                                _isdigit 1030  
                    __end_of_read_tmr0 0E52                      __end_of_read_tmr1 0EF0  
                              main@idx 0066                         __pintcode_body 0BAA  
                 end_of_initialization 0FD2                             ??_main_lcd 003D  
                        __Lmediumconst 0000                             ??_init_lcd 003A  
                              int_func 0BAA   __end_of_raycast_intersection_cleared 0C46  
__size_of_raycast_intersection_cleared 0C3E           _raycast_intersection_cleared 0008  
                __end_of_buffer_serial 0F3A                                printf@c 0039  
                              printf@f 0025                             ??_prog_lcd 0013  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                           _rps_timer1 0D3A                            prog_lcd@msg 0013  
                       __end_of_T1FOSC 0815                             main@buffer 0060  
                          printf@width 0037          ?_raycast_intersection_cleared 0001  
                       __end_of___wmul 1030                          __pidataCOMRAM 107A  
                       __end_of_printf 0AE8                          __pbitnvCOMRAM 0240  
                  start_initialization 0FB2                            rps_timer1@x 0020  
                           io_switch@x 003D                               ??___wmul 0017  
                     __CFG_LPT1OSC$OFF 000000                               ??_printf 0029  
                        __pcstackBANK0 0060                            ?_rps_timer1 0020  
                    __size_of_main_lcd 0036                      __size_of_init_lcd 007A  
                     ___lwdiv@dividend 0019                              __pintcode 0008  
       ??_raycast_intersection_cleared 0001                               ?___lwdiv 0019  
                             ?___lwmod 0020                      __size_of_prog_lcd 001C  
                          __smallconst 0800                               ?_isdigit 0001  
                            _io_switch 0AE8                       ___lwdiv@quotient 001E  
                       __size_of_getch 0008                              _read_tmr0 0DFE  
                            _read_tmr1 0EA4                         __size_of_putch 002A  
                       __size_of_write 0008                         ___wmul@product 0017  
                     __CFG_WDTPS$32768 000000                    __size_of_rps_timer1 006C  
                    ___wmul@multiplier 0013                             printf@flag 0034  
                           printf@prec 002F                             ?_io_switch 003D  
                            copy_data0 0FC6                             ?_read_tmr0 0001  
                           ?_read_tmr1 0001                               __Hrparam 0000  
                             __Lrparam 0000                       __size_of___lwdiv 0052  
                     __size_of___lwmod 0042                            _isdigit$378 0014  
                     __size_of_isdigit 001E                        ___lwdiv@divisor 001B  
                      ___lwdiv@counter 001D                               __ptext10 084E  
                             __ptext11 0FE0                               __ptext12 1030  
                             __ptext13 100A                               __ptext14 0F3A  
                             __ptext15 0E52                               __ptext16 0DA6  
                             __ptext17 1072                 __size_of_buffer_serial 004A  
                             _main_lcd 0F7C                          __size_of_beep 0058  
                             _init_lcd 0CC0                          __size_of_main 007A  
                             _prog_lcd 104E                               int$flags 0049  
                            printf@len 0032                              printf@val 0035  
                __CFG_CPUDIV$OSC1_PLL2 000000                               isdigit@c 0015  
                          ??_io_switch 003F                           ??_rps_timer1 0026  
                          ??_read_tmr0 003A                            ??_read_tmr1 003A  
                             intlevel2 0000                       ___lwmod@dividend 0020  
                            write@duty 0013                          _buffer_serial 0EF0  
                             printf@ap 0030                               printf@cp 002D  
                             putch@msg 0013                     __end_of_rps_timer1 0DA6  
                      ___lwmod@divisor 0022                        ___lwmod@counter 0024  
                   __CFG_FOSC$HSPLL_HS 000000                         ?_buffer_serial 003F  
