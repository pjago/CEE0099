

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Dec 10 23:32:59 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.43
    35                           ; Generated 25/07/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F877A Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128                           
   129                           	psect	idataBANK0
   130  079B                     __pidataBANK0:	
   131                           
   132                           ;initializer for _FAN
   133  079B  34FF               	retlw	255
   134  079C  34FF               	retlw	255
   135  079D  3400               	retlw	0
   136  079E  3400               	retlw	0
   137                           
   138                           	psect	strings
   139  054C                     __pstrings:	
   140  054C                     stringtab:	
   141  054C                     __stringtab:	
   142  054C                     stringcode:	
   143                           ;	String table - string pointers are 1 byte each
   144                           
   145  054C                     stringdir:	
   146  054C  3005               	movlw	high stringdir
   147  054D  008A               	movwf	10
   148  054E  0804               	movf	4,w
   149  054F  0A84               	incf	4,f
   150  0550  0782               	addwf	2,f
   151  0551                     __stringbase:	
   152  0551  3400               	retlw	0
   153  0552                     __end_of__stringtab:	
   154  0552                     _dpowers:	
   155  0552  3401               	retlw	1
   156  0553  3400               	retlw	0
   157  0554  340A               	retlw	10
   158  0555  3400               	retlw	0
   159  0556  3464               	retlw	100
   160  0557  3400               	retlw	0
   161  0558  34E8               	retlw	232
   162  0559  3403               	retlw	3
   163  055A  3410               	retlw	16
   164  055B  3427               	retlw	39
   165  055C                     __end_of_dpowers:	
   166  055C                     _BAUD:	
   167  055C  3400               	retlw	0
   168  055D  344B               	retlw	75
   169  055E  3400               	retlw	0
   170  055F  3400               	retlw	0
   171  0560                     __end_of_BAUD:	
   172  0560                     _IFOSC:	
   173  0560  3440               	retlw	64
   174  0561  344B               	retlw	75
   175  0562  344C               	retlw	76
   176  0563  3400               	retlw	0
   177  0564                     __end_of_IFOSC:	
   178  0564                     _T1FOSC:	
   179  0564  3468               	retlw	104
   180  0565  3401               	retlw	1
   181  0566                     __end_of_T1FOSC:	
   182  0566                     STR_1:	
   183  0566  344C               	retlw	76	;'L'
   184  0567  3441               	retlw	65	;'A'
   185  0568  3442               	retlw	66	;'B'
   186  0569  342E               	retlw	46	;'.'
   187  056A  3443               	retlw	67	;'C'
   188  056B  344F               	retlw	79	;'O'
   189  056C  344E               	retlw	78	;'N'
   190  056D  3454               	retlw	84	;'T'
   191  056E  342E               	retlw	46	;'.'
   192  056F  3444               	retlw	68	;'D'
   193  0570  3449               	retlw	73	;'I'
   194  0571  3447               	retlw	71	;'G'
   195  0572  3449               	retlw	73	;'I'
   196  0573  3454               	retlw	84	;'T'
   197  0574  3441               	retlw	65	;'A'
   198  0575  344C               	retlw	76	;'L'
   199  0576  3400               	retlw	0
   200  0577                     STR_2:	
   201  0577  3453               	retlw	83	;'S'
   202  0578  3465               	retlw	101	;'e'
   203  0579  346A               	retlw	106	;'j'
   204  057A  3461               	retlw	97	;'a'
   205  057B  3420               	retlw	32	;' '
   206  057C  3442               	retlw	66	;'B'
   207  057D  3465               	retlw	101	;'e'
   208  057E  346D               	retlw	109	;'m'
   209  057F  342D               	retlw	45	;'-'
   210  0580  3456               	retlw	86	;'V'
   211  0581  3469               	retlw	105	;'i'
   212  0582  346E               	retlw	110	;'n'
   213  0583  3464               	retlw	100	;'d'
   214  0584  346F               	retlw	111	;'o'
   215  0585  3421               	retlw	33	;'!'
   216  0586  3400               	retlw	0
   217  0587                     STR_4:	
   218  0587  3470               	retlw	112	;'p'
   219  0588  3477               	retlw	119	;'w'
   220  0589  346D               	retlw	109	;'m'
   221  058A  343A               	retlw	58	;':'
   222  058B  3420               	retlw	32	;' '
   223  058C  3425               	retlw	37	;'%'
   224  058D  3433               	retlw	51	;'3'
   225  058E  3464               	retlw	100	;'d'
   226  058F  3425               	retlw	37	;'%'
   227  0590  3425               	retlw	37	;'%'
   228  0591  3400               	retlw	0
   229  0592                     STR_3:	
   230  0592  3472               	retlw	114	;'r'
   231  0593  3470               	retlw	112	;'p'
   232  0594  3473               	retlw	115	;'s'
   233  0595  343A               	retlw	58	;':'
   234  0596  3420               	retlw	32	;' '
   235  0597  3425               	retlw	37	;'%'
   236  0598  3433               	retlw	51	;'3'
   237  0599  3475               	retlw	117	;'u'
   238  059A  3400               	retlw	0
   239  059B                     STR_5:	
   240  059B  3425               	retlw	37	;'%'
   241  059C  3475               	retlw	117	;'u'
   242  059D  3400               	retlw	0
   243  059B                     
   244                           ; #config settings
   245  0000                     
   246                           	psect	bitnvCOMMON
   247  03C8                     __pbitnvCOMMON:	
   248  03C8                     _PUT:	
   249  03C8                     	ds	1
   250  0008                     _LCD	set	8
   251  000E                     _TMR1	set	14
   252  0015                     _PWM	set	21
   253  0018                     _RCSTA	set	24
   254  000B                     _INTCON	set	11
   255  0012                     _T2CON	set	18
   256  0015                     _CCPR1L	set	21
   257  0017                     _CCP1CON	set	23
   258  0010                     _T1CON	set	16
   259  0001                     _TMR0	set	1
   260  001A                     _RCREG	set	26
   261  0019                     _TXREG	set	25
   262  002D                     _BUZ	set	45
   263  0059                     _INTF	set	89
   264  0065                     _RCIF	set	101
   265  0064                     _TXIF	set	100
   266  0099                     _SPBRG	set	153
   267  0098                     _TXSTA	set	152
   268  0085                     _TRISA	set	133
   269  0089                     _TRISE	set	137
   270  0088                     _TRISD	set	136
   271  0086                     _TRISB	set	134
   272  0081                     _OPTION_REG	set	129
   273  0087                     _TRISC	set	135
   274  0092                     _PR2	set	146
   275                           
   276                           	psect	cinit
   277  0015                     start_initialization:	
   278  0015                     __initialization:	
   279                           
   280                           ; Initialize objects allocated to BANK0
   281  0015  120A  118A  279B  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   282  001A  00D4               	movwf	__pdataBANK0& (0+127)
   283  001B  120A  118A  279C  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   284  0020  00D5               	movwf	(__pdataBANK0+1)& (0+127)
   285  0021  120A  118A  279D  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   286  0026  00D6               	movwf	(__pdataBANK0+2)& (0+127)
   287  0027  120A  118A  279E   	fcall	__pidataBANK0+3	;fetch initializer
   288  002A  00D7               	movwf	(__pdataBANK0+3)& (0+127)
   289  002B                     end_of_initialization:	
   290                           ;End of C runtime variable initialization code
   291                           
   292  002B                     __end_of__initialization:	
   293  002B  0183               	clrf	3
   294  002C  120A  118A  2D9E   	ljmp	_main	;jump to C main() function
   295                           
   296                           	psect	dataBANK0
   297  0054                     __pdataBANK0:	
   298  0054                     _FAN:	
   299  0054                     	ds	4
   300                           
   301                           	psect	cstackCOMMON
   302  0070                     __pcstackCOMMON:	
   303  0070                     ?_isdigit:	
   304  0070                     ?_beep:	
   305                           ; 1 bit 
   306                           
   307  0070                     ?_putch:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_getch:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_prog_lcd:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_init_lcd:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_raycast_intersection_cleared:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ??_raycast_intersection_cleared:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_read_tmr1:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_read_tmr0:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_write:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_io_switch:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_main:	
   338                           ; 1 bytes @ 0x0
   339                           
   340                           
   341                           ; 2 bytes @ 0x0
   342  0070                     	ds	4
   343  0074                     ??_isdigit:	
   344  0074                     ??_getch:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     ??_write:	
   348                           ; 1 bytes @ 0x4
   349                           
   350  0074                     ??___lldiv:	
   351                           ; 1 bytes @ 0x4
   352                           
   353  0074                     ?___wmul:	
   354                           ; 1 bytes @ 0x4
   355                           
   356  0074                     write@duty:	
   357                           ; 2 bytes @ 0x4
   358                           
   359  0074                     _isdigit$347:	
   360                           ; 1 bytes @ 0x4
   361                           
   362  0074                     ___wmul@multiplier:	
   363                           ; 1 bytes @ 0x4
   364                           
   365                           
   366                           ; 2 bytes @ 0x4
   367  0074                     	ds	1
   368  0075                     ??_beep:	
   369  0075                     ??_putch:	
   370                           ; 1 bytes @ 0x5
   371                           
   372  0075                     ??_prog_lcd:	
   373                           ; 1 bytes @ 0x5
   374                           
   375  0075                     isdigit@c:	
   376                           ; 1 bytes @ 0x5
   377                           
   378                           
   379                           ; 1 bytes @ 0x5
   380  0075                     	ds	1
   381  0076                     ___wmul@multiplicand:	
   382                           
   383                           ; 2 bytes @ 0x6
   384  0076                     	ds	2
   385  0078                     ??___wmul:	
   386  0078                     ??___lwdiv:	
   387                           ; 1 bytes @ 0x8
   388                           
   389                           
   390                           ; 1 bytes @ 0x8
   391  0078                     	ds	1
   392  0079                     ??_rps_timer1:	
   393  0079                     ??_read_tmr1:	
   394                           ; 1 bytes @ 0x9
   395                           
   396  0079                     ??_main:	
   397                           ; 1 bytes @ 0x9
   398                           
   399                           
   400                           	psect	cstackBANK0
   401  0020                     __pcstackBANK0:	
   402                           ; 1 bytes @ 0x9
   403                           
   404  0020                     ?___lldiv:	
   405  0020                     ___wmul@product:	
   406                           ; 4 bytes @ 0x0
   407                           
   408  0020                     ___lldiv@divisor:	
   409                           ; 2 bytes @ 0x0
   410                           
   411                           
   412                           ; 4 bytes @ 0x0
   413  0020                     	ds	2
   414  0022                     ?___lwdiv:	
   415  0022                     ___lwdiv@divisor:	
   416                           ; 2 bytes @ 0x2
   417                           
   418                           
   419                           ; 2 bytes @ 0x2
   420  0022                     	ds	2
   421  0024                     ___lwdiv@dividend:	
   422  0024                     ___lldiv@dividend:	
   423                           ; 2 bytes @ 0x4
   424                           
   425                           
   426                           ; 4 bytes @ 0x4
   427  0024                     	ds	2
   428  0026                     ___lwdiv@counter:	
   429                           
   430                           ; 1 bytes @ 0x6
   431  0026                     	ds	1
   432  0027                     ___lwdiv@quotient:	
   433                           
   434                           ; 2 bytes @ 0x7
   435  0027                     	ds	1
   436  0028                     ___lldiv@quotient:	
   437                           
   438                           ; 4 bytes @ 0x8
   439  0028                     	ds	1
   440  0029                     ?___lwmod:	
   441  0029                     ?_rps_timer1:	
   442                           ; 2 bytes @ 0x9
   443                           
   444  0029                     ___lwmod@divisor:	
   445                           ; 4 bytes @ 0x9
   446                           
   447  0029                     rps_timer1@x:	
   448                           ; 2 bytes @ 0x9
   449                           
   450                           
   451                           ; 4 bytes @ 0x9
   452  0029                     	ds	2
   453  002B                     ___lwmod@dividend:	
   454                           
   455                           ; 2 bytes @ 0xB
   456  002B                     	ds	1
   457  002C                     ___lldiv@counter:	
   458                           
   459                           ; 1 bytes @ 0xC
   460  002C                     	ds	1
   461  002D                     ??___lwmod:	
   462  002D                     putch@msg:	
   463                           ; 1 bytes @ 0xD
   464                           
   465  002D                     prog_lcd@msg:	
   466                           ; 1 bytes @ 0xD
   467                           
   468  002D                     beep@j:	
   469                           ; 1 bytes @ 0xD
   470                           
   471  002D                     rps_timer1@dt:	
   472                           ; 2 bytes @ 0xD
   473                           
   474                           
   475                           ; 2 bytes @ 0xD
   476  002D                     	ds	1
   477  002E                     ___lwmod@counter:	
   478                           
   479                           ; 1 bytes @ 0xE
   480  002E                     	ds	1
   481  002F                     ?_printf:	
   482                           
   483                           ; 2 bytes @ 0xF
   484  002F                     	ds	2
   485  0031                     ??_printf:	
   486                           
   487                           ; 1 bytes @ 0x11
   488  0031                     	ds	3
   489  0034                     printf@cp:	
   490                           
   491                           ; 1 bytes @ 0x14
   492  0034                     	ds	1
   493  0035                     printf@prec:	
   494                           
   495                           ; 1 bytes @ 0x15
   496  0035                     	ds	1
   497  0036                     printf@ap:	
   498                           
   499                           ; 1 bytes @ 0x16
   500  0036                     	ds	1
   501  0037                     printf@len:	
   502                           
   503                           ; 2 bytes @ 0x17
   504  0037                     	ds	2
   505  0039                     printf@flag:	
   506                           
   507                           ; 1 bytes @ 0x19
   508  0039                     	ds	1
   509  003A                     printf@val:	
   510                           
   511                           ; 2 bytes @ 0x1A
   512  003A                     	ds	2
   513  003C                     printf@f:	
   514                           
   515                           ; 1 bytes @ 0x1C
   516  003C                     	ds	1
   517  003D                     printf@width:	
   518                           
   519                           ; 2 bytes @ 0x1D
   520  003D                     	ds	2
   521  003F                     printf@c:	
   522                           
   523                           ; 1 bytes @ 0x1F
   524  003F                     	ds	1
   525  0040                     ??_init_lcd:	
   526  0040                     ?_main_lcd:	
   527                           ; 1 bytes @ 0x20
   528                           
   529  0040                     ??_read_tmr0:	
   530                           ; 1 bytes @ 0x20
   531                           
   532  0040                     main_lcd@value:	
   533                           ; 1 bytes @ 0x20
   534                           
   535                           
   536                           ; 2 bytes @ 0x20
   537  0040                     	ds	2
   538  0042                     main_lcd@duty:	
   539                           
   540                           ; 1 bytes @ 0x22
   541  0042                     	ds	1
   542  0043                     ??_main_lcd:	
   543                           
   544                           ; 1 bytes @ 0x23
   545  0043                     	ds	2
   546  0045                     ??_io_switch:	
   547                           
   548                           ; 1 bytes @ 0x25
   549  0045                     	ds	1
   550  0046                     io_switch@x:	
   551                           
   552                           ; 1 bytes @ 0x26
   553  0046                     	ds	1
   554  0047                     ?_buffer_serial:	
   555  0047                     buffer_serial@idx:	
   556                           ; 2 bytes @ 0x27
   557                           
   558                           
   559                           ; 2 bytes @ 0x27
   560  0047                     	ds	2
   561  0049                     ??_buffer_serial:	
   562                           
   563                           ; 1 bytes @ 0x29
   564  0049                     	ds	2
   565  004B                     buffer_serial@buffer:	
   566                           
   567                           ; 1 bytes @ 0x2B
   568  004B                     	ds	1
   569  004C                     main@buffer:	
   570                           
   571                           ; 6 bytes @ 0x2C
   572  004C                     	ds	6
   573  0052                     main@idx:	
   574                           
   575                           ; 2 bytes @ 0x32
   576  0052                     	ds	2
   577                           
   578                           	psect	maintext
   579  059E                     __pmaintext:	
   580 ;;
   581 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   582 ;;
   583 ;; *************** function _main *****************
   584 ;; Defined at:
   585 ;;		line 176 in file "main.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;		None
   588 ;; Auto vars:     Size  Location     Type
   589 ;;  buffer          6   44[BANK0 ] unsigned char [6]
   590 ;;  idx             2   50[BANK0 ] int 
   591 ;; Return value:  Size  Location     Type
   592 ;;                  2  133[None  ] int 
   593 ;; Registers used:
   594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   595 ;; Tracked objects:
   596 ;;		On entry : B00/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   600 ;;      Params:         0       0       0       0       0
   601 ;;      Locals:         0       8       0       0       0
   602 ;;      Temps:          0       0       0       0       0
   603 ;;      Totals:         0       8       0       0       0
   604 ;;Total ram usage:        8 bytes
   605 ;; Hardware stack levels required when called:    7
   606 ;; This function calls:
   607 ;;		_beep
   608 ;;		_buffer_serial
   609 ;;		_init_lcd
   610 ;; This function is called by:
   611 ;;		Startup code after reset
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           
   616                           ;psect for function _main
   617  059E                     _main:	
   618                           
   619                           ;main.c: 177: T1CON = 0x0B;
   620                           
   621                           ;incstack = 0
   622                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   623  059E  300B               	movlw	11
   624  059F  1283               	bcf	3,5	;RP0=0, select bank0
   625  05A0  1303               	bcf	3,6	;RP1=0, select bank0
   626  05A1  0090               	movwf	16	;volatile
   627                           
   628                           ;main.c: 178: CCP1CON = 0x0F;
   629  05A2  300F               	movlw	15
   630  05A3  0097               	movwf	23	;volatile
   631                           
   632                           ;main.c: 179: CCPR1L = 0;
   633  05A4  0195               	clrf	21	;volatile
   634                           
   635                           ;main.c: 180: PR2 = 100;
   636  05A5  3064               	movlw	100
   637  05A6  1683               	bsf	3,5	;RP0=1, select bank1
   638  05A7  1303               	bcf	3,6	;RP1=0, select bank1
   639  05A8  0092               	movwf	18	;volatile
   640                           
   641                           ;main.c: 181: T2CON = 0x04;
   642  05A9  3004               	movlw	4
   643  05AA  1283               	bcf	3,5	;RP0=0, select bank0
   644  05AB  1303               	bcf	3,6	;RP1=0, select bank0
   645  05AC  0092               	movwf	18	;volatile
   646                           
   647                           ;main.c: 182: TRISC = 0xFB;
   648  05AD  30FB               	movlw	251
   649  05AE  1683               	bsf	3,5	;RP0=1, select bank1
   650  05AF  1303               	bcf	3,6	;RP1=0, select bank1
   651  05B0  0087               	movwf	7	;volatile
   652                           
   653                           ;main.c: 183: OPTION_REG = 0x38;
   654  05B1  3038               	movlw	56
   655  05B2  0081               	movwf	1	;volatile
   656                           
   657                           ;main.c: 184: TRISB = 0x7F;
   658  05B3  307F               	movlw	127
   659  05B4  0086               	movwf	6	;volatile
   660                           
   661                           ;main.c: 185: INTCON = 0x90;
   662  05B5  3090               	movlw	144
   663  05B6  008B               	movwf	11	;volatile
   664                           
   665                           ;main.c: 186: TRISD = 0x00;
   666  05B7  0188               	clrf	8	;volatile
   667                           
   668                           ;main.c: 187: TRISE = 0xF8;
   669  05B8  30F8               	movlw	248
   670  05B9  0089               	movwf	9	;volatile
   671                           
   672                           ;main.c: 188: TRISA = 0xCF;
   673  05BA  30CF               	movlw	207
   674  05BB  0085               	movwf	5	;volatile
   675                           
   676                           ;main.c: 189: RCSTA = 0x90;
   677  05BC  3090               	movlw	144
   678  05BD  1283               	bcf	3,5	;RP0=0, select bank0
   679  05BE  1303               	bcf	3,6	;RP1=0, select bank0
   680  05BF  0098               	movwf	24	;volatile
   681                           
   682                           ;main.c: 190: TXSTA = 0x24;
   683  05C0  3024               	movlw	36
   684  05C1  1683               	bsf	3,5	;RP0=1, select bank1
   685  05C2  1303               	bcf	3,6	;RP1=0, select bank1
   686  05C3  0098               	movwf	24	;volatile
   687                           
   688                           ;main.c: 191: SPBRG = 64;
   689  05C4  3040               	movlw	64
   690  05C5  0099               	movwf	25	;volatile
   691                           
   692                           ;main.c: 192: init_lcd();
   693  05C6  120A  118A  21F4  120A  118A  	fcall	_init_lcd
   694                           
   695                           ;main.c: 193: beep();
   696  05CB  120A  118A  22D2  120A  118A  	fcall	_beep
   697                           
   698                           ;main.c: 194: beep();
   699  05D0  120A  118A  22D2  120A  118A  	fcall	_beep
   700                           
   701                           ;main.c: 195: beep();
   702  05D5  120A  118A  22D2  120A  118A  	fcall	_beep
   703                           
   704                           ;main.c: 196: char buffer[6];
   705                           ;main.c: 197: int idx = 0;
   706  05DA  1283               	bcf	3,5	;RP0=0, select bank0
   707  05DB  1303               	bcf	3,6	;RP1=0, select bank0
   708  05DC  01D2               	clrf	main@idx
   709  05DD  01D3               	clrf	main@idx+1
   710  05DE                     l1757:	
   711                           ;main.c: 198: while (1) idx = buffer_serial(buffer, idx);
   712                           
   713  05DE  0853               	movf	main@idx+1,w
   714  05DF  00C8               	movwf	buffer_serial@idx+1
   715  05E0  0852               	movf	main@idx,w
   716  05E1  00C7               	movwf	buffer_serial@idx
   717  05E2  304C               	movlw	(low (main@buffer| 0))& (0+255)
   718  05E3  120A  118A  26CA  120A  118A  	fcall	_buffer_serial
   719  05E8  1283               	bcf	3,5	;RP0=0, select bank0
   720  05E9  1303               	bcf	3,6	;RP1=0, select bank0
   721  05EA  0848               	movf	?_buffer_serial+1,w
   722  05EB  00D3               	movwf	main@idx+1
   723  05EC  0847               	movf	?_buffer_serial,w
   724  05ED  00D2               	movwf	main@idx
   725  05EE  2DDE               	goto	l1757
   726  05EF                     __end_of_main:	
   727                           ;main.c: 199: return 0;
   728                           ;	Return value of _main is never used
   729                           
   730                           
   731                           	psect	text1
   732  01F4                     __ptext1:	
   733 ;; *************** function _init_lcd *****************
   734 ;; Defined at:
   735 ;;		line 75 in file "main.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;		None
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   749 ;;      Params:         0       0       0       0       0
   750 ;;      Locals:         0       0       0       0       0
   751 ;;      Temps:          0       4       0       0       0
   752 ;;      Totals:         0       4       0       0       0
   753 ;;Total ram usage:        4 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    4
   756 ;; This function calls:
   757 ;;		___lldiv
   758 ;;		_printf
   759 ;;		_prog_lcd
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           
   766                           ;psect for function _init_lcd
   767  01F4                     _init_lcd:	
   768                           
   769                           ;main.c: 76: PUT = 1;
   770                           
   771                           ;incstack = 0
   772                           ; Regs used in _init_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   773  01F4  1479               	bsf	_PUT/(0+8),_PUT& (0+7)
   774                           
   775                           ;main.c: 77: LCD.RW = 0;
   776  01F5  1283               	bcf	3,5	;RP0=0, select bank0
   777  01F6  1303               	bcf	3,6	;RP1=0, select bank0
   778  01F7  1089               	bcf	9,1
   779                           
   780                           ;main.c: 78: prog_lcd(0x30); _delay(IFOSC/200);
   781  01F8  3030               	movlw	48
   782  01F9  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   783  01FE  3000               	movlw	0
   784  01FF  1283               	bcf	3,5	;RP0=0, select bank0
   785  0200  1303               	bcf	3,6	;RP1=0, select bank0
   786  0201  00A3               	movwf	___lldiv@divisor+3
   787  0202  3000               	movlw	0
   788  0203  00A2               	movwf	___lldiv@divisor+2
   789  0204  3000               	movlw	0
   790  0205  00A1               	movwf	___lldiv@divisor+1
   791  0206  30C8               	movlw	200
   792  0207  00A0               	movwf	___lldiv@divisor
   793  0208  300F               	movlw	low (_IFOSC-__stringbase)
   794  0209  0084               	movwf	4
   795  020A  120A  118A  254C  120A  118A  	fcall	stringdir
   796  020F  00A4               	movwf	___lldiv@dividend
   797  0210  120A  118A  254C  120A  118A  	fcall	stringdir
   798  0215  00A5               	movwf	___lldiv@dividend+1
   799  0216  120A  118A  254C  120A  118A  	fcall	stringdir
   800  021B  00A6               	movwf	___lldiv@dividend+2
   801  021C  120A  118A  254C  120A  118A  	fcall	stringdir
   802  0221  00A7               	movwf	___lldiv@dividend+3
   803  0222  120A  118A  24EC  120A  118A  	fcall	___lldiv
   804  0227  1283               	bcf	3,5	;RP0=0, select bank0
   805  0228  1303               	bcf	3,6	;RP1=0, select bank0
   806  0229  0820               	movf	?___lldiv,w
   807  022A  00C0               	movwf	??_init_lcd
   808  022B  0821               	movf	?___lldiv+1,w
   809  022C  00C1               	movwf	??_init_lcd+1
   810  022D  0822               	movf	?___lldiv+2,w
   811  022E  00C2               	movwf	??_init_lcd+2
   812  022F  0823               	movf	?___lldiv+3,w
   813  0230  00C3               	movwf	??_init_lcd+3
   814                           
   815                           ;main.c: 79: prog_lcd(0x30); _delay(IFOSC/10000);
   816  0231  3030               	movlw	48
   817  0232  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   818  0237  3000               	movlw	0
   819  0238  1283               	bcf	3,5	;RP0=0, select bank0
   820  0239  1303               	bcf	3,6	;RP1=0, select bank0
   821  023A  00A3               	movwf	___lldiv@divisor+3
   822  023B  3000               	movlw	0
   823  023C  00A2               	movwf	___lldiv@divisor+2
   824  023D  3027               	movlw	39
   825  023E  00A1               	movwf	___lldiv@divisor+1
   826  023F  3010               	movlw	16
   827  0240  00A0               	movwf	___lldiv@divisor
   828  0241  300F               	movlw	low (_IFOSC-__stringbase)
   829  0242  0084               	movwf	4
   830  0243  120A  118A  254C  120A  118A  	fcall	stringdir
   831  0248  00A4               	movwf	___lldiv@dividend
   832  0249  120A  118A  254C  120A  118A  	fcall	stringdir
   833  024E  00A5               	movwf	___lldiv@dividend+1
   834  024F  120A  118A  254C  120A  118A  	fcall	stringdir
   835  0254  00A6               	movwf	___lldiv@dividend+2
   836  0255  120A  118A  254C  120A  118A  	fcall	stringdir
   837  025A  00A7               	movwf	___lldiv@dividend+3
   838  025B  120A  118A  24EC  120A  118A  	fcall	___lldiv
   839  0260  1283               	bcf	3,5	;RP0=0, select bank0
   840  0261  1303               	bcf	3,6	;RP1=0, select bank0
   841  0262  0820               	movf	?___lldiv,w
   842  0263  00C0               	movwf	??_init_lcd
   843  0264  0821               	movf	?___lldiv+1,w
   844  0265  00C1               	movwf	??_init_lcd+1
   845  0266  0822               	movf	?___lldiv+2,w
   846  0267  00C2               	movwf	??_init_lcd+2
   847  0268  0823               	movf	?___lldiv+3,w
   848  0269  00C3               	movwf	??_init_lcd+3
   849                           
   850                           ;main.c: 80: prog_lcd(0x30);
   851  026A  3030               	movlw	48
   852  026B  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   853                           
   854                           ;main.c: 81: prog_lcd(0x38);
   855  0270  3038               	movlw	56
   856  0271  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   857                           
   858                           ;main.c: 82: prog_lcd(0x01); _delay(IFOSC/500);
   859  0276  3001               	movlw	1
   860  0277  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   861  027C  3000               	movlw	0
   862  027D  1283               	bcf	3,5	;RP0=0, select bank0
   863  027E  1303               	bcf	3,6	;RP1=0, select bank0
   864  027F  00A3               	movwf	___lldiv@divisor+3
   865  0280  3000               	movlw	0
   866  0281  00A2               	movwf	___lldiv@divisor+2
   867  0282  3001               	movlw	1
   868  0283  00A1               	movwf	___lldiv@divisor+1
   869  0284  30F4               	movlw	244
   870  0285  00A0               	movwf	___lldiv@divisor
   871  0286  300F               	movlw	low (_IFOSC-__stringbase)
   872  0287  0084               	movwf	4
   873  0288  120A  118A  254C  120A  118A  	fcall	stringdir
   874  028D  00A4               	movwf	___lldiv@dividend
   875  028E  120A  118A  254C  120A  118A  	fcall	stringdir
   876  0293  00A5               	movwf	___lldiv@dividend+1
   877  0294  120A  118A  254C  120A  118A  	fcall	stringdir
   878  0299  00A6               	movwf	___lldiv@dividend+2
   879  029A  120A  118A  254C  120A  118A  	fcall	stringdir
   880  029F  00A7               	movwf	___lldiv@dividend+3
   881  02A0  120A  118A  24EC  120A  118A  	fcall	___lldiv
   882  02A5  1283               	bcf	3,5	;RP0=0, select bank0
   883  02A6  1303               	bcf	3,6	;RP1=0, select bank0
   884  02A7  0820               	movf	?___lldiv,w
   885  02A8  00C0               	movwf	??_init_lcd
   886  02A9  0821               	movf	?___lldiv+1,w
   887  02AA  00C1               	movwf	??_init_lcd+1
   888  02AB  0822               	movf	?___lldiv+2,w
   889  02AC  00C2               	movwf	??_init_lcd+2
   890  02AD  0823               	movf	?___lldiv+3,w
   891  02AE  00C3               	movwf	??_init_lcd+3
   892                           
   893                           ;main.c: 83: prog_lcd(0x0C);
   894  02AF  300C               	movlw	12
   895  02B0  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   896                           
   897                           ;main.c: 84: prog_lcd(0x06);
   898  02B5  3006               	movlw	6
   899  02B6  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   900                           
   901                           ;main.c: 85: prog_lcd(0x80);
   902  02BB  3080               	movlw	128
   903  02BC  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   904                           
   905                           ;main.c: 86: printf("LAB.CONT.DIGITAL");
   906  02C1  3015               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   907  02C2  120A  118A  202F  120A  118A  	fcall	_printf
   908                           
   909                           ;main.c: 87: prog_lcd(0xC0);
   910  02C7  30C0               	movlw	192
   911  02C8  120A  118A  2481  120A  118A  	fcall	_prog_lcd
   912                           
   913                           ;main.c: 88: printf("Seja Bem-Vindo!");
   914  02CD  3026               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   915  02CE  120A  118A  202F   	fcall	_printf
   916  02D1  0008               	return
   917  02D2                     __end_of_init_lcd:	
   918                           ;main.c: 89: return;
   919                           
   920                           
   921                           	psect	text2
   922  06CA                     __ptext2:	
   923 ;; *************** function _buffer_serial *****************
   924 ;; Defined at:
   925 ;;		line 164 in file "main.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  buffer          1    wreg     PTR unsigned char 
   928 ;;		 -> main@buffer(6), 
   929 ;;  idx             2   39[BANK0 ] int 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  buffer          1   43[BANK0 ] PTR unsigned char 
   932 ;;		 -> main@buffer(6), 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2   39[BANK0 ] int 
   935 ;; Registers used:
   936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       2       0       0       0
   943 ;;      Locals:         0       1       0       0       0
   944 ;;      Temps:          0       2       0       0       0
   945 ;;      Totals:         0       5       0       0       0
   946 ;;Total ram usage:        5 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    6
   949 ;; This function calls:
   950 ;;		_getch
   951 ;;		_io_switch
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _buffer_serial
   959  06CA                     _buffer_serial:	
   960                           
   961                           ;incstack = 0
   962                           ; Regs used in _buffer_serial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   963                           ;buffer_serial@buffer stored from wreg
   964  06CA  1283               	bcf	3,5	;RP0=0, select bank0
   965  06CB  1303               	bcf	3,6	;RP1=0, select bank0
   966  06CC  00CB               	movwf	buffer_serial@buffer
   967                           
   968                           ;main.c: 165: buffer[idx] = getch();
   969  06CD  120A  118A  2795  120A  118A  	fcall	_getch
   970  06D2  1283               	bcf	3,5	;RP0=0, select bank0
   971  06D3  1303               	bcf	3,6	;RP1=0, select bank0
   972  06D4  00C9               	movwf	??_buffer_serial
   973  06D5  0847               	movf	buffer_serial@idx,w
   974  06D6  074B               	addwf	buffer_serial@buffer,w
   975  06D7  00CA               	movwf	??_buffer_serial+1
   976  06D8  084A               	movf	??_buffer_serial+1,w
   977  06D9  0084               	movwf	4
   978  06DA  0849               	movf	??_buffer_serial,w
   979  06DB  1383               	bcf	3,7	;select IRP bank0
   980  06DC  0080               	movwf	0
   981                           
   982                           ;main.c: 166: if (buffer[idx] == '\n') {
   983  06DD  0847               	movf	buffer_serial@idx,w
   984  06DE  074B               	addwf	buffer_serial@buffer,w
   985  06DF  00C9               	movwf	??_buffer_serial
   986  06E0  0849               	movf	??_buffer_serial,w
   987  06E1  0084               	movwf	4
   988  06E2  300A               	movlw	10
   989  06E3  0600               	xorwf	0,w
   990  06E4  1D03               	btfss	3,2
   991  06E5  2EED               	goto	l1723
   992                           
   993                           ;main.c: 167: idx=0;
   994  06E6  01C7               	clrf	buffer_serial@idx
   995  06E7  01C8               	clrf	buffer_serial@idx+1
   996                           
   997                           ;main.c: 168: io_switch(buffer);
   998  06E8  084B               	movf	buffer_serial@buffer,w
   999  06E9  120A  118A  2385   	fcall	_io_switch
  1000                           
  1001                           ;main.c: 169: }
  1002  06EC  0008               	return
  1003  06ED                     l1723:	
  1004                           
  1005                           ;main.c: 170: else {
  1006                           ;main.c: 171: idx++;
  1007  06ED  3001               	movlw	1
  1008  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  1009  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  1010  06F0  07C7               	addwf	buffer_serial@idx,f
  1011  06F1  1803               	skipnc
  1012  06F2  0AC8               	incf	buffer_serial@idx+1,f
  1013  06F3  3000               	movlw	0
  1014  06F4  07C8               	addwf	buffer_serial@idx+1,f
  1015  06F5  0008               	return
  1016  06F6                     __end_of_buffer_serial:	
  1017                           ;main.c: 172: }
  1018                           ;main.c: 173: return idx;
  1019                           
  1020                           
  1021                           	psect	text3
  1022  0385                     __ptext3:	
  1023 ;; *************** function _io_switch *****************
  1024 ;; Defined at:
  1025 ;;		line 150 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  x               1    wreg     PTR unsigned char 
  1028 ;;		 -> main@buffer(6), 
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;  x               1   38[BANK0 ] PTR unsigned char 
  1031 ;;		 -> main@buffer(6), 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1041 ;;      Params:         0       0       0       0       0
  1042 ;;      Locals:         0       1       0       0       0
  1043 ;;      Temps:          0       1       0       0       0
  1044 ;;      Totals:         0       2       0       0       0
  1045 ;;Total ram usage:        2 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    5
  1048 ;; This function calls:
  1049 ;;		_beep
  1050 ;;		_main_lcd
  1051 ;;		_read_tmr0
  1052 ;;		_read_tmr1
  1053 ;;		_write
  1054 ;; This function is called by:
  1055 ;;		_buffer_serial
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           
  1060                           ;psect for function _io_switch
  1061  0385                     _io_switch:	
  1062                           
  1063                           ;incstack = 0
  1064                           ; Regs used in _io_switch: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1065                           ;io_switch@x stored from wreg
  1066  0385  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0386  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0387  00C6               	movwf	io_switch@x
  1069                           
  1070                           ;main.c: 151: switch (x[0]) {
  1071  0388  2BE0               	goto	l1701
  1072  0389                     l1677:	
  1073                           ;main.c: 152: case '7': read_tmr0(); break;
  1074                           
  1075  0389  120A  118A  269B  120A  118A  	fcall	_read_tmr0
  1076  038E  2BFF               	goto	l1703
  1077  038F                     l1679:	
  1078                           ;main.c: 153: case '5': write(x[1]); break;
  1079                           
  1080  038F  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0390  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0391  0A46               	incf	io_switch@x,w
  1083  0392  0084               	movwf	4
  1084  0393  1383               	bcf	3,7	;select IRP bank0
  1085  0394  0800               	movf	0,w
  1086  0395  120A  118A  278F  120A  118A  	fcall	_write
  1087  039A  2BFF               	goto	l1703
  1088  039B                     l1681:	
  1089                           ;main.c: 154: case '1': read_tmr0(); write(x[1]); break;
  1090                           
  1091  039B  120A  118A  269B  120A  118A  	fcall	_read_tmr0
  1092  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  1093  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  1094  03A2  0A46               	incf	io_switch@x,w
  1095  03A3  0084               	movwf	4
  1096  03A4  1383               	bcf	3,7	;select IRP bank0
  1097  03A5  0800               	movf	0,w
  1098  03A6  120A  118A  278F  120A  118A  	fcall	_write
  1099  03AB  2BFF               	goto	l1703
  1100  03AC                     l1685:	
  1101                           ;main.c: 155: case 'r': read_tmr1(); break;
  1102                           
  1103  03AC  120A  118A  26F6  120A  118A  	fcall	_read_tmr1
  1104  03B1  2BFF               	goto	l1703
  1105  03B2                     l1687:	
  1106                           ;main.c: 156: case 'w': write(x[1]); break;
  1107                           
  1108  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  1109  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  1110  03B4  0A46               	incf	io_switch@x,w
  1111  03B5  0084               	movwf	4
  1112  03B6  1383               	bcf	3,7	;select IRP bank0
  1113  03B7  0800               	movf	0,w
  1114  03B8  120A  118A  278F  120A  118A  	fcall	_write
  1115  03BD  2BFF               	goto	l1703
  1116  03BE                     l1689:	
  1117                           ;main.c: 157: case 'x': read_tmr1(); write(x[1]); break;
  1118                           
  1119  03BE  120A  118A  26F6  120A  118A  	fcall	_read_tmr1
  1120  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  1121  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  1122  03C5  0A46               	incf	io_switch@x,w
  1123  03C6  0084               	movwf	4
  1124  03C7  1383               	bcf	3,7	;select IRP bank0
  1125  03C8  0800               	movf	0,w
  1126  03C9  120A  118A  278F  120A  118A  	fcall	_write
  1127  03CE  2BFF               	goto	l1703
  1128  03CF                     l1693:	
  1129                           ;main.c: 158: case 's':
  1130                           
  1131                           
  1132                           ;main.c: 159: case '2': write(0); beep(); beep(); break;
  1133  03CF  3000               	movlw	0
  1134  03D0  120A  118A  278F  120A  118A  	fcall	_write
  1135  03D5  120A  118A  22D2  120A  118A  	fcall	_beep
  1136  03DA  120A  118A  22D2  120A  118A  	fcall	_beep
  1137                           
  1138                           ;main.c: 160: }
  1139  03DF  2BFF               	goto	l1703
  1140  03E0                     l1701:	
  1141  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1142  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1143  03E2  0846               	movf	io_switch@x,w
  1144  03E3  0084               	movwf	4
  1145  03E4  1383               	bcf	3,7	;select IRP bank0
  1146  03E5  0800               	movf	0,w
  1147                           
  1148                           ; Switch size 1, requested type "space"
  1149                           ; Number of cases is 8, Range of values is 49 to 120
  1150                           ; switch strategies available:
  1151                           ; Name         Instructions Cycles
  1152                           ; simple_byte           25    13 (average)
  1153                           ; direct_byte          227    11 (fixed)
  1154                           ; jumptable            263     9 (fixed)
  1155                           ;	Chosen strategy is simple_byte
  1156  03E6  3A31               	xorlw	49	; case 49
  1157  03E7  1903               	skipnz
  1158  03E8  2B9B               	goto	l1681
  1159  03E9  3A03               	xorlw	3	; case 50
  1160  03EA  1903               	skipnz
  1161  03EB  2BCF               	goto	l1693
  1162  03EC  3A07               	xorlw	7	; case 53
  1163  03ED  1903               	skipnz
  1164  03EE  2B8F               	goto	l1679
  1165  03EF  3A02               	xorlw	2	; case 55
  1166  03F0  1903               	skipnz
  1167  03F1  2B89               	goto	l1677
  1168  03F2  3A45               	xorlw	69	; case 114
  1169  03F3  1903               	skipnz
  1170  03F4  2BAC               	goto	l1685
  1171  03F5  3A01               	xorlw	1	; case 115
  1172  03F6  1903               	skipnz
  1173  03F7  2BCF               	goto	l1693
  1174  03F8  3A04               	xorlw	4	; case 119
  1175  03F9  1903               	skipnz
  1176  03FA  2BB2               	goto	l1687
  1177  03FB  3A0F               	xorlw	15	; case 120
  1178  03FC  1903               	skipnz
  1179  03FD  2BBE               	goto	l1689
  1180  03FE  2BFF               	goto	l1703
  1181  03FF                     l1703:	
  1182                           
  1183                           ;main.c: 161: main_lcd(FAN.value, PWM);
  1184  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  1185  0400  1303               	bcf	3,6	;RP1=0, select bank0
  1186  0401  0857               	movf	_FAN+3,w	;volatile
  1187  0402  00C1               	movwf	main_lcd@value+1
  1188  0403  0856               	movf	_FAN+2,w	;volatile
  1189  0404  00C0               	movwf	main_lcd@value
  1190  0405  0815               	movf	21,w
  1191  0406  00C5               	movwf	??_io_switch
  1192  0407  0845               	movf	??_io_switch,w
  1193  0408  00C2               	movwf	main_lcd@duty
  1194  0409  120A  118A  2721   	fcall	_main_lcd
  1195  040C  0008               	return
  1196  040D                     __end_of_io_switch:	
  1197                           
  1198                           	psect	text4
  1199  078F                     __ptext4:	
  1200 ;; *************** function _write *****************
  1201 ;; Defined at:
  1202 ;;		line 144 in file "main.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  duty            1    wreg     unsigned char 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  duty            1    4[COMMON] unsigned char 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       0       0       0       0
  1217 ;;      Locals:         1       0       0       0       0
  1218 ;;      Temps:          0       0       0       0       0
  1219 ;;      Totals:         1       0       0       0       0
  1220 ;;Total ram usage:        1 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    1
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_io_switch
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           
  1231                           ;psect for function _write
  1232  078F                     _write:	
  1233                           
  1234                           ;incstack = 0
  1235                           ; Regs used in _write: [wreg]
  1236                           ;write@duty stored from wreg
  1237  078F  00F4               	movwf	write@duty
  1238                           
  1239                           ;main.c: 145: PWM = duty;
  1240  0790  0874               	movf	write@duty,w
  1241  0791  1283               	bcf	3,5	;RP0=0, select bank0
  1242  0792  1303               	bcf	3,6	;RP1=0, select bank0
  1243  0793  0095               	movwf	21
  1244  0794  0008               	return
  1245  0795                     __end_of_write:	
  1246                           
  1247                           	psect	text5
  1248  06F6                     __ptext5:	
  1249 ;; *************** function _read_tmr1 *****************
  1250 ;; Defined at:
  1251 ;;		line 127 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1265 ;;      Params:         0       0       0       0       0
  1266 ;;      Locals:         0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0
  1268 ;;      Totals:         0       0       0       0       0
  1269 ;;Total ram usage:        0 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    4
  1272 ;; This function calls:
  1273 ;;		_printf
  1274 ;;		_rps_timer1
  1275 ;; This function is called by:
  1276 ;;		_io_switch
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           
  1281                           ;psect for function _read_tmr1
  1282  06F6                     _read_tmr1:	
  1283                           
  1284                           ;main.c: 128: PUT = 0;
  1285                           
  1286                           ;incstack = 0
  1287                           ; Regs used in _read_tmr1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1288  06F6  1079               	bcf	_PUT/(0+8),_PUT& (0+7)
  1289                           
  1290                           ;main.c: 129: FAN = rps_timer1(FAN, TMR1);
  1291  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1292  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1293  06F9  0857               	movf	_FAN+3,w	;volatile
  1294  06FA  00AC               	movwf	rps_timer1@x+3
  1295  06FB  0856               	movf	_FAN+2,w	;volatile
  1296  06FC  00AB               	movwf	rps_timer1@x+2
  1297  06FD  0855               	movf	_FAN+1,w	;volatile
  1298  06FE  00AA               	movwf	rps_timer1@x+1
  1299  06FF  0854               	movf	_FAN,w	;volatile
  1300  0700  00A9               	movwf	rps_timer1@x
  1301  0701  080F               	movf	15,w	;volatile
  1302  0702  00AE               	movwf	rps_timer1@dt+1
  1303  0703  080E               	movf	14,w	;volatile
  1304  0704  00AD               	movwf	rps_timer1@dt
  1305  0705  120A  118A  262D  120A  118A  	fcall	_rps_timer1
  1306  070A  1283               	bcf	3,5	;RP0=0, select bank0
  1307  070B  1303               	bcf	3,6	;RP1=0, select bank0
  1308  070C  082C               	movf	?_rps_timer1+3,w
  1309  070D  00D7               	movwf	_FAN+3	;volatile
  1310  070E  082B               	movf	?_rps_timer1+2,w
  1311  070F  00D6               	movwf	_FAN+2	;volatile
  1312  0710  082A               	movf	?_rps_timer1+1,w
  1313  0711  00D5               	movwf	_FAN+1	;volatile
  1314  0712  0829               	movf	?_rps_timer1,w
  1315  0713  00D4               	movwf	_FAN	;volatile
  1316                           
  1317                           ;main.c: 130: printf("%u", FAN.value);
  1318  0714  0857               	movf	_FAN+3,w	;volatile
  1319  0715  00B0               	movwf	?_printf+1
  1320  0716  0856               	movf	_FAN+2,w	;volatile
  1321  0717  00AF               	movwf	?_printf
  1322  0718  304A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1323  0719  120A  118A  202F   	fcall	_printf
  1324                           
  1325                           ;main.c: 131: TMR1 = 0;
  1326  071C  1283               	bcf	3,5	;RP0=0, select bank0
  1327  071D  1303               	bcf	3,6	;RP1=0, select bank0
  1328  071E  018E               	clrf	14	;volatile
  1329  071F  018F               	clrf	15	;volatile
  1330  0720  0008               	return
  1331  0721                     __end_of_read_tmr1:	
  1332                           ;main.c: 132: return;
  1333                           
  1334                           
  1335                           	psect	text6
  1336  069B                     __ptext6:	
  1337 ;; *************** function _read_tmr0 *****************
  1338 ;; Defined at:
  1339 ;;		line 135 in file "main.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1353 ;;      Params:         0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0
  1355 ;;      Temps:          0       2       0       0       0
  1356 ;;      Totals:         0       2       0       0       0
  1357 ;;Total ram usage:        2 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    4
  1360 ;; This function calls:
  1361 ;;		_printf
  1362 ;;		_rps_timer1
  1363 ;; This function is called by:
  1364 ;;		_io_switch
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           
  1369                           ;psect for function _read_tmr0
  1370  069B                     _read_tmr0:	
  1371                           
  1372                           ;main.c: 136: PUT = 0;
  1373                           
  1374                           ;incstack = 0
  1375                           ; Regs used in _read_tmr0: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1376  069B  1079               	bcf	_PUT/(0+8),_PUT& (0+7)
  1377                           
  1378                           ;main.c: 137: printf("%u", TMR0);
  1379  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1380  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1381  069E  0801               	movf	1,w	;volatile
  1382  069F  00C0               	movwf	??_read_tmr0
  1383  06A0  01C1               	clrf	??_read_tmr0+1
  1384  06A1  0840               	movf	??_read_tmr0,w
  1385  06A2  00AF               	movwf	?_printf
  1386  06A3  0841               	movf	??_read_tmr0+1,w
  1387  06A4  00B0               	movwf	?_printf+1
  1388  06A5  304A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1389  06A6  120A  118A  202F  120A  118A  	fcall	_printf
  1390                           
  1391                           ;main.c: 138: TMR0 = 0;
  1392  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  1393  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  1394  06AD  0181               	clrf	1	;volatile
  1395                           
  1396                           ;main.c: 139: FAN = rps_timer1(FAN, TMR1);
  1397  06AE  0857               	movf	_FAN+3,w	;volatile
  1398  06AF  00AC               	movwf	rps_timer1@x+3
  1399  06B0  0856               	movf	_FAN+2,w	;volatile
  1400  06B1  00AB               	movwf	rps_timer1@x+2
  1401  06B2  0855               	movf	_FAN+1,w	;volatile
  1402  06B3  00AA               	movwf	rps_timer1@x+1
  1403  06B4  0854               	movf	_FAN,w	;volatile
  1404  06B5  00A9               	movwf	rps_timer1@x
  1405  06B6  080F               	movf	15,w	;volatile
  1406  06B7  00AE               	movwf	rps_timer1@dt+1
  1407  06B8  080E               	movf	14,w	;volatile
  1408  06B9  00AD               	movwf	rps_timer1@dt
  1409  06BA  120A  118A  262D   	fcall	_rps_timer1
  1410  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1411  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1412  06BF  082C               	movf	?_rps_timer1+3,w
  1413  06C0  00D7               	movwf	_FAN+3	;volatile
  1414  06C1  082B               	movf	?_rps_timer1+2,w
  1415  06C2  00D6               	movwf	_FAN+2	;volatile
  1416  06C3  082A               	movf	?_rps_timer1+1,w
  1417  06C4  00D5               	movwf	_FAN+1	;volatile
  1418  06C5  0829               	movf	?_rps_timer1,w
  1419  06C6  00D4               	movwf	_FAN	;volatile
  1420                           
  1421                           ;main.c: 140: TMR1 = 0;
  1422  06C7  018E               	clrf	14	;volatile
  1423  06C8  018F               	clrf	15	;volatile
  1424  06C9  0008               	return
  1425  06CA                     __end_of_read_tmr0:	
  1426                           ;main.c: 141: return;
  1427                           
  1428                           
  1429                           	psect	text7
  1430  062D                     __ptext7:	
  1431 ;; *************** function _rps_timer1 *****************
  1432 ;; Defined at:
  1433 ;;		line 115 in file "main.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  x               4    9[BANK0 ] volatile struct .
  1436 ;;  dt              2   13[BANK0 ] unsigned int 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  4    9[BANK0 ] struct .
  1441 ;; Registers used:
  1442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1448 ;;      Params:         0       6       0       0       0
  1449 ;;      Locals:         0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0
  1451 ;;      Totals:         0       6       0       0       0
  1452 ;;Total ram usage:        6 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    2
  1455 ;; This function calls:
  1456 ;;		___lwdiv
  1457 ;;		___wmul
  1458 ;; This function is called by:
  1459 ;;		_read_tmr1
  1460 ;;		_read_tmr0
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           
  1465                           ;psect for function _rps_timer1
  1466  062D                     _rps_timer1:	
  1467                           
  1468                           ;main.c: 116: if (x.count > 0) {
  1469                           
  1470                           ;incstack = 0
  1471                           ; Regs used in _rps_timer1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1472  062D  1283               	bcf	3,5	;RP0=0, select bank0
  1473  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1474  062F  0829               	movf	rps_timer1@x,w	;volatile
  1475  0630  042A               	iorwf	rps_timer1@x+1,w	;volatile
  1476  0631  1903               	btfsc	3,2
  1477  0632  2E60               	goto	l1621
  1478                           
  1479                           ;main.c: 117: x.value = T1FOSC * x.count / dt;
  1480  0633  082E               	movf	rps_timer1@dt+1,w
  1481  0634  00A3               	movwf	___lwdiv@divisor+1
  1482  0635  082D               	movf	rps_timer1@dt,w
  1483  0636  00A2               	movwf	___lwdiv@divisor
  1484  0637  082A               	movf	rps_timer1@x+1,w	;volatile
  1485  0638  00F5               	movwf	___wmul@multiplier+1
  1486  0639  0829               	movf	rps_timer1@x,w	;volatile
  1487  063A  00F4               	movwf	___wmul@multiplier
  1488  063B  3013               	movlw	low (_T1FOSC-__stringbase)
  1489  063C  0084               	movwf	4
  1490  063D  120A  118A  254C  120A  118A  	fcall	stringdir
  1491  0642  00F6               	movwf	___wmul@multiplicand
  1492  0643  120A  118A  254C  120A  118A  	fcall	stringdir
  1493  0648  00F7               	movwf	___wmul@multiplicand+1
  1494  0649  120A  118A  2748  120A  118A  	fcall	___wmul
  1495  064E  0875               	movf	?___wmul+1,w
  1496  064F  1283               	bcf	3,5	;RP0=0, select bank0
  1497  0650  1303               	bcf	3,6	;RP1=0, select bank0
  1498  0651  00A5               	movwf	___lwdiv@dividend+1
  1499  0652  0874               	movf	?___wmul,w
  1500  0653  00A4               	movwf	___lwdiv@dividend
  1501  0654  120A  118A  25EF   	fcall	___lwdiv
  1502  0657  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0658  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0659  0823               	movf	?___lwdiv+1,w
  1505  065A  00AC               	movwf	rps_timer1@x+3	;volatile
  1506  065B  0822               	movf	?___lwdiv,w
  1507  065C  00AB               	movwf	rps_timer1@x+2	;volatile
  1508                           
  1509                           ;main.c: 118: x.count = 0;
  1510  065D  01A9               	clrf	rps_timer1@x	;volatile
  1511  065E  01AA               	clrf	rps_timer1@x+1	;volatile
  1512                           
  1513                           ;main.c: 119: }
  1514  065F  0008               	return
  1515  0660                     l1621:	
  1516                           
  1517                           ;main.c: 120: else {
  1518                           ;main.c: 121: x.count = -1;
  1519  0660  30FF               	movlw	255
  1520  0661  00A9               	movwf	rps_timer1@x	;volatile
  1521  0662  30FF               	movlw	255
  1522  0663  00AA               	movwf	rps_timer1@x+1	;volatile
  1523                           
  1524                           ;main.c: 122: x.value = 0;
  1525  0664  01AB               	clrf	rps_timer1@x+2	;volatile
  1526  0665  01AC               	clrf	rps_timer1@x+3	;volatile
  1527  0666  0008               	return
  1528  0667                     __end_of_rps_timer1:	
  1529                           ;main.c: 123: }
  1530                           ;main.c: 124: return x;
  1531                           
  1532                           
  1533                           	psect	text8
  1534  0721                     __ptext8:	
  1535 ;; *************** function _main_lcd *****************
  1536 ;; Defined at:
  1537 ;;		line 92 in file "main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  value           2   32[BANK0 ] unsigned int 
  1540 ;;  duty            1   34[BANK0 ] unsigned char 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1552 ;;      Params:         0       3       0       0       0
  1553 ;;      Locals:         0       0       0       0       0
  1554 ;;      Temps:          0       2       0       0       0
  1555 ;;      Totals:         0       5       0       0       0
  1556 ;;Total ram usage:        5 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    4
  1559 ;; This function calls:
  1560 ;;		_printf
  1561 ;;		_prog_lcd
  1562 ;; This function is called by:
  1563 ;;		_io_switch
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           
  1568                           ;psect for function _main_lcd
  1569  0721                     _main_lcd:	
  1570                           
  1571                           ;main.c: 93: PUT = 1;
  1572                           
  1573                           ;incstack = 0
  1574                           ; Regs used in _main_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1575  0721  1479               	bsf	_PUT/(0+8),_PUT& (0+7)
  1576                           
  1577                           ;main.c: 94: prog_lcd(0xC0);
  1578  0722  30C0               	movlw	192
  1579  0723  120A  118A  2481  120A  118A  	fcall	_prog_lcd
  1580                           
  1581                           ;main.c: 95: printf("rps: %3u", value);
  1582  0728  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0729  1303               	bcf	3,6	;RP1=0, select bank0
  1584  072A  0841               	movf	main_lcd@value+1,w
  1585  072B  00B0               	movwf	?_printf+1
  1586  072C  0840               	movf	main_lcd@value,w
  1587  072D  00AF               	movwf	?_printf
  1588  072E  3041               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1589  072F  120A  118A  202F  120A  118A  	fcall	_printf
  1590                           
  1591                           ;main.c: 96: prog_lcd(0xC8);
  1592  0734  30C8               	movlw	200
  1593  0735  120A  118A  2481  120A  118A  	fcall	_prog_lcd
  1594                           
  1595                           ;main.c: 97: printf("pwm: %3d%%", duty);
  1596  073A  1283               	bcf	3,5	;RP0=0, select bank0
  1597  073B  1303               	bcf	3,6	;RP1=0, select bank0
  1598  073C  0842               	movf	main_lcd@duty,w
  1599  073D  00C3               	movwf	??_main_lcd
  1600  073E  01C4               	clrf	??_main_lcd+1
  1601  073F  0843               	movf	??_main_lcd,w
  1602  0740  00AF               	movwf	?_printf
  1603  0741  0844               	movf	??_main_lcd+1,w
  1604  0742  00B0               	movwf	?_printf+1
  1605  0743  3036               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1606  0744  120A  118A  202F   	fcall	_printf
  1607  0747  0008               	return
  1608  0748                     __end_of_main_lcd:	
  1609                           
  1610                           	psect	text9
  1611  0481                     __ptext9:	
  1612 ;; *************** function _prog_lcd *****************
  1613 ;; Defined at:
  1614 ;;		line 67 in file "main.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;  msg             1    wreg     unsigned char 
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;  msg             1   13[BANK0 ] unsigned char 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1628 ;;      Params:         0       0       0       0       0
  1629 ;;      Locals:         0       1       0       0       0
  1630 ;;      Temps:          4       0       0       0       0
  1631 ;;      Totals:         4       1       0       0       0
  1632 ;;Total ram usage:        5 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    2
  1635 ;; This function calls:
  1636 ;;		___lldiv
  1637 ;; This function is called by:
  1638 ;;		_init_lcd
  1639 ;;		_main_lcd
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           
  1644                           ;psect for function _prog_lcd
  1645  0481                     _prog_lcd:	
  1646                           
  1647                           ;incstack = 0
  1648                           ; Regs used in _prog_lcd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1649                           ;prog_lcd@msg stored from wreg
  1650  0481  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0482  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0483  00AD               	movwf	prog_lcd@msg
  1653                           
  1654                           ;main.c: 68: LCD.RS = 0;
  1655  0484  1009               	bcf	9,0
  1656                           
  1657                           ;main.c: 69: LCD.CH = msg;
  1658  0485  082D               	movf	prog_lcd@msg,w
  1659  0486  0088               	movwf	8
  1660                           
  1661                           ;main.c: 70: LCD.EN = 1; _delay(IFOSC/1000000);
  1662  0487  1509               	bsf	9,2
  1663  0488  3000               	movlw	0
  1664  0489  00A3               	movwf	___lldiv@divisor+3
  1665  048A  300F               	movlw	15
  1666  048B  00A2               	movwf	___lldiv@divisor+2
  1667  048C  3042               	movlw	66
  1668  048D  00A1               	movwf	___lldiv@divisor+1
  1669  048E  3040               	movlw	64
  1670  048F  00A0               	movwf	___lldiv@divisor
  1671  0490  300F               	movlw	low (_IFOSC-__stringbase)
  1672  0491  0084               	movwf	4
  1673  0492  120A  118A  254C  120A  118A  	fcall	stringdir
  1674  0497  00A4               	movwf	___lldiv@dividend
  1675  0498  120A  118A  254C  120A  118A  	fcall	stringdir
  1676  049D  00A5               	movwf	___lldiv@dividend+1
  1677  049E  120A  118A  254C  120A  118A  	fcall	stringdir
  1678  04A3  00A6               	movwf	___lldiv@dividend+2
  1679  04A4  120A  118A  254C  120A  118A  	fcall	stringdir
  1680  04A9  00A7               	movwf	___lldiv@dividend+3
  1681  04AA  120A  118A  24EC  120A  118A  	fcall	___lldiv
  1682  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1683  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1684  04B1  0820               	movf	?___lldiv,w
  1685  04B2  00F5               	movwf	??_prog_lcd
  1686  04B3  0821               	movf	?___lldiv+1,w
  1687  04B4  00F6               	movwf	??_prog_lcd+1
  1688  04B5  0822               	movf	?___lldiv+2,w
  1689  04B6  00F7               	movwf	??_prog_lcd+2
  1690  04B7  0823               	movf	?___lldiv+3,w
  1691  04B8  00F8               	movwf	??_prog_lcd+3
  1692                           
  1693                           ;main.c: 71: LCD.EN = 0; _delay(IFOSC/20000);
  1694  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1695  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1696  04BB  1109               	bcf	9,2
  1697  04BC  3000               	movlw	0
  1698  04BD  00A3               	movwf	___lldiv@divisor+3
  1699  04BE  3000               	movlw	0
  1700  04BF  00A2               	movwf	___lldiv@divisor+2
  1701  04C0  304E               	movlw	78
  1702  04C1  00A1               	movwf	___lldiv@divisor+1
  1703  04C2  3020               	movlw	32
  1704  04C3  00A0               	movwf	___lldiv@divisor
  1705  04C4  300F               	movlw	low (_IFOSC-__stringbase)
  1706  04C5  0084               	movwf	4
  1707  04C6  120A  118A  254C  120A  118A  	fcall	stringdir
  1708  04CB  00A4               	movwf	___lldiv@dividend
  1709  04CC  120A  118A  254C  120A  118A  	fcall	stringdir
  1710  04D1  00A5               	movwf	___lldiv@dividend+1
  1711  04D2  120A  118A  254C  120A  118A  	fcall	stringdir
  1712  04D7  00A6               	movwf	___lldiv@dividend+2
  1713  04D8  120A  118A  254C  120A  118A  	fcall	stringdir
  1714  04DD  00A7               	movwf	___lldiv@dividend+3
  1715  04DE  120A  118A  24EC   	fcall	___lldiv
  1716  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1717  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1718  04E3  0820               	movf	?___lldiv,w
  1719  04E4  00F5               	movwf	??_prog_lcd
  1720  04E5  0821               	movf	?___lldiv+1,w
  1721  04E6  00F6               	movwf	??_prog_lcd+1
  1722  04E7  0822               	movf	?___lldiv+2,w
  1723  04E8  00F7               	movwf	??_prog_lcd+2
  1724  04E9  0823               	movf	?___lldiv+3,w
  1725  04EA  00F8               	movwf	??_prog_lcd+3
  1726  04EB  0008               	return
  1727  04EC                     __end_of_prog_lcd:	
  1728                           ;main.c: 72: return;
  1729                           
  1730                           
  1731                           	psect	text10
  1732  002F                     __ptext10:	
  1733 ;; *************** function _printf *****************
  1734 ;; Defined at:
  1735 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  f               1    wreg     PTR const unsigned char 
  1738 ;;		 -> STR_6(3), STR_5(3), STR_4(11), STR_3(9), 
  1739 ;;		 -> STR_2(16), STR_1(17), 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  f               1   28[BANK0 ] PTR const unsigned char 
  1742 ;;		 -> STR_6(3), STR_5(3), STR_4(11), STR_3(9), 
  1743 ;;		 -> STR_2(16), STR_1(17), 
  1744 ;;  tmpval          4    0        struct .
  1745 ;;  width           2   29[BANK0 ] int 
  1746 ;;  val             2   26[BANK0 ] unsigned int 
  1747 ;;  len             2   23[BANK0 ] unsigned int 
  1748 ;;  c               1   31[BANK0 ] char 
  1749 ;;  flag            1   25[BANK0 ] unsigned char 
  1750 ;;  ap              1   22[BANK0 ] PTR void [1]
  1751 ;;		 -> ?_printf(2), 
  1752 ;;  prec            1   21[BANK0 ] char 
  1753 ;;  cp              1   20[BANK0 ] PTR const unsigned char 
  1754 ;;		 -> printf@c(1), 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  2   15[BANK0 ] int 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1764 ;;      Params:         0       2       0       0       0
  1765 ;;      Locals:         0      12       0       0       0
  1766 ;;      Temps:          0       3       0       0       0
  1767 ;;      Totals:         0      17       0       0       0
  1768 ;;Total ram usage:       17 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    3
  1771 ;; This function calls:
  1772 ;;		___lwdiv
  1773 ;;		___lwmod
  1774 ;;		___wmul
  1775 ;;		_isdigit
  1776 ;;		_putch
  1777 ;; This function is called by:
  1778 ;;		_init_lcd
  1779 ;;		_main_lcd
  1780 ;;		_read_tmr1
  1781 ;;		_read_tmr0
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           
  1786                           ;psect for function _printf
  1787  002F                     _printf:	
  1788                           
  1789                           ;incstack = 0
  1790                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1791                           ;printf@f stored from wreg
  1792  002F  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0030  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0031  00BC               	movwf	printf@f
  1795                           
  1796                           ;doprnt.c: 466: va_list ap;
  1797                           ;doprnt.c: 499: signed char c;
  1798                           ;doprnt.c: 501: int width;
  1799                           ;doprnt.c: 506: signed char prec;
  1800                           ;doprnt.c: 508: unsigned char flag;
  1801                           ;doprnt.c: 523: union {
  1802                           ;doprnt.c: 524: unsigned long vd;
  1803                           ;doprnt.c: 525: double integ;
  1804                           ;doprnt.c: 526: } tmpval;
  1805                           ;doprnt.c: 528: unsigned int val;
  1806                           ;doprnt.c: 529: unsigned len;
  1807                           ;doprnt.c: 530: const char * cp;
  1808                           ;doprnt.c: 533: *ap = __va_start();
  1809  0032  302F               	movlw	(low (?_printf| 0))& (0+255)
  1810  0033  00B1               	movwf	??_printf
  1811  0034  0831               	movf	??_printf,w
  1812  0035  00B6               	movwf	printf@ap
  1813  0036                     l1613:	
  1814                           ;doprnt.c: 536: while(c = *f++) {
  1815                           
  1816  0036  3001               	movlw	1
  1817  0037  1283               	bcf	3,5	;RP0=0, select bank0
  1818  0038  1303               	bcf	3,6	;RP1=0, select bank0
  1819  0039  07BC               	addwf	printf@f,f
  1820  003A  30FF               	movlw	-1
  1821  003B  073C               	addwf	printf@f,w
  1822  003C  0084               	movwf	4
  1823  003D  120A  118A  254C  120A  118A  	fcall	stringdir
  1824  0042  00B1               	movwf	??_printf
  1825  0043  0831               	movf	??_printf,w
  1826  0044  00BF               	movwf	printf@c
  1827  0045  083F               	movf	printf@c,w
  1828  0046  1903               	btfsc	3,2
  1829  0047  0008               	return
  1830                           
  1831                           ;doprnt.c: 538: if(c != '%')
  1832  0048  3025               	movlw	37
  1833  0049  063F               	xorwf	printf@c,w
  1834  004A  1903               	btfsc	3,2
  1835  004B  2853               	goto	l1525
  1836                           
  1837                           ;doprnt.c: 540: {
  1838                           ;doprnt.c: 541: (putch(c) );
  1839  004C  083F               	movf	printf@c,w
  1840  004D  120A  118A  240D  120A  118A  	fcall	_putch
  1841                           
  1842                           ;doprnt.c: 542: continue;
  1843  0052  2836               	goto	l1613
  1844  0053                     l1525:	
  1845                           
  1846                           ;doprnt.c: 543: }
  1847                           ;doprnt.c: 546: width = 0;
  1848  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0055  01BD               	clrf	printf@width
  1851  0056  01BE               	clrf	printf@width+1
  1852                           
  1853                           ;doprnt.c: 548: flag = 0;
  1854  0057  01B9               	clrf	printf@flag
  1855                           
  1856                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1857  0058  083C               	movf	printf@f,w
  1858  0059  0084               	movwf	4
  1859  005A  120A  118A  254C  120A  118A  	fcall	stringdir
  1860  005F  120A  118A  2781  120A  118A  	fcall	_isdigit
  1861  0064  1C03               	btfss	3,0
  1862  0065  28F3               	goto	l1559
  1863                           
  1864                           ;doprnt.c: 598: width = 0;
  1865  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0068  01BD               	clrf	printf@width
  1868  0069  01BE               	clrf	printf@width+1
  1869  006A                     l1531:	
  1870                           ;doprnt.c: 599: do {
  1871                           
  1872                           
  1873                           ;doprnt.c: 600: width *= 10;
  1874  006A  300A               	movlw	10
  1875  006B  00F4               	movwf	___wmul@multiplier
  1876  006C  3000               	movlw	0
  1877  006D  00F5               	movwf	___wmul@multiplier+1
  1878  006E  1283               	bcf	3,5	;RP0=0, select bank0
  1879  006F  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0070  083E               	movf	printf@width+1,w
  1881  0071  00F7               	movwf	___wmul@multiplicand+1
  1882  0072  083D               	movf	printf@width,w
  1883  0073  00F6               	movwf	___wmul@multiplicand
  1884  0074  120A  118A  2748  120A  118A  	fcall	___wmul
  1885  0079  0875               	movf	?___wmul+1,w
  1886  007A  1283               	bcf	3,5	;RP0=0, select bank0
  1887  007B  1303               	bcf	3,6	;RP1=0, select bank0
  1888  007C  00BE               	movwf	printf@width+1
  1889  007D  0874               	movf	?___wmul,w
  1890  007E  00BD               	movwf	printf@width
  1891                           
  1892                           ;doprnt.c: 601: width += *f++ - '0';
  1893  007F  083C               	movf	printf@f,w
  1894  0080  0084               	movwf	4
  1895  0081  120A  118A  254C  120A  118A  	fcall	stringdir
  1896  0086  3ED0               	addlw	208
  1897  0087  00B1               	movwf	??_printf
  1898  0088  30FF               	movlw	255
  1899  0089  1803               	skipnc
  1900  008A  3000               	movlw	0
  1901  008B  00B2               	movwf	??_printf+1
  1902  008C  0831               	movf	??_printf,w
  1903  008D  07BD               	addwf	printf@width,f
  1904  008E  1803               	skipnc
  1905  008F  0ABE               	incf	printf@width+1,f
  1906  0090  0832               	movf	??_printf+1,w
  1907  0091  07BE               	addwf	printf@width+1,f
  1908  0092  3001               	movlw	1
  1909  0093  00B1               	movwf	??_printf
  1910  0094  0831               	movf	??_printf,w
  1911  0095  07BC               	addwf	printf@f,f
  1912                           
  1913                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1914  0096  083C               	movf	printf@f,w
  1915  0097  0084               	movwf	4
  1916  0098  120A  118A  254C  120A  118A  	fcall	stringdir
  1917  009D  120A  118A  2781  120A  118A  	fcall	_isdigit
  1918  00A2  1C03               	btfss	3,0
  1919  00A3  28F3               	goto	l1559
  1920  00A4  286A               	goto	l1531
  1921  00A5                     l1539:	
  1922                           ;doprnt.c: 750: dostring:
  1923                           
  1924                           ;doprnt.c: 698: case 'i':
  1925                           ;doprnt.c: 699: break;
  1926                           
  1927                           ;doprnt.c: 697: case 'd':
  1928                           
  1929                           ;doprnt.c: 638: goto alldone;
  1930                           
  1931                           ;doprnt.c: 637: case 0:
  1932                           
  1933                           ;doprnt.c: 608: }
  1934                           ;doprnt.c: 635: switch(c = *f++) {
  1935                           
  1936                           
  1937                           ;doprnt.c: 757: if(width > len)
  1938  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1939  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1940  00A7  083E               	movf	printf@width+1,w
  1941  00A8  0238               	subwf	printf@len+1,w
  1942  00A9  1D03               	skipz
  1943  00AA  28AD               	goto	u1285
  1944  00AB  083D               	movf	printf@width,w
  1945  00AC  0237               	subwf	printf@len,w
  1946  00AD                     u1285:	
  1947  00AD  1803               	skipnc
  1948  00AE  28B6               	goto	l1543
  1949                           
  1950                           ;doprnt.c: 758: width -= len;
  1951  00AF  0837               	movf	printf@len,w
  1952  00B0  02BD               	subwf	printf@width,f
  1953  00B1  0838               	movf	printf@len+1,w
  1954  00B2  1C03               	skipc
  1955  00B3  03BE               	decf	printf@width+1,f
  1956  00B4  02BE               	subwf	printf@width+1,f
  1957  00B5  28B8               	goto	l1547
  1958  00B6                     l1543:	
  1959                           
  1960                           ;doprnt.c: 759: else
  1961                           ;doprnt.c: 760: width = 0;
  1962  00B6  01BD               	clrf	printf@width
  1963  00B7  01BE               	clrf	printf@width+1
  1964  00B8                     l1547:	
  1965                           ;doprnt.c: 764: while(width--)
  1966                           
  1967  00B8  30FF               	movlw	255
  1968  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1969  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1970  00BB  07BD               	addwf	printf@width,f
  1971  00BC  1803               	skipnc
  1972  00BD  0ABE               	incf	printf@width+1,f
  1973  00BE  30FF               	movlw	255
  1974  00BF  07BE               	addwf	printf@width+1,f
  1975  00C0  0A3D               	incf	printf@width,w
  1976  00C1  1903               	btfsc	3,2
  1977  00C2  0A3E               	incf	printf@width+1,w
  1978  00C3  1903               	btfsc	3,2
  1979  00C4  28DB               	goto	l1553
  1980                           
  1981                           ;doprnt.c: 765: (putch(' ') );
  1982  00C5  3020               	movlw	32
  1983  00C6  120A  118A  240D  120A  118A  	fcall	_putch
  1984  00CB  28B8               	goto	l1547
  1985  00CC                     l1549:	
  1986                           ;doprnt.c: 767: while(len--)
  1987                           
  1988                           
  1989                           ;doprnt.c: 768: (putch(*cp++) );
  1990  00CC  0834               	movf	printf@cp,w
  1991  00CD  0084               	movwf	4
  1992  00CE  1383               	bcf	3,7	;select IRP bank0
  1993  00CF  0800               	movf	0,w
  1994  00D0  120A  118A  240D  120A  118A  	fcall	_putch
  1995  00D5  3001               	movlw	1
  1996  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1997  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1998  00D8  00B1               	movwf	??_printf
  1999  00D9  0831               	movf	??_printf,w
  2000  00DA  07B4               	addwf	printf@cp,f
  2001  00DB                     l1553:	
  2002  00DB  3001               	movlw	1
  2003  00DC  02B7               	subwf	printf@len,f
  2004  00DD  3000               	movlw	0
  2005  00DE  1C03               	skipc
  2006  00DF  03B8               	decf	printf@len+1,f
  2007  00E0  02B8               	subwf	printf@len+1,f
  2008  00E1  0A37               	incf	printf@len,w
  2009  00E2  1D03               	skipz
  2010  00E3  28CC               	goto	l1549
  2011  00E4  0A38               	incf	printf@len+1,w
  2012  00E5  1903               	btfsc	3,2
  2013  00E6  2836               	goto	l1613
  2014  00E7  28CC               	goto	l1549
  2015  00E8                     l1555:	
  2016                           ;doprnt.c: 802: default:
  2017                           
  2018                           ;doprnt.c: 774: continue;
  2019                           
  2020                           
  2021                           ;doprnt.c: 805: cp = (char *)&c;
  2022  00E8  303F               	movlw	(low (printf@c| 0))& (0+255)
  2023  00E9  00B1               	movwf	??_printf
  2024  00EA  0831               	movf	??_printf,w
  2025  00EB  00B4               	movwf	printf@cp
  2026                           
  2027                           ;doprnt.c: 806: len = 1;
  2028  00EC  3001               	movlw	1
  2029  00ED  00B7               	movwf	printf@len
  2030  00EE  3000               	movlw	0
  2031  00EF  00B8               	movwf	printf@len+1
  2032                           
  2033                           ;doprnt.c: 807: goto dostring;
  2034  00F0  28A5               	goto	l1539
  2035  00F1                     l172:	
  2036                           ;doprnt.c: 817: case 'u':
  2037                           
  2038                           
  2039                           ;doprnt.c: 818: flag |= 0x40;
  2040  00F1  1739               	bsf	printf@flag,6
  2041                           
  2042                           ;doprnt.c: 822: }
  2043                           
  2044                           ;doprnt.c: 819: break;
  2045  00F2  290D               	goto	l161
  2046  00F3                     l1559:	
  2047  00F3  3001               	movlw	1
  2048  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  2049  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  2050  00F6  07BC               	addwf	printf@f,f
  2051  00F7  30FF               	movlw	-1
  2052  00F8  073C               	addwf	printf@f,w
  2053  00F9  0084               	movwf	4
  2054  00FA  120A  118A  254C  120A  118A  	fcall	stringdir
  2055  00FF  00BF               	movwf	printf@c
  2056                           
  2057                           ; Switch size 1, requested type "space"
  2058                           ; Number of cases is 4, Range of values is 0 to 117
  2059                           ; switch strategies available:
  2060                           ; Name         Instructions Cycles
  2061                           ; simple_byte           13     7 (average)
  2062                           ; jumptable            260     6 (fixed)
  2063                           ;	Chosen strategy is simple_byte
  2064  0100  3A00               	xorlw	0	; case 0
  2065  0101  1903               	skipnz
  2066  0102  29F3               	goto	l190
  2067  0103  3A64               	xorlw	100	; case 100
  2068  0104  1903               	skipnz
  2069  0105  290D               	goto	l161
  2070  0106  3A0D               	xorlw	13	; case 105
  2071  0107  1903               	skipnz
  2072  0108  290D               	goto	l161
  2073  0109  3A1C               	xorlw	28	; case 117
  2074  010A  1903               	skipnz
  2075  010B  28F1               	goto	l172
  2076  010C  28E8               	goto	l1555
  2077  010D                     l161:	
  2078                           
  2079                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2080  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2081  010E  1303               	bcf	3,6	;RP1=0, select bank0
  2082  010F  1B39               	btfsc	printf@flag,6
  2083  0110  2929               	goto	l1571
  2084                           
  2085                           ;doprnt.c: 1253: {
  2086                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2087  0111  0836               	movf	printf@ap,w
  2088  0112  0084               	movwf	4
  2089  0113  1383               	bcf	3,7	;select IRP bank0
  2090  0114  0800               	movf	0,w
  2091  0115  00BA               	movwf	printf@val
  2092  0116  0A84               	incf	4,f
  2093  0117  0800               	movf	0,w
  2094  0118  00BB               	movwf	printf@val+1
  2095  0119  3002               	movlw	2
  2096  011A  00B1               	movwf	??_printf
  2097  011B  0831               	movf	??_printf,w
  2098  011C  07B6               	addwf	printf@ap,f
  2099                           
  2100                           ;doprnt.c: 1261: if((int)val < 0) {
  2101  011D  1FBB               	btfss	printf@val+1,7
  2102  011E  2935               	goto	l1575
  2103                           
  2104                           ;doprnt.c: 1262: flag |= 0x03;
  2105  011F  3003               	movlw	3
  2106  0120  00B1               	movwf	??_printf
  2107  0121  0831               	movf	??_printf,w
  2108  0122  04B9               	iorwf	printf@flag,f
  2109                           
  2110                           ;doprnt.c: 1263: val = -val;
  2111  0123  09BA               	comf	printf@val,f
  2112  0124  09BB               	comf	printf@val+1,f
  2113  0125  0ABA               	incf	printf@val,f
  2114  0126  1903               	skipnz
  2115  0127  0ABB               	incf	printf@val+1,f
  2116                           
  2117                           ;doprnt.c: 1264: }
  2118                           ;doprnt.c: 1266: }
  2119  0128  2935               	goto	l1575
  2120  0129                     l1571:	
  2121                           
  2122                           ;doprnt.c: 1268: else
  2123                           ;doprnt.c: 1273: {
  2124                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2125  0129  0836               	movf	printf@ap,w
  2126  012A  0084               	movwf	4
  2127  012B  1383               	bcf	3,7	;select IRP bank0
  2128  012C  0800               	movf	0,w
  2129  012D  00BA               	movwf	printf@val
  2130  012E  0A84               	incf	4,f
  2131  012F  0800               	movf	0,w
  2132  0130  00BB               	movwf	printf@val+1
  2133  0131  3002               	movlw	2
  2134  0132  00B1               	movwf	??_printf
  2135  0133  0831               	movf	??_printf,w
  2136  0134  07B6               	addwf	printf@ap,f
  2137  0135                     l1575:	
  2138                           
  2139                           ;doprnt.c: 1287: }
  2140                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2141  0135  01BF               	clrf	printf@c
  2142  0136  0ABF               	incf	printf@c,f
  2143  0137  3005               	movlw	5
  2144  0138  063F               	xorwf	printf@c,w
  2145  0139  1903               	btfsc	3,2
  2146  013A  295C               	goto	l1587
  2147  013B                     l1581:	
  2148                           
  2149                           ;doprnt.c: 1306: if(val < dpowers[c])
  2150  013B  083F               	movf	printf@c,w
  2151  013C  00B1               	movwf	??_printf
  2152  013D  0731               	addwf	??_printf,w
  2153  013E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2154  013F  0084               	movwf	4
  2155  0140  120A  118A  254C  120A  118A  	fcall	stringdir
  2156  0145  00B2               	movwf	??_printf+1
  2157  0146  120A  118A  254C  120A  118A  	fcall	stringdir
  2158  014B  00B3               	movwf	??_printf+2
  2159  014C  0833               	movf	??_printf+2,w
  2160  014D  023B               	subwf	printf@val+1,w
  2161  014E  1D03               	skipz
  2162  014F  2952               	goto	u1345
  2163  0150  0832               	movf	??_printf+1,w
  2164  0151  023A               	subwf	printf@val,w
  2165  0152                     u1345:	
  2166  0152  1C03               	btfss	3,0
  2167  0153  295C               	goto	l1587
  2168                           
  2169                           ;doprnt.c: 1307: break;
  2170  0154  3001               	movlw	1
  2171  0155  00B1               	movwf	??_printf
  2172  0156  0831               	movf	??_printf,w
  2173  0157  07BF               	addwf	printf@c,f
  2174  0158  3005               	movlw	5
  2175  0159  063F               	xorwf	printf@c,w
  2176  015A  1D03               	btfss	3,2
  2177  015B  293B               	goto	l1581
  2178  015C                     l1587:	
  2179                           
  2180                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2181  015C  083D               	movf	printf@width,w
  2182  015D  043E               	iorwf	printf@width+1,w
  2183  015E  1903               	btfsc	3,2
  2184  015F  296A               	goto	l179
  2185  0160  0839               	movf	printf@flag,w
  2186  0161  3903               	andlw	3
  2187  0162  1903               	btfsc	3,2
  2188  0163  296A               	goto	l179
  2189                           
  2190                           ;doprnt.c: 1346: width--;
  2191  0164  30FF               	movlw	255
  2192  0165  07BD               	addwf	printf@width,f
  2193  0166  1803               	skipnc
  2194  0167  0ABE               	incf	printf@width+1,f
  2195  0168  30FF               	movlw	255
  2196  0169  07BE               	addwf	printf@width+1,f
  2197  016A                     l179:	
  2198                           
  2199                           ;doprnt.c: 1381: if(width > c)
  2200  016A  083F               	movf	printf@c,w
  2201  016B  00B1               	movwf	??_printf
  2202  016C  01B2               	clrf	??_printf+1
  2203  016D  1BB1               	btfsc	??_printf,7
  2204  016E  03B2               	decf	??_printf+1,f
  2205  016F  0832               	movf	??_printf+1,w
  2206  0170  3A80               	xorlw	128
  2207  0171  00B3               	movwf	??_printf+2
  2208  0172  083E               	movf	printf@width+1,w
  2209  0173  3A80               	xorlw	128
  2210  0174  0233               	subwf	??_printf+2,w
  2211  0175  1D03               	skipz
  2212  0176  2979               	goto	u1385
  2213  0177  083D               	movf	printf@width,w
  2214  0178  0231               	subwf	??_printf,w
  2215  0179                     u1385:	
  2216  0179  1803               	skipnc
  2217  017A  2989               	goto	l1595
  2218                           
  2219                           ;doprnt.c: 1382: width -= c;
  2220  017B  1283               	bcf	3,5	;RP0=0, select bank0
  2221  017C  1303               	bcf	3,6	;RP1=0, select bank0
  2222  017D  083F               	movf	printf@c,w
  2223  017E  00B1               	movwf	??_printf
  2224  017F  01B2               	clrf	??_printf+1
  2225  0180  1BB1               	btfsc	??_printf,7
  2226  0181  03B2               	decf	??_printf+1,f
  2227  0182  0831               	movf	??_printf,w
  2228  0183  02BD               	subwf	printf@width,f
  2229  0184  0832               	movf	??_printf+1,w
  2230  0185  1C03               	skipc
  2231  0186  03BE               	decf	printf@width+1,f
  2232  0187  02BE               	subwf	printf@width+1,f
  2233  0188  298D               	goto	l1597
  2234  0189                     l1595:	
  2235                           
  2236                           ;doprnt.c: 1383: else
  2237                           ;doprnt.c: 1384: width = 0;
  2238  0189  1283               	bcf	3,5	;RP0=0, select bank0
  2239  018A  1303               	bcf	3,6	;RP1=0, select bank0
  2240  018B  01BD               	clrf	printf@width
  2241  018C  01BE               	clrf	printf@width+1
  2242  018D                     l1597:	
  2243                           
  2244                           ;doprnt.c: 1422: {
  2245                           ;doprnt.c: 1424: if(width
  2246                           ;doprnt.c: 1428: )
  2247  018D  083D               	movf	printf@width,w
  2248  018E  043E               	iorwf	printf@width+1,w
  2249  018F  1903               	btfsc	3,2
  2250  0190  29A3               	goto	l1603
  2251  0191                     l1599:	
  2252                           ;doprnt.c: 1429: do
  2253                           
  2254                           
  2255                           ;doprnt.c: 1430: (putch(' ') );
  2256  0191  3020               	movlw	32
  2257  0192  120A  118A  240D  120A  118A  	fcall	_putch
  2258                           
  2259                           ;doprnt.c: 1431: while(--width);
  2260  0197  30FF               	movlw	255
  2261  0198  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0199  1303               	bcf	3,6	;RP1=0, select bank0
  2263  019A  07BD               	addwf	printf@width,f
  2264  019B  1803               	skipnc
  2265  019C  0ABE               	incf	printf@width+1,f
  2266  019D  30FF               	movlw	255
  2267  019E  07BE               	addwf	printf@width+1,f
  2268  019F  083D               	movf	printf@width,w
  2269  01A0  043E               	iorwf	printf@width+1,w
  2270  01A1  1D03               	btfss	3,2
  2271  01A2  2991               	goto	l1599
  2272  01A3                     l1603:	
  2273                           
  2274                           ;doprnt.c: 1438: if(flag & 0x03)
  2275  01A3  0839               	movf	printf@flag,w
  2276  01A4  3903               	andlw	3
  2277  01A5  1903               	btfsc	3,2
  2278  01A6  29AD               	goto	l1607
  2279                           
  2280                           ;doprnt.c: 1439: (putch('-') );
  2281  01A7  302D               	movlw	45
  2282  01A8  120A  118A  240D  120A  118A  	fcall	_putch
  2283  01AD                     l1607:	
  2284                           
  2285                           ;doprnt.c: 1469: }
  2286                           ;doprnt.c: 1472: prec = c;
  2287  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  2288  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  2289  01AF  083F               	movf	printf@c,w
  2290  01B0  00B1               	movwf	??_printf
  2291  01B1  0831               	movf	??_printf,w
  2292  01B2  00B5               	movwf	printf@prec
  2293  01B3                     l1611:	
  2294                           ;doprnt.c: 1474: while(prec--) {
  2295                           
  2296  01B3  30FF               	movlw	255
  2297  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2298  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  2299  01B6  00B1               	movwf	??_printf
  2300  01B7  0831               	movf	??_printf,w
  2301  01B8  07B5               	addwf	printf@prec,f
  2302  01B9  0A35               	incf	printf@prec,w
  2303  01BA  1903               	btfsc	3,2
  2304  01BB  2836               	goto	l1613
  2305                           
  2306                           ;doprnt.c: 1478: {
  2307                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2308  01BC  300A               	movlw	10
  2309  01BD  00A9               	movwf	___lwmod@divisor
  2310  01BE  3000               	movlw	0
  2311  01BF  00AA               	movwf	___lwmod@divisor+1
  2312  01C0  0835               	movf	printf@prec,w
  2313  01C1  00B1               	movwf	??_printf
  2314  01C2  0731               	addwf	??_printf,w
  2315  01C3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2316  01C4  0084               	movwf	4
  2317  01C5  120A  118A  254C  120A  118A  	fcall	stringdir
  2318  01CA  00A2               	movwf	___lwdiv@divisor
  2319  01CB  120A  118A  254C  120A  118A  	fcall	stringdir
  2320  01D0  00A3               	movwf	___lwdiv@divisor+1
  2321  01D1  083B               	movf	printf@val+1,w
  2322  01D2  00A5               	movwf	___lwdiv@dividend+1
  2323  01D3  083A               	movf	printf@val,w
  2324  01D4  00A4               	movwf	___lwdiv@dividend
  2325  01D5  120A  118A  25EF  120A  118A  	fcall	___lwdiv
  2326  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2327  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2328  01DC  0823               	movf	?___lwdiv+1,w
  2329  01DD  00AC               	movwf	___lwmod@dividend+1
  2330  01DE  0822               	movf	?___lwdiv,w
  2331  01DF  00AB               	movwf	___lwmod@dividend
  2332  01E0  120A  118A  2667  120A  118A  	fcall	___lwmod
  2333  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2334  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2335  01E7  0829               	movf	?___lwmod,w
  2336  01E8  3E30               	addlw	48
  2337  01E9  00B2               	movwf	??_printf+1
  2338  01EA  0832               	movf	??_printf+1,w
  2339  01EB  00BF               	movwf	printf@c
  2340                           
  2341                           ;doprnt.c: 1523: }
  2342                           ;doprnt.c: 1524: (putch(c) );
  2343  01EC  083F               	movf	printf@c,w
  2344  01ED  120A  118A  240D  120A  118A  	fcall	_putch
  2345  01F2  29B3               	goto	l1611
  2346  01F3                     l190:	
  2347                           ;doprnt.c: 1540: return 0;
  2348                           ;	Return value of _printf is never used
  2349                           
  2350                           ;doprnt.c: 1525: }
  2351                           ;doprnt.c: 1533: }
  2352                           ;doprnt.c: 1535: alldone:
  2353                           
  2354  01F3  0008               	return
  2355  01F4                     __end_of_printf:	
  2356                           
  2357                           	psect	text11
  2358  040D                     __ptext11:	
  2359 ;; *************** function _putch *****************
  2360 ;; Defined at:
  2361 ;;		line 48 in file "main.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  msg             1    wreg     unsigned char 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  msg             1   13[BANK0 ] unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2375 ;;      Params:         0       0       0       0       0
  2376 ;;      Locals:         0       1       0       0       0
  2377 ;;      Temps:          4       0       0       0       0
  2378 ;;      Totals:         4       1       0       0       0
  2379 ;;Total ram usage:        5 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    2
  2382 ;; This function calls:
  2383 ;;		___lldiv
  2384 ;; This function is called by:
  2385 ;;		_printf
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           
  2390                           ;psect for function _putch
  2391  040D                     _putch:	
  2392                           
  2393                           ;incstack = 0
  2394                           ; Regs used in _putch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2395                           ;putch@msg stored from wreg
  2396  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2397  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2398  040F  00AD               	movwf	putch@msg
  2399                           
  2400                           ;main.c: 49: if (PUT) {
  2401  0410  1C79               	btfss	_PUT/(0+8),_PUT& (0+7)
  2402  0411  2C7A               	goto	l72
  2403                           
  2404                           ;main.c: 50: LCD.RS = 1;
  2405  0412  1409               	bsf	9,0
  2406                           
  2407                           ;main.c: 51: LCD.CH = msg;
  2408  0413  082D               	movf	putch@msg,w
  2409  0414  0088               	movwf	8
  2410                           
  2411                           ;main.c: 52: LCD.EN = 1; _delay(IFOSC/1000000);
  2412  0415  1509               	bsf	9,2
  2413  0416  3000               	movlw	0
  2414  0417  00A3               	movwf	___lldiv@divisor+3
  2415  0418  300F               	movlw	15
  2416  0419  00A2               	movwf	___lldiv@divisor+2
  2417  041A  3042               	movlw	66
  2418  041B  00A1               	movwf	___lldiv@divisor+1
  2419  041C  3040               	movlw	64
  2420  041D  00A0               	movwf	___lldiv@divisor
  2421  041E  300F               	movlw	low (_IFOSC-__stringbase)
  2422  041F  0084               	movwf	4
  2423  0420  120A  118A  254C  120A  118A  	fcall	stringdir
  2424  0425  00A4               	movwf	___lldiv@dividend
  2425  0426  120A  118A  254C  120A  118A  	fcall	stringdir
  2426  042B  00A5               	movwf	___lldiv@dividend+1
  2427  042C  120A  118A  254C  120A  118A  	fcall	stringdir
  2428  0431  00A6               	movwf	___lldiv@dividend+2
  2429  0432  120A  118A  254C  120A  118A  	fcall	stringdir
  2430  0437  00A7               	movwf	___lldiv@dividend+3
  2431  0438  120A  118A  24EC  120A  118A  	fcall	___lldiv
  2432  043D  1283               	bcf	3,5	;RP0=0, select bank0
  2433  043E  1303               	bcf	3,6	;RP1=0, select bank0
  2434  043F  0820               	movf	?___lldiv,w
  2435  0440  00F5               	movwf	??_putch
  2436  0441  0821               	movf	?___lldiv+1,w
  2437  0442  00F6               	movwf	??_putch+1
  2438  0443  0822               	movf	?___lldiv+2,w
  2439  0444  00F7               	movwf	??_putch+2
  2440  0445  0823               	movf	?___lldiv+3,w
  2441  0446  00F8               	movwf	??_putch+3
  2442                           
  2443                           ;main.c: 53: LCD.EN = 0; _delay(IFOSC/20000);
  2444  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0449  1109               	bcf	9,2
  2447  044A  3000               	movlw	0
  2448  044B  00A3               	movwf	___lldiv@divisor+3
  2449  044C  3000               	movlw	0
  2450  044D  00A2               	movwf	___lldiv@divisor+2
  2451  044E  304E               	movlw	78
  2452  044F  00A1               	movwf	___lldiv@divisor+1
  2453  0450  3020               	movlw	32
  2454  0451  00A0               	movwf	___lldiv@divisor
  2455  0452  300F               	movlw	low (_IFOSC-__stringbase)
  2456  0453  0084               	movwf	4
  2457  0454  120A  118A  254C  120A  118A  	fcall	stringdir
  2458  0459  00A4               	movwf	___lldiv@dividend
  2459  045A  120A  118A  254C  120A  118A  	fcall	stringdir
  2460  045F  00A5               	movwf	___lldiv@dividend+1
  2461  0460  120A  118A  254C  120A  118A  	fcall	stringdir
  2462  0465  00A6               	movwf	___lldiv@dividend+2
  2463  0466  120A  118A  254C  120A  118A  	fcall	stringdir
  2464  046B  00A7               	movwf	___lldiv@dividend+3
  2465  046C  120A  118A  24EC   	fcall	___lldiv
  2466  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0471  0820               	movf	?___lldiv,w
  2469  0472  00F5               	movwf	??_putch
  2470  0473  0821               	movf	?___lldiv+1,w
  2471  0474  00F6               	movwf	??_putch+1
  2472  0475  0822               	movf	?___lldiv+2,w
  2473  0476  00F7               	movwf	??_putch+2
  2474  0477  0823               	movf	?___lldiv+3,w
  2475  0478  00F8               	movwf	??_putch+3
  2476                           
  2477                           ;main.c: 54: }
  2478  0479  0008               	return
  2479  047A                     l72:	
  2480                           ;main.c: 55: else {
  2481                           ;main.c: 56: while(!TXIF) continue;
  2482                           
  2483  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2484  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2485  047C  1E0C               	btfss	12,4	;volatile
  2486  047D  2C7A               	goto	l72
  2487                           
  2488                           ;main.c: 57: TXREG = msg;
  2489  047E  082D               	movf	putch@msg,w
  2490  047F  0099               	movwf	25	;volatile
  2491  0480  0008               	return
  2492  0481                     __end_of_putch:	
  2493                           ;main.c: 58: }
  2494                           ;main.c: 59: return;
  2495                           
  2496                           
  2497                           	psect	text12
  2498  0781                     __ptext12:	
  2499 ;; *************** function _isdigit *****************
  2500 ;; Defined at:
  2501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  c               1    wreg     unsigned char 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  c               1    5[COMMON] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;		None               void
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2515 ;;      Params:         0       0       0       0       0
  2516 ;;      Locals:         2       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0
  2518 ;;      Totals:         2       0       0       0       0
  2519 ;;Total ram usage:        2 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    1
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_printf
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function _isdigit
  2531  0781                     _isdigit:	
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2535                           ;isdigit@c stored from wreg
  2536  0781  00F5               	movwf	isdigit@c
  2537  0782  01F4               	clrf	_isdigit$347
  2538  0783  303A               	movlw	58
  2539  0784  0275               	subwf	isdigit@c,w
  2540  0785  1803               	skipnc
  2541  0786  2F8D               	goto	l1089
  2542  0787  3030               	movlw	48
  2543  0788  0275               	subwf	isdigit@c,w
  2544  0789  1C03               	skipc
  2545  078A  2F8D               	goto	l1089
  2546  078B  01F4               	clrf	_isdigit$347
  2547  078C  0AF4               	incf	_isdigit$347,f
  2548  078D                     l1089:	
  2549  078D  0C74               	rrf	_isdigit$347,w
  2550  078E  0008               	return
  2551  078F                     __end_of_isdigit:	
  2552                           
  2553                           	psect	text13
  2554  0748                     __ptext13:	
  2555 ;; *************** function ___wmul *****************
  2556 ;; Defined at:
  2557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  multiplier      2    4[COMMON] unsigned int 
  2560 ;;  multiplicand    2    6[COMMON] unsigned int 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  product         2    0[BANK0 ] unsigned int 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  2    4[COMMON] unsigned int 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2572 ;;      Params:         4       0       0       0       0
  2573 ;;      Locals:         0       2       0       0       0
  2574 ;;      Temps:          0       0       0       0       0
  2575 ;;      Totals:         4       2       0       0       0
  2576 ;;Total ram usage:        6 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    1
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_rps_timer1
  2583 ;;		_printf
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           
  2588                           ;psect for function ___wmul
  2589  0748                     ___wmul:	
  2590                           
  2591                           ;incstack = 0
  2592                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2593  0748  1283               	bcf	3,5	;RP0=0, select bank0
  2594  0749  1303               	bcf	3,6	;RP1=0, select bank0
  2595  074A  01A0               	clrf	___wmul@product
  2596  074B  01A1               	clrf	___wmul@product+1
  2597  074C                     l1467:	
  2598  074C  1C74               	btfss	___wmul@multiplier,0
  2599  074D  2F56               	goto	l274
  2600  074E  0876               	movf	___wmul@multiplicand,w
  2601  074F  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0750  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0751  07A0               	addwf	___wmul@product,f
  2604  0752  1803               	skipnc
  2605  0753  0AA1               	incf	___wmul@product+1,f
  2606  0754  0877               	movf	___wmul@multiplicand+1,w
  2607  0755  07A1               	addwf	___wmul@product+1,f
  2608  0756                     l274:	
  2609  0756  3001               	movlw	1
  2610  0757                     u1155:	
  2611  0757  1003               	clrc
  2612  0758  0DF6               	rlf	___wmul@multiplicand,f
  2613  0759  0DF7               	rlf	___wmul@multiplicand+1,f
  2614  075A  3EFF               	addlw	-1
  2615  075B  1D03               	skipz
  2616  075C  2F57               	goto	u1155
  2617  075D  3001               	movlw	1
  2618  075E                     u1165:	
  2619  075E  1003               	clrc
  2620  075F  0CF5               	rrf	___wmul@multiplier+1,f
  2621  0760  0CF4               	rrf	___wmul@multiplier,f
  2622  0761  3EFF               	addlw	-1
  2623  0762  1D03               	skipz
  2624  0763  2F5E               	goto	u1165
  2625  0764  0874               	movf	___wmul@multiplier,w
  2626  0765  0475               	iorwf	___wmul@multiplier+1,w
  2627  0766  1D03               	btfss	3,2
  2628  0767  2F4C               	goto	l1467
  2629  0768  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0769  1303               	bcf	3,6	;RP1=0, select bank0
  2631  076A  0821               	movf	___wmul@product+1,w
  2632  076B  00F5               	movwf	?___wmul+1
  2633  076C  0820               	movf	___wmul@product,w
  2634  076D  00F4               	movwf	?___wmul
  2635  076E  0008               	return
  2636  076F                     __end_of___wmul:	
  2637                           
  2638                           	psect	text14
  2639  0667                     __ptext14:	
  2640 ;; *************** function ___lwmod *****************
  2641 ;; Defined at:
  2642 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;  divisor         2    9[BANK0 ] unsigned int 
  2645 ;;  dividend        2   11[BANK0 ] unsigned int 
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;  counter         1   14[BANK0 ] unsigned char 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  2    9[BANK0 ] unsigned int 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2657 ;;      Params:         0       4       0       0       0
  2658 ;;      Locals:         0       1       0       0       0
  2659 ;;      Temps:          0       1       0       0       0
  2660 ;;      Totals:         0       6       0       0       0
  2661 ;;Total ram usage:        6 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    1
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		_printf
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           
  2672                           ;psect for function ___lwmod
  2673  0667                     ___lwmod:	
  2674                           
  2675                           ;incstack = 0
  2676                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2677  0667  1283               	bcf	3,5	;RP0=0, select bank0
  2678  0668  1303               	bcf	3,6	;RP1=0, select bank0
  2679  0669  0829               	movf	___lwmod@divisor,w
  2680  066A  042A               	iorwf	___lwmod@divisor+1,w
  2681  066B  1903               	btfsc	3,2
  2682  066C  2E96               	goto	l1151
  2683  066D  01AE               	clrf	___lwmod@counter
  2684  066E  0AAE               	incf	___lwmod@counter,f
  2685  066F                     l1141:	
  2686  066F  1BAA               	btfsc	___lwmod@divisor+1,7
  2687  0670  2E7D               	goto	l1143
  2688  0671  3001               	movlw	1
  2689  0672                     u765:	
  2690  0672  1003               	clrc
  2691  0673  0DA9               	rlf	___lwmod@divisor,f
  2692  0674  0DAA               	rlf	___lwmod@divisor+1,f
  2693  0675  3EFF               	addlw	-1
  2694  0676  1D03               	skipz
  2695  0677  2E72               	goto	u765
  2696  0678  3001               	movlw	1
  2697  0679  00AD               	movwf	??___lwmod
  2698  067A  082D               	movf	??___lwmod,w
  2699  067B  07AE               	addwf	___lwmod@counter,f
  2700  067C  2E6F               	goto	l1141
  2701  067D                     l1143:	
  2702  067D  082A               	movf	___lwmod@divisor+1,w
  2703  067E  022C               	subwf	___lwmod@dividend+1,w
  2704  067F  1D03               	skipz
  2705  0680  2E83               	goto	u785
  2706  0681  0829               	movf	___lwmod@divisor,w
  2707  0682  022B               	subwf	___lwmod@dividend,w
  2708  0683                     u785:	
  2709  0683  1C03               	skipc
  2710  0684  2E8B               	goto	l1147
  2711  0685  0829               	movf	___lwmod@divisor,w
  2712  0686  02AB               	subwf	___lwmod@dividend,f
  2713  0687  082A               	movf	___lwmod@divisor+1,w
  2714  0688  1C03               	skipc
  2715  0689  03AC               	decf	___lwmod@dividend+1,f
  2716  068A  02AC               	subwf	___lwmod@dividend+1,f
  2717  068B                     l1147:	
  2718  068B  3001               	movlw	1
  2719  068C                     u795:	
  2720  068C  1003               	clrc
  2721  068D  0CAA               	rrf	___lwmod@divisor+1,f
  2722  068E  0CA9               	rrf	___lwmod@divisor,f
  2723  068F  3EFF               	addlw	-1
  2724  0690  1D03               	skipz
  2725  0691  2E8C               	goto	u795
  2726  0692  3001               	movlw	1
  2727  0693  02AE               	subwf	___lwmod@counter,f
  2728  0694  1D03               	btfss	3,2
  2729  0695  2E7D               	goto	l1143
  2730  0696                     l1151:	
  2731  0696  082C               	movf	___lwmod@dividend+1,w
  2732  0697  00AA               	movwf	?___lwmod+1
  2733  0698  082B               	movf	___lwmod@dividend,w
  2734  0699  00A9               	movwf	?___lwmod
  2735  069A  0008               	return
  2736  069B                     __end_of___lwmod:	
  2737                           
  2738                           	psect	text15
  2739  05EF                     __ptext15:	
  2740 ;; *************** function ___lwdiv *****************
  2741 ;; Defined at:
  2742 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  divisor         2    2[BANK0 ] unsigned int 
  2745 ;;  dividend        2    4[BANK0 ] unsigned int 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  quotient        2    7[BANK0 ] unsigned int 
  2748 ;;  counter         1    6[BANK0 ] unsigned char 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  2    2[BANK0 ] unsigned int 
  2751 ;; Registers used:
  2752 ;;		wreg, status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2758 ;;      Params:         0       4       0       0       0
  2759 ;;      Locals:         0       3       0       0       0
  2760 ;;      Temps:          1       0       0       0       0
  2761 ;;      Totals:         1       7       0       0       0
  2762 ;;Total ram usage:        8 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_rps_timer1
  2769 ;;		_printf
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function ___lwdiv
  2775  05EF                     ___lwdiv:	
  2776                           
  2777                           ;incstack = 0
  2778                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2779  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  2780  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  2781  05F1  01A7               	clrf	___lwdiv@quotient
  2782  05F2  01A8               	clrf	___lwdiv@quotient+1
  2783  05F3  0822               	movf	___lwdiv@divisor,w
  2784  05F4  0423               	iorwf	___lwdiv@divisor+1,w
  2785  05F5  1903               	btfsc	3,2
  2786  05F6  2E28               	goto	l1501
  2787  05F7  01A6               	clrf	___lwdiv@counter
  2788  05F8  0AA6               	incf	___lwdiv@counter,f
  2789  05F9                     l1489:	
  2790  05F9  1BA3               	btfsc	___lwdiv@divisor+1,7
  2791  05FA  2E07               	goto	l1491
  2792  05FB  3001               	movlw	1
  2793  05FC                     u1195:	
  2794  05FC  1003               	clrc
  2795  05FD  0DA2               	rlf	___lwdiv@divisor,f
  2796  05FE  0DA3               	rlf	___lwdiv@divisor+1,f
  2797  05FF  3EFF               	addlw	-1
  2798  0600  1D03               	skipz
  2799  0601  2DFC               	goto	u1195
  2800  0602  3001               	movlw	1
  2801  0603  00F8               	movwf	??___lwdiv
  2802  0604  0878               	movf	??___lwdiv,w
  2803  0605  07A6               	addwf	___lwdiv@counter,f
  2804  0606  2DF9               	goto	l1489
  2805  0607                     l1491:	
  2806  0607  3001               	movlw	1
  2807  0608                     u1215:	
  2808  0608  1003               	clrc
  2809  0609  0DA7               	rlf	___lwdiv@quotient,f
  2810  060A  0DA8               	rlf	___lwdiv@quotient+1,f
  2811  060B  3EFF               	addlw	-1
  2812  060C  1D03               	skipz
  2813  060D  2E08               	goto	u1215
  2814  060E  0823               	movf	___lwdiv@divisor+1,w
  2815  060F  0225               	subwf	___lwdiv@dividend+1,w
  2816  0610  1D03               	skipz
  2817  0611  2E14               	goto	u1225
  2818  0612  0822               	movf	___lwdiv@divisor,w
  2819  0613  0224               	subwf	___lwdiv@dividend,w
  2820  0614                     u1225:	
  2821  0614  1C03               	skipc
  2822  0615  2E1D               	goto	l1497
  2823  0616  0822               	movf	___lwdiv@divisor,w
  2824  0617  02A4               	subwf	___lwdiv@dividend,f
  2825  0618  0823               	movf	___lwdiv@divisor+1,w
  2826  0619  1C03               	skipc
  2827  061A  03A5               	decf	___lwdiv@dividend+1,f
  2828  061B  02A5               	subwf	___lwdiv@dividend+1,f
  2829  061C  1427               	bsf	___lwdiv@quotient,0
  2830  061D                     l1497:	
  2831  061D  3001               	movlw	1
  2832  061E                     u1235:	
  2833  061E  1003               	clrc
  2834  061F  0CA3               	rrf	___lwdiv@divisor+1,f
  2835  0620  0CA2               	rrf	___lwdiv@divisor,f
  2836  0621  3EFF               	addlw	-1
  2837  0622  1D03               	skipz
  2838  0623  2E1E               	goto	u1235
  2839  0624  3001               	movlw	1
  2840  0625  02A6               	subwf	___lwdiv@counter,f
  2841  0626  1D03               	btfss	3,2
  2842  0627  2E07               	goto	l1491
  2843  0628                     l1501:	
  2844  0628  0828               	movf	___lwdiv@quotient+1,w
  2845  0629  00A3               	movwf	?___lwdiv+1
  2846  062A  0827               	movf	___lwdiv@quotient,w
  2847  062B  00A2               	movwf	?___lwdiv
  2848  062C  0008               	return
  2849  062D                     __end_of___lwdiv:	
  2850                           
  2851                           	psect	text16
  2852  02D2                     __ptext16:	
  2853 ;; *************** function _beep *****************
  2854 ;; Defined at:
  2855 ;;		line 40 in file "main.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  j               2   13[BANK0 ] int 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       0       0       0       0
  2870 ;;      Locals:         0       2       0       0       0
  2871 ;;      Temps:          4       0       0       0       0
  2872 ;;      Totals:         4       2       0       0       0
  2873 ;;Total ram usage:        6 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    2
  2876 ;; This function calls:
  2877 ;;		___lldiv
  2878 ;; This function is called by:
  2879 ;;		_io_switch
  2880 ;;		_main
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           
  2885                           ;psect for function _beep
  2886  02D2                     _beep:	
  2887                           
  2888                           ;main.c: 41: _delay(IFOSC/10);
  2889                           
  2890                           ;incstack = 0
  2891                           ; Regs used in _beep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2892  02D2  3000               	movlw	0
  2893  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2894  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2895  02D5  00A3               	movwf	___lldiv@divisor+3
  2896  02D6  3000               	movlw	0
  2897  02D7  00A2               	movwf	___lldiv@divisor+2
  2898  02D8  3000               	movlw	0
  2899  02D9  00A1               	movwf	___lldiv@divisor+1
  2900  02DA  300A               	movlw	10
  2901  02DB  00A0               	movwf	___lldiv@divisor
  2902  02DC  300F               	movlw	low (_IFOSC-__stringbase)
  2903  02DD  0084               	movwf	4
  2904  02DE  120A  118A  254C  120A  118A  	fcall	stringdir
  2905  02E3  00A4               	movwf	___lldiv@dividend
  2906  02E4  120A  118A  254C  120A  118A  	fcall	stringdir
  2907  02E9  00A5               	movwf	___lldiv@dividend+1
  2908  02EA  120A  118A  254C  120A  118A  	fcall	stringdir
  2909  02EF  00A6               	movwf	___lldiv@dividend+2
  2910  02F0  120A  118A  254C  120A  118A  	fcall	stringdir
  2911  02F5  00A7               	movwf	___lldiv@dividend+3
  2912  02F6  120A  118A  24EC  120A  118A  	fcall	___lldiv
  2913  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2914  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  2915  02FD  0820               	movf	?___lldiv,w
  2916  02FE  00F5               	movwf	??_beep
  2917  02FF  0821               	movf	?___lldiv+1,w
  2918  0300  00F6               	movwf	??_beep+1
  2919  0301  0822               	movf	?___lldiv+2,w
  2920  0302  00F7               	movwf	??_beep+2
  2921  0303  0823               	movf	?___lldiv+3,w
  2922  0304  00F8               	movwf	??_beep+3
  2923                           
  2924                           ;main.c: 42: for (int j = 0; j < 100; ++j) {
  2925  0305  1283               	bcf	3,5	;RP0=0, select bank0
  2926  0306  1303               	bcf	3,6	;RP1=0, select bank0
  2927  0307  01AD               	clrf	beep@j
  2928  0308  01AE               	clrf	beep@j+1
  2929  0309                     L1:	
  2930  0309  082E               	movf	beep@j+1,w
  2931  030A  3A80               	xorlw	128
  2932  030B  00FF               	movwf	127
  2933  030C  3080               	movlw	128
  2934  030D  027F               	subwf	127,w
  2935  030E  1D03               	skipz
  2936  030F  2B12               	goto	u1455
  2937  0310  3064               	movlw	100
  2938  0311  022D               	subwf	beep@j,w
  2939  0312                     u1455:	
  2940  0312  1803               	btfsc	3,0
  2941  0313  0008               	return
  2942                           
  2943                           ;main.c: 43: BUZ = 1; _delay(IFOSC/1000);
  2944  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0316  1685               	bsf	5,5
  2947  0317  3000               	movlw	0
  2948  0318  00A3               	movwf	___lldiv@divisor+3
  2949  0319  3000               	movlw	0
  2950  031A  00A2               	movwf	___lldiv@divisor+2
  2951  031B  3003               	movlw	3
  2952  031C  00A1               	movwf	___lldiv@divisor+1
  2953  031D  30E8               	movlw	232
  2954  031E  00A0               	movwf	___lldiv@divisor
  2955  031F  300F               	movlw	low (_IFOSC-__stringbase)
  2956  0320  0084               	movwf	4
  2957  0321  120A  118A  254C  120A  118A  	fcall	stringdir
  2958  0326  00A4               	movwf	___lldiv@dividend
  2959  0327  120A  118A  254C  120A  118A  	fcall	stringdir
  2960  032C  00A5               	movwf	___lldiv@dividend+1
  2961  032D  120A  118A  254C  120A  118A  	fcall	stringdir
  2962  0332  00A6               	movwf	___lldiv@dividend+2
  2963  0333  120A  118A  254C  120A  118A  	fcall	stringdir
  2964  0338  00A7               	movwf	___lldiv@dividend+3
  2965  0339  120A  118A  24EC  120A  118A  	fcall	___lldiv
  2966  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2967  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2968  0340  0820               	movf	?___lldiv,w
  2969  0341  00F5               	movwf	??_beep
  2970  0342  0821               	movf	?___lldiv+1,w
  2971  0343  00F6               	movwf	??_beep+1
  2972  0344  0822               	movf	?___lldiv+2,w
  2973  0345  00F7               	movwf	??_beep+2
  2974  0346  0823               	movf	?___lldiv+3,w
  2975  0347  00F8               	movwf	??_beep+3
  2976                           
  2977                           ;main.c: 44: BUZ = 0; _delay(IFOSC/2000);
  2978  0348  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2980  034A  1285               	bcf	5,5
  2981  034B  3000               	movlw	0
  2982  034C  00A3               	movwf	___lldiv@divisor+3
  2983  034D  3000               	movlw	0
  2984  034E  00A2               	movwf	___lldiv@divisor+2
  2985  034F  3007               	movlw	7
  2986  0350  00A1               	movwf	___lldiv@divisor+1
  2987  0351  30D0               	movlw	208
  2988  0352  00A0               	movwf	___lldiv@divisor
  2989  0353  300F               	movlw	low (_IFOSC-__stringbase)
  2990  0354  0084               	movwf	4
  2991  0355  120A  118A  254C  120A  118A  	fcall	stringdir
  2992  035A  00A4               	movwf	___lldiv@dividend
  2993  035B  120A  118A  254C  120A  118A  	fcall	stringdir
  2994  0360  00A5               	movwf	___lldiv@dividend+1
  2995  0361  120A  118A  254C  120A  118A  	fcall	stringdir
  2996  0366  00A6               	movwf	___lldiv@dividend+2
  2997  0367  120A  118A  254C  120A  118A  	fcall	stringdir
  2998  036C  00A7               	movwf	___lldiv@dividend+3
  2999  036D  120A  118A  24EC  120A  118A  	fcall	___lldiv
  3000  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0374  0820               	movf	?___lldiv,w
  3003  0375  00F5               	movwf	??_beep
  3004  0376  0821               	movf	?___lldiv+1,w
  3005  0377  00F6               	movwf	??_beep+1
  3006  0378  0822               	movf	?___lldiv+2,w
  3007  0379  00F7               	movwf	??_beep+2
  3008  037A  0823               	movf	?___lldiv+3,w
  3009  037B  00F8               	movwf	??_beep+3
  3010  037C  3001               	movlw	1
  3011  037D  1283               	bcf	3,5	;RP0=0, select bank0
  3012  037E  1303               	bcf	3,6	;RP1=0, select bank0
  3013  037F  07AD               	addwf	beep@j,f
  3014  0380  1803               	skipnc
  3015  0381  0AAE               	incf	beep@j+1,f
  3016  0382  3000               	movlw	0
  3017  0383  07AE               	addwf	beep@j+1,f
  3018  0384  2B09               	goto	L1
  3019  0385                     __end_of_beep:	
  3020                           
  3021                           	psect	text17
  3022  04EC                     __ptext17:	
  3023 ;; *************** function ___lldiv *****************
  3024 ;; Defined at:
  3025 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  divisor         4    0[BANK0 ] unsigned long 
  3028 ;;  dividend        4    4[BANK0 ] unsigned long 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  quotient        4    8[BANK0 ] unsigned long 
  3031 ;;  counter         1   12[BANK0 ] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  4    0[BANK0 ] unsigned long 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3041 ;;      Params:         0       8       0       0       0
  3042 ;;      Locals:         0       5       0       0       0
  3043 ;;      Temps:          1       0       0       0       0
  3044 ;;      Totals:         1      13       0       0       0
  3045 ;;Total ram usage:       14 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_beep
  3052 ;;		_putch
  3053 ;;		_prog_lcd
  3054 ;;		_init_lcd
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           
  3059                           ;psect for function ___lldiv
  3060  04EC                     ___lldiv:	
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3064  04EC  3000               	movlw	0
  3065  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  3066  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  3067  04EF  00AB               	movwf	___lldiv@quotient+3
  3068  04F0  3000               	movlw	0
  3069  04F1  00AA               	movwf	___lldiv@quotient+2
  3070  04F2  3000               	movlw	0
  3071  04F3  00A9               	movwf	___lldiv@quotient+1
  3072  04F4  3000               	movlw	0
  3073  04F5  00A8               	movwf	___lldiv@quotient
  3074  04F6  0823               	movf	___lldiv@divisor+3,w
  3075  04F7  0422               	iorwf	___lldiv@divisor+2,w
  3076  04F8  0421               	iorwf	___lldiv@divisor+1,w
  3077  04F9  0420               	iorwf	___lldiv@divisor,w
  3078  04FA  1903               	skipnz
  3079  04FB  2D43               	goto	l1443
  3080  04FC  01AC               	clrf	___lldiv@counter
  3081  04FD  0AAC               	incf	___lldiv@counter,f
  3082  04FE                     l1429:	
  3083  04FE  1BA3               	btfsc	___lldiv@divisor+3,7
  3084  04FF  2D0E               	goto	l1431
  3085  0500  3001               	movlw	1
  3086  0501  00F4               	movwf	??___lldiv
  3087  0502                     u1065:	
  3088  0502  1003               	clrc
  3089  0503  0DA0               	rlf	___lldiv@divisor,f
  3090  0504  0DA1               	rlf	___lldiv@divisor+1,f
  3091  0505  0DA2               	rlf	___lldiv@divisor+2,f
  3092  0506  0DA3               	rlf	___lldiv@divisor+3,f
  3093  0507  0BF4               	decfsz	??___lldiv,f
  3094  0508  2D02               	goto	u1065
  3095  0509  3001               	movlw	1
  3096  050A  00F4               	movwf	??___lldiv
  3097  050B  0874               	movf	??___lldiv,w
  3098  050C  07AC               	addwf	___lldiv@counter,f
  3099  050D  2CFE               	goto	l1429
  3100  050E                     l1431:	
  3101  050E  3001               	movlw	1
  3102  050F  00F4               	movwf	??___lldiv
  3103  0510                     u1085:	
  3104  0510  1003               	clrc
  3105  0511  0DA8               	rlf	___lldiv@quotient,f
  3106  0512  0DA9               	rlf	___lldiv@quotient+1,f
  3107  0513  0DAA               	rlf	___lldiv@quotient+2,f
  3108  0514  0DAB               	rlf	___lldiv@quotient+3,f
  3109  0515  0BF4               	decfsz	??___lldiv,f
  3110  0516  2D10               	goto	u1085
  3111  0517  0823               	movf	___lldiv@divisor+3,w
  3112  0518  0227               	subwf	___lldiv@dividend+3,w
  3113  0519  1D03               	skipz
  3114  051A  2D25               	goto	u1095
  3115  051B  0822               	movf	___lldiv@divisor+2,w
  3116  051C  0226               	subwf	___lldiv@dividend+2,w
  3117  051D  1D03               	skipz
  3118  051E  2D25               	goto	u1095
  3119  051F  0821               	movf	___lldiv@divisor+1,w
  3120  0520  0225               	subwf	___lldiv@dividend+1,w
  3121  0521  1D03               	skipz
  3122  0522  2D25               	goto	u1095
  3123  0523  0820               	movf	___lldiv@divisor,w
  3124  0524  0224               	subwf	___lldiv@dividend,w
  3125  0525                     u1095:	
  3126  0525  1C03               	skipc
  3127  0526  2D36               	goto	l1439
  3128  0527  0820               	movf	___lldiv@divisor,w
  3129  0528  02A4               	subwf	___lldiv@dividend,f
  3130  0529  0821               	movf	___lldiv@divisor+1,w
  3131  052A  1C03               	skipc
  3132  052B  0F21               	incfsz	___lldiv@divisor+1,w
  3133  052C  02A5               	subwf	___lldiv@dividend+1,f
  3134  052D  0822               	movf	___lldiv@divisor+2,w
  3135  052E  1C03               	skipc
  3136  052F  0F22               	incfsz	___lldiv@divisor+2,w
  3137  0530  02A6               	subwf	___lldiv@dividend+2,f
  3138  0531  0823               	movf	___lldiv@divisor+3,w
  3139  0532  1C03               	skipc
  3140  0533  0F23               	incfsz	___lldiv@divisor+3,w
  3141  0534  02A7               	subwf	___lldiv@dividend+3,f
  3142  0535  1428               	bsf	___lldiv@quotient,0
  3143  0536                     l1439:	
  3144  0536  3001               	movlw	1
  3145  0537                     u1105:	
  3146  0537  1003               	clrc
  3147  0538  0CA3               	rrf	___lldiv@divisor+3,f
  3148  0539  0CA2               	rrf	___lldiv@divisor+2,f
  3149  053A  0CA1               	rrf	___lldiv@divisor+1,f
  3150  053B  0CA0               	rrf	___lldiv@divisor,f
  3151  053C  3EFF               	addlw	-1
  3152  053D  1D03               	skipz
  3153  053E  2D37               	goto	u1105
  3154  053F  3001               	movlw	1
  3155  0540  02AC               	subwf	___lldiv@counter,f
  3156  0541  1D03               	btfss	3,2
  3157  0542  2D0E               	goto	l1431
  3158  0543                     l1443:	
  3159  0543  082B               	movf	___lldiv@quotient+3,w
  3160  0544  00A3               	movwf	?___lldiv+3
  3161  0545  082A               	movf	___lldiv@quotient+2,w
  3162  0546  00A2               	movwf	?___lldiv+2
  3163  0547  0829               	movf	___lldiv@quotient+1,w
  3164  0548  00A1               	movwf	?___lldiv+1
  3165  0549  0828               	movf	___lldiv@quotient,w
  3166  054A  00A0               	movwf	?___lldiv
  3167  054B  0008               	return
  3168  054C                     __end_of___lldiv:	
  3169                           
  3170                           	psect	text18
  3171  0795                     __ptext18:	
  3172 ;; *************** function _getch *****************
  3173 ;; Defined at:
  3174 ;;		line 62 in file "main.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      unsigned char 
  3181 ;; Registers used:
  3182 ;;		wreg
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3188 ;;      Params:         0       0       0       0       0
  3189 ;;      Locals:         0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0
  3191 ;;      Totals:         0       0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    1
  3195 ;; This function calls:
  3196 ;;		Nothing
  3197 ;; This function is called by:
  3198 ;;		_buffer_serial
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           
  3203                           ;psect for function _getch
  3204  0795                     _getch:	
  3205  0795                     l78:	
  3206                           ;main.c: 63: while(!RCIF) continue;
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in _getch: [wreg]
  3210                           
  3211  0795  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0796  1303               	bcf	3,6	;RP1=0, select bank0
  3213  0797  1E8C               	btfss	12,5	;volatile
  3214  0798  2F95               	goto	l78
  3215                           
  3216                           ;main.c: 64: return RCREG;
  3217  0799  081A               	movf	26,w	;volatile
  3218  079A  0008               	return
  3219  079B                     __end_of_getch:	
  3220                           
  3221                           	psect	text19
  3222  076F                     __ptext19:	
  3223 ;; *************** function _raycast_intersection_cleared *****************
  3224 ;; Defined at:
  3225 ;;		line 109 in file "main.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3239 ;;      Params:         0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0
  3241 ;;      Temps:          4       0       0       0       0
  3242 ;;      Totals:         4       0       0       0       0
  3243 ;;Total ram usage:        4 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		Interrupt level 1
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _raycast_intersection_cleared
  3254  076F                     _raycast_intersection_cleared:	
  3255                           
  3256                           ;main.c: 110: FAN.count++;
  3257  076F  3001               	movlw	1
  3258  0770  07D4               	addwf	_FAN,f	;volatile
  3259  0771  1803               	skipnc
  3260  0772  0AD5               	incf	_FAN+1,f	;volatile
  3261  0773  3000               	movlw	0
  3262  0774  07D5               	addwf	_FAN+1,f	;volatile
  3263                           
  3264                           ;main.c: 111: INTF = 0;
  3265  0775  108B               	bcf	11,1	;volatile
  3266                           
  3267                           ;main.c: 112: return;
  3268  0776  0873               	movf	??_raycast_intersection_cleared+3,w
  3269  0777  00FF               	movwf	127
  3270  0778  0872               	movf	??_raycast_intersection_cleared+2,w
  3271  0779  008A               	movwf	10
  3272  077A  0871               	movf	??_raycast_intersection_cleared+1,w
  3273  077B  0084               	movwf	4
  3274  077C  0E70               	swapf	??_raycast_intersection_cleared^(0+-128),w
  3275  077D  0083               	movwf	3
  3276  077E  0EFE               	swapf	126,f
  3277  077F  0E7E               	swapf	126,w
  3278  0780  0009               	retfie
  3279  0781                     __end_of_raycast_intersection_cleared:	
  3280  007E                     btemp	set	126	;btemp
  3281  007E                     wtemp0	set	126
  3282                           
  3283                           	psect	intentry
  3284  0004                     __pintentry:	
  3285                           ;incstack = 0
  3286                           ; Regs used in _raycast_intersection_cleared: [wreg]
  3287                           
  3288  0004                     interrupt_function:	
  3289  007E                     saved_w	set	btemp
  3290  0004  00FE               	movwf	btemp
  3291  0005  0E03               	swapf	3,w
  3292  0006  00F0               	movwf	??_raycast_intersection_cleared
  3293  0007  0804               	movf	4,w
  3294  0008  00F1               	movwf	??_raycast_intersection_cleared+1
  3295  0009  080A               	movf	10,w
  3296  000A  00F2               	movwf	??_raycast_intersection_cleared+2
  3297  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3298  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3299  000D  087F               	movf	btemp+1,w
  3300  000E  00F3               	movwf	??_raycast_intersection_cleared+3
  3301  000F  120A  118A  2F6F   	ljmp	_raycast_intersection_cleared


Data Sizes:
    Strings     56
    Constant    20
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     52      56
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[11]), STR_3(CODE[9]), 
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    buffer_serial@buffer	PTR unsigned char  size(1) Largest target is 6
		 -> main@buffer(BANK0[6]), 

    io_switch@x	PTR unsigned char  size(1) Largest target is 6
		 -> main@buffer(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_beep
    _init_lcd->_prog_lcd
    _io_switch->_beep
    _rps_timer1->___lwdiv
    _main_lcd->_prog_lcd
    _prog_lcd->___lldiv
    _printf->___lwdiv
    _printf->_putch
    _putch->___lldiv
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _beep->___lldiv

Critical Paths under _raycast_intersection_cleared in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_buffer_serial
    _init_lcd->_printf
    _buffer_serial->_io_switch
    _io_switch->_main_lcd
    _read_tmr1->_printf
    _read_tmr0->_printf
    _rps_timer1->___lwdiv
    _main_lcd->_printf
    _prog_lcd->___lldiv
    _printf->___lwmod
    _putch->___lldiv
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _beep->___lldiv

Critical Paths under _raycast_intersection_cleared in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _raycast_intersection_cleared in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _raycast_intersection_cleared in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _raycast_intersection_cleared in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   28394
                                             44 BANK0      8     8      0
                               _beep
                      _buffer_serial
                           _init_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             4     4      0    7360
                                             32 BANK0      4     4      0
                            ___lldiv
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (1) _buffer_serial                                        5     3      2   19330
                                             39 BANK0      5     3      2
                              _getch
                          _io_switch
 ---------------------------------------------------------------------------------
 (2) _io_switch                                            2     2      0   19043
                                             37 BANK0      2     2      0
                               _beep
                           _main_lcd
                          _read_tmr0
                          _read_tmr1
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _read_tmr1                                            0     0      0    5608
                             _printf
                         _rps_timer1
 ---------------------------------------------------------------------------------
 (3) _read_tmr0                                            2     2      0    5608
                                             32 BANK0      2     2      0
                             _printf
                         _rps_timer1
 ---------------------------------------------------------------------------------
 (4) _rps_timer1                                           6     0      6    1361
                                              9 BANK0      6     0      6
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _main_lcd                                             5     2      3    6011
                                             32 BANK0      5     2      3
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (2) _prog_lcd                                             5     5      0    1572
                                              5 COMMON     4     4      0
                                             13 BANK0      1     1      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _printf                                              21    19      2    4247
                                             15 BANK0     17    15      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                5     5      0    1603
                                              5 COMMON     4     4      0
                                             13 BANK0      1     1      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     501
                                              8 COMMON     1     1      0
                                              2 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _beep                                                 6     6      0    1609
                                              5 COMMON     4     4      0
                                             13 BANK0      2     2      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8    1541
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _raycast_intersection_cleared                         4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
     ___lldiv
   _buffer_serial
     _getch
     _io_switch
       _beep
         ___lldiv
       _main_lcd
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
             ___lldiv
         _prog_lcd
           ___lldiv
       _read_tmr0
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
             ___lldiv
         _rps_timer1
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _read_tmr1
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
             ___lldiv
         _rps_timer1
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _write
   _init_lcd
     ___lldiv
     _printf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
       _putch
         ___lldiv
     _prog_lcd
       ___lldiv

 _raycast_intersection_cleared (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     34      38       5       70.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      42      12        0.0%
ABS                  0      0      42       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Dec 10 23:32:59 2017

                                    pc 0002                            __CFG_CP$OFF 0000  
                                   l72 047A                                     l78 0795  
                                   fsr 0004                    ___wmul@multiplicand 0076  
                                  l161 010D                                    l172 00F1  
                                  l190 01F3                                    l274 0756  
                                  l179 016A                                    _FAN 0054  
                                  _LCD 0008                                    _BUZ 002D  
                                  _PR2 0092                           __CFG_CPD$OFF 0000  
                                  u765 0672                                    u785 0683  
                                  u795 068C                                    _PWM 0015  
                                  _PUT 03C8                                    fsr0 0004  
                                  indf 0000                           __CFG_FOSC$HS 0000  
                         __CFG_LVP$OFF 0000                                   l1141 066F  
                                 l1143 067D                                   l1151 0696  
                                 l1147 068B                                   l1501 0628  
                                 l1431 050E                                   l1089 078D  
                                 l1443 0543                                   l1611 01B3  
                                 l1603 01A3                                   l1531 006A  
                                 l1429 04FE                                   l1525 0053  
                                 l1613 0036                                   l1621 0660  
                                 l1701 03E0                                   l1439 0536  
                                 l1607 01AD                                   l1543 00B6  
                                 l1703 03FF                                   l1553 00DB  
                                 l1491 0607                                   l1467 074C  
                                 l1571 0129                                   l1555 00E8  
                                 l1547 00B8                                   l1539 00A5  
                                 l1723 06ED                                   l1581 013B  
                                 l1549 00CC                                   l1575 0135  
                                 l1559 00F3                                   l1497 061D  
                                 l1489 05F9                                   l1681 039B  
                                 l1595 0189                                   l1587 015C  
                                 l1597 018D                                   l1693 03CF  
                                 l1685 03AC                                   l1677 0389  
                                 l1757 05DE                                   l1599 0191  
                                 l1687 03B2                                   l1679 038F  
                                 l1689 03BE                                   _BAUD 055C  
                                 STR_1 0566                                   STR_2 0577  
                                 STR_3 0592                                   STR_4 0587  
                                 STR_5 059B                                   STR_6 059B  
                                 u1105 0537                                   u1215 0608  
                                 u1065 0502                                   u1225 0614  
                                 u1235 061E                                   u1155 0757  
                                 u1085 0510                                   u1165 075E  
                                 u1095 0525                                   u1345 0152  
                                 u1195 05FC                                   u1285 00AD  
                                 u1455 0312                                   u1385 0179  
                                 _INTF 0059                                   _RCIF 0065  
                                 _TMR0 0001                                   _TMR1 000E  
                                 _TXIF 0064                           __CFG_WRT$OFF 0000  
                                 _beep 02D2                                   _main 059E  
                                 btemp 007E                                   start 0012  
                                ?_beep 0070                                  ?_main 0070  
                        __CFG_WDTE$OFF 0000                        __end_of___lldiv 054C  
                                _T1CON 0010                                  _T2CON 0012  
                                _IFOSC 0560                        __end_of___lwdiv 062D  
                      __end_of___lwmod 069B                                  _RCREG 001A  
                                _RCSTA 0018                                  _SPBRG 0099  
                                _TRISA 0085                                  _TRISB 0086  
                                _TRISC 0087                                  _TRISD 0088  
                                _TRISE 0089                                  _TXREG 0019  
                                _TXSTA 0098                                  beep@j 002D  
                                _getch 0795                        __end_of_dpowers 055C  
                      __end_of_isdigit 078F                                  _putch 040D  
                                _write 078F                         __CFG_BOREN$OFF 0000  
                                pclath 000A                                  status 0003  
                                wtemp0 007E                        ??_buffer_serial 0049  
                         __end_of_BAUD 0560                        __initialization 0015  
                         __end_of_beep 0385                           __end_of_main 05EF  
                     buffer_serial@idx 0047                                 ??_beep 0075  
                               ??_main 0079                                 ?_getch 0070  
                               _CCPR1L 0015                    buffer_serial@buffer 004B  
                               ?_putch 0070                                 ?_write 0070  
                               _T1FOSC 0564                                 _INTCON 000B  
                         rps_timer1@dt 002D                         __CFG_PWRTE$OFF 0000  
                               ___wmul 0748                           main_lcd@duty 0042  
                     __end_of_main_lcd 0748                              ??___lldiv 0074  
                            ??___lwdiv 0078                              ??___lwmod 002D  
                     __end_of_init_lcd 02D2                                 _printf 002F  
                            ??_isdigit 0074                                 saved_w 007E  
                     __end_of_prog_lcd 04EC                __end_of__initialization 002B  
                        __end_of_IFOSC 0564                         __pcstackCOMMON 0070  
                         __pidataBANK0 079B                          __end_of_getch 079B  
                        __end_of_putch 0481                          __end_of_write 0795  
                              ??_getch 0074                                ??_putch 0075  
                              ??_write 0074                     __size_of_io_switch 0088  
                   __size_of_read_tmr0 002F                     __size_of_read_tmr1 002B  
                           __pmaintext 059E                                ?___wmul 0074  
                           __pintentry 0004                                _CCP1CON 0017  
                              ?_printf 002F                             __stringtab 054C  
                            ?_main_lcd 0040                              ?_init_lcd 0070  
                            ?_prog_lcd 0070                                ___lldiv 04EC  
                      __size_of___wmul 0027                                ___lwdiv 05EF  
                              ___lwmod 0667                          main_lcd@value 0040  
                              __ptext1 01F4                                __ptext2 06CA  
                              __ptext3 0385                                __ptext4 078F  
                              __ptext5 06F6                                __ptext6 069B  
                              __ptext7 062D                                __ptext8 0721  
                              __ptext9 0481                        __size_of_printf 01C5  
                    __end_of_io_switch 040D                                _dpowers 0552  
                              _isdigit 0781                      __end_of_read_tmr0 06CA  
                    __end_of_read_tmr1 0721                                main@idx 0052  
                 end_of_initialization 002B                             ??_main_lcd 0043  
                           ??_init_lcd 0040   __end_of_raycast_intersection_cleared 0781  
__size_of_raycast_intersection_cleared 0012           _raycast_intersection_cleared 076F  
                      ___lldiv@divisor 0020                        ___lldiv@counter 002C  
                __end_of_buffer_serial 06F6                                printf@c 003F  
                              printf@f 003C                             ??_prog_lcd 0075  
                           _rps_timer1 062D                            prog_lcd@msg 002D  
                       __end_of_T1FOSC 0566                             main@buffer 004C  
                          printf@width 003D          ?_raycast_intersection_cleared 0070  
                       __end_of___wmul 076F                         __end_of_printf 01F4  
                        __pbitnvCOMMON 03C8                    start_initialization 0015  
                          rps_timer1@x 0029                             io_switch@x 0046  
                             ??___wmul 0078                            __pdataBANK0 0054  
                             ??_printf 0031                              ___latbits 0002  
                        __pcstackBANK0 0020                            ?_rps_timer1 0029  
                    __size_of_main_lcd 0027                      __size_of_init_lcd 00DE  
                     ___lwdiv@dividend 0024                               ?___lldiv 0020  
       ??_raycast_intersection_cleared 0070                               ?___lwdiv 0022  
                             ?___lwmod 0029                      __size_of_prog_lcd 006B  
                            __pstrings 054C                               ?_isdigit 0070  
                            _io_switch 0385                       ___lwdiv@quotient 0027  
                       __size_of_getch 0006                              _read_tmr0 069B  
                            _read_tmr1 06F6                         __size_of_putch 0074  
                       __size_of_write 0006                      interrupt_function 0004  
                       ___wmul@product 0020                    __size_of_rps_timer1 003A  
                          __stringbase 0551                      ___wmul@multiplier 0074  
                           printf@flag 0039                             printf@prec 0035  
                           ?_io_switch 0070                             ?_read_tmr0 0070  
                           ?_read_tmr1 0070                       __size_of___lldiv 0060  
                     __size_of___lwdiv 003E                       __size_of___lwmod 0034  
                   __end_of__stringtab 0552                            _isdigit$347 0074  
                     __size_of_isdigit 000E                        ___lwdiv@divisor 0022  
                      ___lwdiv@counter 0026                               __ptext10 002F  
                             __ptext11 040D                               __ptext12 0781  
                             __ptext13 0748                               __ptext14 0667  
                             __ptext15 05EF                               __ptext16 02D2  
                             __ptext17 04EC                               __ptext18 0795  
                             __ptext19 076F                 __size_of_buffer_serial 002C  
                             _main_lcd 0721                          __size_of_beep 00B3  
                             _init_lcd 01F4                          __size_of_main 0051  
                             _prog_lcd 0481                              printf@len 0037  
                            printf@val 003A                               isdigit@c 0075  
                          ??_io_switch 0045                           ??_rps_timer1 0079  
                          ??_read_tmr0 0040                            ??_read_tmr1 0079  
                             intlevel1 0000                       ___lwmod@dividend 002B  
                     ___lldiv@dividend 0024                              stringcode 054C  
                            write@duty 0074                          _buffer_serial 06CA  
                             printf@ap 0036                               printf@cp 0034  
                             putch@msg 002D                     __end_of_rps_timer1 0667  
                           _OPTION_REG 0081                       ___lldiv@quotient 0028  
                      ___lwmod@divisor 0029                        ___lwmod@counter 002E  
                             stringdir 054C                               stringtab 054C  
                       ?_buffer_serial 0047  
