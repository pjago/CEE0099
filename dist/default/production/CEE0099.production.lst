

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Jan  3 12:50:05 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0257                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0257  3420               	retlw	32
   122  0258  3420               	retlw	32
   123  0259  3420               	retlw	32
   124  025A  3420               	retlw	32
   125  025B  3420               	retlw	32
   126  025C  3420               	retlw	32
   127  025D  3420               	retlw	32
   128  025E  3420               	retlw	32
   129  025F  3420               	retlw	32
   130  0260  3420               	retlw	32
   131  0261  3420               	retlw	32
   132  0262  3420               	retlw	32
   133  0263  3420               	retlw	32
   134  0264  3420               	retlw	32
   135  0265  3420               	retlw	32
   136  0266  3420               	retlw	32
   137  0267  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  3057               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  226C   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01BD               	clrf	__pbssBANK0& (0+127)
   184  0022  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   186  0024  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   187  0025  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   188  0026  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   189  0027  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   190  0028  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   191                           
   192                           ; Clear objects allocated to COMMON
   193  0029  01FA               	clrf	__pbssCOMMON& (0+127)
   194  002A  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   195  002B  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   196  002C  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
   197  002D                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200  002D                     __end_of__initialization:	
   201  002D  0183               	clrf	3
   202  002E  120A  118A  2831   	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssCOMMON
   205  007A                     __pbssCOMMON:	
   206  007A                     _TMR1R:	
   207  007A                     	ds	2
   208  007C                     _T1ZOH:	
   209  007C                     	ds	2
   210                           
   211                           	psect	bssBANK0
   212  003D                     __pbssBANK0:	
   213  003D                     _T1ACC:	
   214  003D                     	ds	2
   215  003F                     _T1FOH:	
   216  003F                     	ds	2
   217  0041                     _PWMZOH:	
   218  0041                     	ds	1
   219  0042                     _T0PS:	
   220  0042                     	ds	1
   221  0043                     _kT0:	
   222  0043                     	ds	1
   223  0044                     _RC:	
   224  0044                     	ds	1
   225                           
   226                           	psect	dataBANK0
   227  0020                     __pdataBANK0:	
   228  0020                     _BUF:	
   229  0020                     	ds	17
   230                           
   231                           	psect	inittext
   232  0268                     init_fetch0:	
   233                           ;	Called with low address in FSR and high address in W
   234                           
   235  0268  087E               	movf	126,w
   236  0269  008A               	movwf	10
   237  026A  087F               	movf	127,w
   238  026B  0082               	movwf	2
   239  026C                     init_ram0:	
   240                           ;Called with:
   241                           ;	high address of idata address in btemp 
   242                           ;	low address of idata address in btemp+1 
   243                           ;	low address of data in FSR
   244                           ;	high address + 1 of data in btemp-1
   245                           
   246  026C  2268  120A  118A   	fcall	init_fetch0
   247  026F  0080               	movwf	0
   248  0270  0A84               	incf	4,f
   249  0271  0804               	movf	4,w
   250  0272  067D               	xorwf	125,w
   251  0273  1903               	btfsc	3,2
   252  0274  3400               	retlw	0
   253  0275  0AFF               	incf	127,f
   254  0276  1903               	btfsc	3,2
   255  0277  0AFE               	incf	126,f
   256  0278  2A6C               	goto	init_ram0
   257                           
   258                           	psect	cstackCOMMON
   259  0070                     __pcstackCOMMON:	
   260  0070                     ?_beep:	
   261  0070                     ?_rsend:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_rsget:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_read_tmr1:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_write:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_oversampling:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ??_oversampling:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_main:	
   280                           ; 1 bytes @ 0x0
   281                           
   282                           
   283                           ; 2 bytes @ 0x0
   284  0070                     	ds	10
   285                           
   286                           	psect	cstackBANK0
   287  0031                     __pcstackBANK0:	
   288  0031                     ??_beep:	
   289  0031                     ??_rsend:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0031                     ??_rsget:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0031                     ??_write:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0031                     rsend@msg:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0031                     write@duty:	
   302                           ; 1 bytes @ 0x0
   303                           
   304                           
   305                           ; 1 bytes @ 0x0
   306  0031                     	ds	1
   307  0032                     ??_read_tmr1:	
   308  0032                     beep@dash:	
   309                           ; 1 bytes @ 0x1
   310                           
   311                           
   312                           ; 1 bytes @ 0x1
   313  0032                     	ds	1
   314  0033                     beep@j:	
   315                           
   316                           ; 2 bytes @ 0x2
   317  0033                     	ds	2
   318  0035                     beep@j_56:	
   319                           
   320                           ; 2 bytes @ 0x4
   321  0035                     	ds	2
   322  0037                     ??_main:	
   323                           
   324                           ; 1 bytes @ 0x6
   325  0037                     	ds	3
   326  003A                     main@x:	
   327                           
   328                           ; 1 bytes @ 0x9
   329  003A                     	ds	1
   330  003B                     main@msg:	
   331                           
   332                           ; 1 bytes @ 0xA
   333  003B                     	ds	1
   334  003C                     main@cmd:	
   335                           
   336                           ; 1 bytes @ 0xB
   337  003C                     	ds	1
   338                           
   339                           	psect	maintext
   340  0031                     __pmaintext:	
   341 ;;
   342 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   343 ;;
   344 ;; *************** function _main *****************
   345 ;; Defined at:
   346 ;;		line 89 in file "main.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;  cmd             1   11[BANK0 ] unsigned char 
   351 ;;  msg             1   10[BANK0 ] unsigned char 
   352 ;;  x               1    9[BANK0 ] unsigned char 
   353 ;; Return value:  Size  Location     Type
   354 ;;                  2  112[None  ] int 
   355 ;; Registers used:
   356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : B00/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   362 ;;      Params:         0       0       0       0       0
   363 ;;      Locals:         0       3       0       0       0
   364 ;;      Temps:          0       3       0       0       0
   365 ;;      Totals:         0       6       0       0       0
   366 ;;Total ram usage:        6 bytes
   367 ;; Hardware stack levels required when called:    3
   368 ;; This function calls:
   369 ;;		_beep
   370 ;;		_read_tmr1
   371 ;;		_rsend
   372 ;;		_rsget
   373 ;;		_write
   374 ;; This function is called by:
   375 ;;		Startup code after reset
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           
   380                           ;psect for function _main
   381  0031                     _main:	
   382                           
   383                           ;main.c: 90: OPTION_REG = 0x83;
   384                           
   385                           ;incstack = 0
   386                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   387  0031  3083               	movlw	131
   388  0032  1683               	bsf	3,5	;RP0=1, select bank1
   389  0033  1303               	bcf	3,6	;RP1=0, select bank1
   390  0034  0081               	movwf	1	;volatile
   391                           
   392                           ;main.c: 91: INTCON = 0x80;
   393  0035  3080               	movlw	128
   394  0036  008B               	movwf	11	;volatile
   395                           
   396                           ;main.c: 92: T1CON = 0x03;
   397  0037  3003               	movlw	3
   398  0038  1283               	bcf	3,5	;RP0=0, select bank0
   399  0039  1303               	bcf	3,6	;RP1=0, select bank0
   400  003A  0090               	movwf	16	;volatile
   401                           
   402                           ;main.c: 93: CCP1CON = 0x0F;
   403  003B  300F               	movlw	15
   404  003C  0097               	movwf	23	;volatile
   405                           
   406                           ;main.c: 94: CCPR1L = 0;
   407  003D  0195               	clrf	21	;volatile
   408                           
   409                           ;main.c: 95: CCP2CON = 0x0F;
   410  003E  300F               	movlw	15
   411  003F  009D               	movwf	29	;volatile
   412                           
   413                           ;main.c: 96: CCPR2L = 0;
   414  0040  019B               	clrf	27	;volatile
   415                           
   416                           ;main.c: 97: PR2 = 100;
   417  0041  3064               	movlw	100
   418  0042  1683               	bsf	3,5	;RP0=1, select bank1
   419  0043  1303               	bcf	3,6	;RP1=0, select bank1
   420  0044  0092               	movwf	18	;volatile
   421                           
   422                           ;main.c: 98: T2CON = 0x04;
   423  0045  3004               	movlw	4
   424  0046  1283               	bcf	3,5	;RP0=0, select bank0
   425  0047  1303               	bcf	3,6	;RP1=0, select bank0
   426  0048  0092               	movwf	18	;volatile
   427                           
   428                           ;main.c: 99: ADCON1 = 0x05;
   429  0049  3005               	movlw	5
   430  004A  1683               	bsf	3,5	;RP0=1, select bank1
   431  004B  1303               	bcf	3,6	;RP1=0, select bank1
   432  004C  009F               	movwf	31	;volatile
   433                           
   434                           ;main.c: 100: TRISC = 0xFD;
   435  004D  30FD               	movlw	253
   436  004E  0087               	movwf	7	;volatile
   437                           
   438                           ;main.c: 101: TRISB = 0xFF;
   439  004F  30FF               	movlw	255
   440  0050  0086               	movwf	6	;volatile
   441                           
   442                           ;main.c: 102: TRISA = 0xDF;
   443  0051  30DF               	movlw	223
   444  0052  0085               	movwf	5	;volatile
   445                           
   446                           ;main.c: 103: RCSTA = 0x90;
   447  0053  3090               	movlw	144
   448  0054  1283               	bcf	3,5	;RP0=0, select bank0
   449  0055  1303               	bcf	3,6	;RP1=0, select bank0
   450  0056  0098               	movwf	24	;volatile
   451                           
   452                           ;main.c: 104: TXSTA = 0x24;
   453  0057  3024               	movlw	36
   454  0058  1683               	bsf	3,5	;RP0=1, select bank1
   455  0059  1303               	bcf	3,6	;RP1=0, select bank1
   456  005A  0098               	movwf	24	;volatile
   457                           
   458                           ;main.c: 105: SPBRG = 12;
   459  005B  300C               	movlw	12
   460  005C  0099               	movwf	25	;volatile
   461                           
   462                           ;main.c: 109: if (PORTB & 0x02) {
   463  005D  1283               	bcf	3,5	;RP0=0, select bank0
   464  005E  1303               	bcf	3,6	;RP1=0, select bank0
   465  005F  1C86               	btfss	6,1	;volatile
   466  0060  28FB               	goto	l898
   467                           
   468                           ;main.c: 110: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   469  0061  3000               	movlw	0
   470  0062  120A  118A  2174  120A  118A  	fcall	_beep
   471  0067  3082               	movlw	130
   472  0068  1283               	bcf	3,5	;RP0=0, select bank0
   473  0069  1303               	bcf	3,6	;RP1=0, select bank0
   474  006A  00B8               	movwf	??_main+1
   475  006B  30DD               	movlw	221
   476  006C  00B7               	movwf	??_main
   477  006D                     u317:	
   478  006D  0BB7               	decfsz	??_main,f
   479  006E  286D               	goto	u317
   480  006F  0BB8               	decfsz	??_main+1,f
   481  0070  286D               	goto	u317
   482                           
   483                           ;main.c: 111: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   484  0071  3000               	movlw	0
   485  0072  120A  118A  2174  120A  118A  	fcall	_beep
   486  0077  3082               	movlw	130
   487  0078  1283               	bcf	3,5	;RP0=0, select bank0
   488  0079  1303               	bcf	3,6	;RP1=0, select bank0
   489  007A  00B8               	movwf	??_main+1
   490  007B  30DD               	movlw	221
   491  007C  00B7               	movwf	??_main
   492  007D                     u327:	
   493  007D  0BB7               	decfsz	??_main,f
   494  007E  287D               	goto	u327
   495  007F  0BB8               	decfsz	??_main+1,f
   496  0080  287D               	goto	u327
   497                           
   498                           ;main.c: 112: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   499  0081  3000               	movlw	0
   500  0082  120A  118A  2174  120A  118A  	fcall	_beep
   501  0087  3082               	movlw	130
   502  0088  1283               	bcf	3,5	;RP0=0, select bank0
   503  0089  1303               	bcf	3,6	;RP1=0, select bank0
   504  008A  00B8               	movwf	??_main+1
   505  008B  30DD               	movlw	221
   506  008C  00B7               	movwf	??_main
   507  008D                     u337:	
   508  008D  0BB7               	decfsz	??_main,f
   509  008E  288D               	goto	u337
   510  008F  0BB8               	decfsz	??_main+1,f
   511  0090  288D               	goto	u337
   512  0091  28E0               	goto	l868
   513  0092                     l874:	
   514                           ;main.c: 118: case '7': read_tmr1(); break;
   515                           
   516                           ;main.c: 117: switch (BUF[0]) {
   517                           
   518  0092  120A  118A  222C  120A  118A  	fcall	_read_tmr1
   519  0097  28DD               	goto	l892
   520  0098                     l876:	
   521                           ;main.c: 119: case '5': write(BUF[1]); break;
   522                           
   523  0098  1283               	bcf	3,5	;RP0=0, select bank0
   524  0099  1303               	bcf	3,6	;RP1=0, select bank0
   525  009A  0821               	movf	_BUF+1,w
   526  009B  120A  118A  2245  120A  118A  	fcall	_write
   527  00A0  28DD               	goto	l892
   528  00A1                     l878:	
   529                           ;main.c: 120: case '1': write(BUF[1]); read_tmr1(); break;
   530                           
   531  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   532  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   533  00A3  0821               	movf	_BUF+1,w
   534  00A4  120A  118A  2245  120A  118A  	fcall	_write
   535  00A9  120A  118A  222C  120A  118A  	fcall	_read_tmr1
   536  00AE  28DD               	goto	l892
   537  00AF                     l880:	
   538                           ;main.c: 121: case '2': write(0); _delay((unsigned long)((4000)*(4000000/4000.0))); beep
      +                          (0); TMR1 = 0; break;
   539                           
   540  00AF  3000               	movlw	0
   541  00B0  120A  118A  2245  120A  118A  	fcall	_write
   542  00B5  3015               	movlw	21
   543  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   544  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   545  00B8  00B9               	movwf	??_main+2
   546  00B9  304B               	movlw	75
   547  00BA  00B8               	movwf	??_main+1
   548  00BB  30BD               	movlw	189
   549  00BC  00B7               	movwf	??_main
   550  00BD                     u347:	
   551  00BD  0BB7               	decfsz	??_main,f
   552  00BE  28BD               	goto	u347
   553  00BF  0BB8               	decfsz	??_main+1,f
   554  00C0  28BD               	goto	u347
   555  00C1  0BB9               	decfsz	??_main+2,f
   556  00C2  28BD               	goto	u347
   557  00C3  28C4               	nop2
   558  00C4  3000               	movlw	0
   559  00C5  120A  118A  2174  120A  118A  	fcall	_beep
   560  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   561  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   562  00CC  018E               	clrf	14	;volatile
   563  00CD  018F               	clrf	15	;volatile
   564                           
   565                           ;main.c: 122: }
   566  00CE  28DD               	goto	l892
   567  00CF                     l890:	
   568  00CF  0820               	movf	_BUF,w
   569                           
   570                           ; Switch size 1, requested type "space"
   571                           ; Number of cases is 4, Range of values is 49 to 55
   572                           ; switch strategies available:
   573                           ; Name         Instructions Cycles
   574                           ; simple_byte           13     7 (average)
   575                           ; direct_byte           32    11 (fixed)
   576                           ; jumptable            263     9 (fixed)
   577                           ;	Chosen strategy is simple_byte
   578  00D0  3A31               	xorlw	49	; case 49
   579  00D1  1903               	skipnz
   580  00D2  28A1               	goto	l878
   581  00D3  3A03               	xorlw	3	; case 50
   582  00D4  1903               	skipnz
   583  00D5  28AF               	goto	l880
   584  00D6  3A07               	xorlw	7	; case 53
   585  00D7  1903               	skipnz
   586  00D8  2898               	goto	l876
   587  00D9  3A02               	xorlw	2	; case 55
   588  00DA  1903               	skipnz
   589  00DB  2892               	goto	l874
   590  00DC  28DD               	goto	l892
   591  00DD                     l892:	
   592                           
   593                           ;main.c: 123: RC = 0;
   594  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   595  00DE  1303               	bcf	3,6	;RP1=0, select bank0
   596  00DF  01C4               	clrf	_RC
   597  00E0                     l868:	
   598                           ;main.c: 113: while (1) {
   599                           
   600                           ;main.c: 124: }
   601                           
   602                           
   603                           ;main.c: 115: char x = rsget();
   604  00E0  120A  118A  2281  120A  118A  	fcall	_rsget
   605  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   606  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   607  00E7  00B7               	movwf	??_main
   608  00E8  0837               	movf	??_main,w
   609  00E9  00BA               	movwf	main@x
   610                           
   611                           ;main.c: 116: if (x == '\n') {
   612  00EA  300A               	movlw	10
   613  00EB  063A               	xorwf	main@x,w
   614  00EC  1903               	btfsc	3,2
   615  00ED  28CF               	goto	l890
   616                           
   617                           ;main.c: 125: else {
   618                           ;main.c: 126: BUF[RC] = x;
   619  00EE  083A               	movf	main@x,w
   620  00EF  00B7               	movwf	??_main
   621  00F0  0844               	movf	_RC,w
   622  00F1  3E20               	addlw	(low (_BUF| 0))& (0+255)
   623  00F2  0084               	movwf	4
   624  00F3  0837               	movf	??_main,w
   625  00F4  1383               	bcf	3,7	;select IRP bank0
   626  00F5  0080               	movwf	0
   627                           
   628                           ;main.c: 127: RC++;
   629  00F6  3001               	movlw	1
   630  00F7  00B7               	movwf	??_main
   631  00F8  0837               	movf	??_main,w
   632  00F9  07C4               	addwf	_RC,f
   633  00FA  28E0               	goto	l868
   634  00FB                     l898:	
   635                           ;main.c: 128: }
   636                           ;main.c: 129: }
   637                           ;main.c: 130: }
   638                           
   639                           
   640                           ;main.c: 132: else {
   641                           ;main.c: 133: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   642  00FB  3000               	movlw	0
   643  00FC  120A  118A  2174  120A  118A  	fcall	_beep
   644  0101  3082               	movlw	130
   645  0102  1283               	bcf	3,5	;RP0=0, select bank0
   646  0103  1303               	bcf	3,6	;RP1=0, select bank0
   647  0104  00B8               	movwf	??_main+1
   648  0105  30DD               	movlw	221
   649  0106  00B7               	movwf	??_main
   650  0107                     u357:	
   651  0107  0BB7               	decfsz	??_main,f
   652  0108  2907               	goto	u357
   653  0109  0BB8               	decfsz	??_main+1,f
   654  010A  2907               	goto	u357
   655                           
   656                           ;main.c: 134: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   657  010B  3001               	movlw	1
   658  010C  120A  118A  2174  120A  118A  	fcall	_beep
   659  0111  3082               	movlw	130
   660  0112  1283               	bcf	3,5	;RP0=0, select bank0
   661  0113  1303               	bcf	3,6	;RP1=0, select bank0
   662  0114  00B8               	movwf	??_main+1
   663  0115  30DD               	movlw	221
   664  0116  00B7               	movwf	??_main
   665  0117                     u367:	
   666  0117  0BB7               	decfsz	??_main,f
   667  0118  2917               	goto	u367
   668  0119  0BB8               	decfsz	??_main+1,f
   669  011A  2917               	goto	u367
   670  011B  293D               	goto	l904
   671  011C                     l910:	
   672                           
   673                           ;main.c: 140: PWMZOH = msg;
   674  011C  083B               	movf	main@msg,w
   675  011D  00B7               	movwf	??_main
   676  011E  0837               	movf	??_main,w
   677  011F  00C1               	movwf	_PWMZOH
   678                           
   679                           ;main.c: 141: rsend(T1FOH);
   680  0120  083F               	movf	_T1FOH,w	;volatile
   681  0121  120A  118A  2279  120A  118A  	fcall	_rsend
   682                           
   683                           ;main.c: 142: rsend(T1FOH >> 8);
   684  0126  1283               	bcf	3,5	;RP0=0, select bank0
   685  0127  1303               	bcf	3,6	;RP1=0, select bank0
   686  0128  0840               	movf	_T1FOH+1,w	;volatile
   687  0129  120A  118A  2279  120A  118A  	fcall	_rsend
   688                           
   689                           ;main.c: 143: }
   690  012E  293D               	goto	l904
   691  012F                     l918:	
   692                           
   693                           ;main.c: 145: T0PS = msg;
   694  012F  083B               	movf	main@msg,w
   695  0130  00B7               	movwf	??_main
   696  0131  0837               	movf	??_main,w
   697  0132  00C2               	movwf	_T0PS
   698                           
   699                           ;main.c: 146: kT0 = T0PS;
   700  0133  0842               	movf	_T0PS,w
   701  0134  00B7               	movwf	??_main
   702  0135  0837               	movf	??_main,w
   703  0136  00C3               	movwf	_kT0
   704                           
   705                           ;main.c: 147: TMR1 = 0;
   706  0137  018E               	clrf	14	;volatile
   707  0138  018F               	clrf	15	;volatile
   708  0139  1410               	bsf	16,0	;# 
   709  013A  0181               	clrf	1	;# 
   710  013B  0381               	decf	1,f	;# 
   711  013C  168B               	bsf	11,5	;# 
   712  013D                     l904:	
   713                           ;main.c: 135: while (1) {
   714                           
   715                           ;main.c: 152: }
   716                           
   717                           
   718                           ;main.c: 137: char cmd = rsget();
   719  013D  120A  118A  2281  120A  118A  	fcall	_rsget
   720  0142  1283               	bcf	3,5	;RP0=0, select bank0
   721  0143  1303               	bcf	3,6	;RP1=0, select bank0
   722  0144  00B7               	movwf	??_main
   723  0145  0837               	movf	??_main,w
   724  0146  00BC               	movwf	main@cmd
   725                           
   726                           ;main.c: 138: char msg = rsget();
   727  0147  120A  118A  2281  120A  118A  	fcall	_rsget
   728  014C  1283               	bcf	3,5	;RP0=0, select bank0
   729  014D  1303               	bcf	3,6	;RP1=0, select bank0
   730  014E  00B7               	movwf	??_main
   731  014F  0837               	movf	??_main,w
   732  0150  00BB               	movwf	main@msg
   733                           
   734                           ;main.c: 139: if (cmd == 'x') {
   735  0151  3078               	movlw	120
   736  0152  063C               	xorwf	main@cmd,w
   737  0153  1903               	btfsc	3,2
   738  0154  291C               	goto	l910
   739                           
   740                           ;main.c: 144: else if (cmd == 't') {
   741  0155  3074               	movlw	116
   742  0156  1283               	bcf	3,5	;RP0=0, select bank0
   743  0157  1303               	bcf	3,6	;RP1=0, select bank0
   744  0158  063C               	xorwf	main@cmd,w
   745  0159  1903               	btfsc	3,2
   746  015A  292F               	goto	l918
   747                           
   748                           ;main.c: 153: else if (cmd == 's') {
   749  015B  3073               	movlw	115
   750  015C  1283               	bcf	3,5	;RP0=0, select bank0
   751  015D  1303               	bcf	3,6	;RP1=0, select bank0
   752  015E  063C               	xorwf	main@cmd,w
   753  015F  1D03               	btfss	3,2
   754  0160  293D               	goto	l904
   755                           
   756                           ;main.c: 154: T1CON &= 0xFE;
   757  0161  30FE               	movlw	254
   758  0162  00B7               	movwf	??_main
   759  0163  0837               	movf	??_main,w
   760  0164  0590               	andwf	16,f	;volatile
   761                           
   762                           ;main.c: 155: INTCON &= 0xDF;
   763  0165  30DF               	movlw	223
   764  0166  00B7               	movwf	??_main
   765  0167  0837               	movf	??_main,w
   766  0168  058B               	andwf	11,f	;volatile
   767                           
   768                           ;main.c: 156: PWM = 0;
   769  0169  019B               	clrf	27
   770                           
   771                           ;main.c: 157: PWMZOH = 0;
   772  016A  01C1               	clrf	_PWMZOH
   773                           
   774                           ;main.c: 158: T1FOH = 0;
   775  016B  01BF               	clrf	_T1FOH	;volatile
   776  016C  01C0               	clrf	_T1FOH+1	;volatile
   777                           
   778                           ;main.c: 159: beep(0);
   779  016D  3000               	movlw	0
   780  016E  120A  118A  2174  120A  118A  	fcall	_beep
   781  0173  293D               	goto	l904
   782  0174                     __end_of_main:	
   783                           ;main.c: 160: }
   784                           ;main.c: 161: }
   785                           ;main.c: 162: }
   786                           ;main.c: 163: return 0;
   787                           ;	Return value of _main is never used
   788                           
   789                           
   790                           	psect	text1
   791  0245                     __ptext1:	
   792 ;; *************** function _write *****************
   793 ;; Defined at:
   794 ;;		line 61 in file "main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  duty            1    wreg     char 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;  duty            1    0[BANK0 ] char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         0       0       0       0       0
   809 ;;      Locals:         0       1       0       0       0
   810 ;;      Temps:          0       0       0       0       0
   811 ;;      Totals:         0       1       0       0       0
   812 ;;Total ram usage:        1 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _write
   824  0245                     _write:	
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _write: [wreg+status,2]
   828                           ;write@duty stored from wreg
   829  0245  1283               	bcf	3,5	;RP0=0, select bank0
   830  0246  1303               	bcf	3,6	;RP1=0, select bank0
   831  0247  00B1               	movwf	write@duty
   832                           
   833                           ;main.c: 62: if (duty > 100) PWM = 100;
   834  0248  0831               	movf	write@duty,w
   835  0249  3A80               	xorlw	128
   836  024A  3E1B               	addlw	-229
   837  024B  1C03               	skipc
   838  024C  2A50               	goto	l85
   839  024D  3064               	movlw	100
   840  024E  009B               	movwf	27
   841  024F  0008               	return
   842  0250                     l85:	
   843                           
   844                           ;main.c: 63: else if (duty < 0) PWM = 0;
   845  0250  1FB1               	btfss	write@duty,7
   846  0251  2A54               	goto	l812
   847  0252  019B               	clrf	27
   848  0253  0008               	return
   849  0254                     l812:	
   850                           
   851                           ;main.c: 64: else PWM = duty;
   852  0254  0831               	movf	write@duty,w
   853  0255  009B               	movwf	27
   854  0256  0008               	return
   855  0257                     __end_of_write:	
   856                           
   857                           	psect	text2
   858  0281                     __ptext2:	
   859 ;; *************** function _rsget *****************
   860 ;; Defined at:
   861 ;;		line 47 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;                  1    wreg      unsigned char 
   868 ;; Registers used:
   869 ;;		wreg
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   875 ;;      Params:         0       0       0       0       0
   876 ;;      Locals:         0       0       0       0       0
   877 ;;      Temps:          0       0       0       0       0
   878 ;;      Totals:         0       0       0       0       0
   879 ;;Total ram usage:        0 bytes
   880 ;; Hardware stack levels used:    1
   881 ;; Hardware stack levels required when called:    1
   882 ;; This function calls:
   883 ;;		Nothing
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           
   890                           ;psect for function _rsget
   891  0281                     _rsget:	
   892  0281                     l76:	
   893                           ;main.c: 48: while (!RCIF) continue;
   894                           
   895                           ;incstack = 0
   896                           ; Regs used in _rsget: [wreg]
   897                           
   898  0281  1283               	bcf	3,5	;RP0=0, select bank0
   899  0282  1303               	bcf	3,6	;RP1=0, select bank0
   900  0283  1E8C               	btfss	12,5	;volatile
   901  0284  2A81               	goto	l76
   902                           
   903                           ;main.c: 49: return RCREG;
   904  0285  081A               	movf	26,w	;volatile
   905  0286  0008               	return
   906  0287                     __end_of_rsget:	
   907                           
   908                           	psect	text3
   909  022C                     __ptext3:	
   910 ;; *************** function _read_tmr1 *****************
   911 ;; Defined at:
   912 ;;		line 54 in file "main.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0, pclath, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   926 ;;      Params:         0       0       0       0       0
   927 ;;      Locals:         0       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0
   929 ;;      Totals:         0       0       0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    2
   933 ;; This function calls:
   934 ;;		_rsend
   935 ;; This function is called by:
   936 ;;		_main
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           
   941                           ;psect for function _read_tmr1
   942  022C                     _read_tmr1:	
   943                           
   944                           ;main.c: 55: T1ZOH = TMR1;
   945                           
   946                           ;incstack = 0
   947                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   948  022C  1283               	bcf	3,5	;RP0=0, select bank0
   949  022D  1303               	bcf	3,6	;RP1=0, select bank0
   950  022E  080F               	movf	15,w	;volatile
   951  022F  00FD               	movwf	_T1ZOH+1
   952  0230  080E               	movf	14,w	;volatile
   953  0231  00FC               	movwf	_T1ZOH
   954                           
   955                           ;main.c: 56: rsend(T1ZOH >> 8);
   956  0232  087D               	movf	_T1ZOH+1,w
   957  0233  120A  118A  2279  120A  118A  	fcall	_rsend
   958                           
   959                           ;main.c: 57: rsend(T1ZOH);
   960  0238  087C               	movf	_T1ZOH,w
   961  0239  120A  118A  2279   	fcall	_rsend
   962                           
   963                           ;main.c: 58: TMR1 -= T1ZOH;
   964  023C  087C               	movf	_T1ZOH,w
   965  023D  1283               	bcf	3,5	;RP0=0, select bank0
   966  023E  1303               	bcf	3,6	;RP1=0, select bank0
   967  023F  028E               	subwf	14,f	;volatile
   968  0240  087D               	movf	_T1ZOH+1,w
   969  0241  1C03               	skipc
   970  0242  038F               	decf	15,f	;volatile
   971  0243  028F               	subwf	15,f	;volatile
   972  0244  0008               	return
   973  0245                     __end_of_read_tmr1:	
   974                           
   975                           	psect	text4
   976  0279                     __ptext4:	
   977 ;; *************** function _rsend *****************
   978 ;; Defined at:
   979 ;;		line 42 in file "main.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  msg             1    wreg     unsigned char 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  msg             1    0[BANK0 ] unsigned char 
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   993 ;;      Params:         0       0       0       0       0
   994 ;;      Locals:         0       1       0       0       0
   995 ;;      Temps:          0       0       0       0       0
   996 ;;      Totals:         0       1       0       0       0
   997 ;;Total ram usage:        1 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    1
  1000 ;; This function calls:
  1001 ;;		Nothing
  1002 ;; This function is called by:
  1003 ;;		_read_tmr1
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _rsend
  1010  0279                     _rsend:	
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _rsend: [wreg]
  1014                           ;rsend@msg stored from wreg
  1015  0279  1283               	bcf	3,5	;RP0=0, select bank0
  1016  027A  1303               	bcf	3,6	;RP1=0, select bank0
  1017  027B  00B1               	movwf	rsend@msg
  1018  027C                     l70:	
  1019                           ;main.c: 43: while (!TXIF) continue;
  1020                           
  1021  027C  1E0C               	btfss	12,4	;volatile
  1022  027D  2A7C               	goto	l70
  1023                           
  1024                           ;main.c: 44: TXREG = msg;
  1025  027E  0831               	movf	rsend@msg,w
  1026  027F  0099               	movwf	25	;volatile
  1027  0280  0008               	return
  1028  0281                     __end_of_rsend:	
  1029                           
  1030                           	psect	text5
  1031  0174                     __ptext5:	
  1032 ;; *************** function _beep *****************
  1033 ;; Defined at:
  1034 ;;		line 31 in file "main.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  dash            1    wreg     unsigned char 
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  dash            1    1[BANK0 ] unsigned char 
  1039 ;;  j               2    4[BANK0 ] int 
  1040 ;;  j               2    2[BANK0 ] int 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2, status,0, btemp+1
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1050 ;;      Params:         0       0       0       0       0
  1051 ;;      Locals:         0       5       0       0       0
  1052 ;;      Temps:          0       1       0       0       0
  1053 ;;      Totals:         0       6       0       0       0
  1054 ;;Total ram usage:        6 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           
  1065                           ;psect for function _beep
  1066  0174                     _beep:	
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1070                           ;beep@dash stored from wreg
  1071  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1072  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1073  0176  00B2               	movwf	beep@dash
  1074                           
  1075                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1076  0177  0832               	movf	beep@dash,w
  1077  0178  1D03               	btfss	3,2
  1078  0179  29A5               	goto	l782
  1079  017A  01B3               	clrf	beep@j
  1080  017B  01B4               	clrf	beep@j+1
  1081  017C                     L1:	
  1082  017C  0834               	movf	beep@j+1,w
  1083  017D  3A80               	xorlw	128
  1084  017E  00FF               	movwf	127
  1085  017F  3080               	movlw	128
  1086  0180  027F               	subwf	127,w
  1087  0181  1D03               	skipz
  1088  0182  2985               	goto	u185
  1089  0183  3064               	movlw	100
  1090  0184  0233               	subwf	beep@j,w
  1091  0185                     u185:	
  1092  0185  1803               	btfsc	3,0
  1093  0186  0008               	return
  1094                           
  1095                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1096  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0189  1685               	bsf	5,5
  1099  018A  30C7               	movlw	199
  1100  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1101  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1102  018D  00B1               	movwf	??_beep
  1103  018E                     u377:	
  1104  018E  298F               	nop2
  1105  018F  0BB1               	decfsz	??_beep,f
  1106  0190  298E               	goto	u377
  1107  0191  2992               	nop2
  1108                           
  1109                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1110  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0194  1285               	bcf	5,5
  1113  0195  30A5               	movlw	165
  1114  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1115  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1116  0198  00B1               	movwf	??_beep
  1117  0199                     u387:	
  1118  0199  0BB1               	decfsz	??_beep,f
  1119  019A  2999               	goto	u387
  1120  019B  299C               	nop2
  1121  019C  3001               	movlw	1
  1122  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1123  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1124  019F  07B3               	addwf	beep@j,f
  1125  01A0  1803               	skipnc
  1126  01A1  0AB4               	incf	beep@j+1,f
  1127  01A2  3000               	movlw	0
  1128  01A3  07B4               	addwf	beep@j+1,f
  1129  01A4  297C               	goto	L1
  1130  01A5                     l782:	
  1131                           ;main.c: 35: }
  1132                           
  1133                           
  1134                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1135  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1136  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1137  01A7  01B5               	clrf	beep@j_56
  1138  01A8  01B6               	clrf	beep@j_56+1
  1139  01A9                     L2:	
  1140  01A9  0836               	movf	beep@j_56+1,w
  1141  01AA  3A80               	xorlw	128
  1142  01AB  00FF               	movwf	127
  1143  01AC  3081               	movlw	129
  1144  01AD  027F               	subwf	127,w
  1145  01AE  1D03               	skipz
  1146  01AF  29B2               	goto	u205
  1147  01B0  30F4               	movlw	244
  1148  01B1  0235               	subwf	beep@j_56,w
  1149  01B2                     u205:	
  1150  01B2  1803               	btfsc	3,0
  1151  01B3  0008               	return
  1152                           
  1153                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1154  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1155  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1156  01B6  1685               	bsf	5,5
  1157  01B7  30C7               	movlw	199
  1158  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1159  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1160  01BA  00B1               	movwf	??_beep
  1161  01BB                     u397:	
  1162  01BB  29BC               	nop2
  1163  01BC  0BB1               	decfsz	??_beep,f
  1164  01BD  29BB               	goto	u397
  1165  01BE  29BF               	nop2
  1166                           
  1167                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1168  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1169  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1170  01C1  1285               	bcf	5,5
  1171  01C2  30A5               	movlw	165
  1172  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1173  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1174  01C5  00B1               	movwf	??_beep
  1175  01C6                     u407:	
  1176  01C6  0BB1               	decfsz	??_beep,f
  1177  01C7  29C6               	goto	u407
  1178  01C8  29C9               	nop2
  1179  01C9  3001               	movlw	1
  1180  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1181  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1182  01CC  07B5               	addwf	beep@j_56,f
  1183  01CD  1803               	skipnc
  1184  01CE  0AB6               	incf	beep@j_56+1,f
  1185  01CF  3000               	movlw	0
  1186  01D0  07B6               	addwf	beep@j_56+1,f
  1187  01D1  29A9               	goto	L2
  1188  01D2                     __end_of_beep:	
  1189                           
  1190                           	psect	text6
  1191  01D2                     __ptext6:	
  1192 ;; *************** function _oversampling *****************
  1193 ;; Defined at:
  1194 ;;		line 73 in file "main.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0
  1210 ;;      Temps:         10       0       0       0       0
  1211 ;;      Totals:        10       0       0       0       0
  1212 ;;Total ram usage:       10 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; This function calls:
  1215 ;;		Nothing
  1216 ;; This function is called by:
  1217 ;;		Interrupt level 1
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           
  1222                           ;psect for function _oversampling
  1223  01D2                     _oversampling:	
  1224                           
  1225                           ;main.c: 74: kT0++;
  1226  01D2  3001               	movlw	1
  1227  01D3  00F0               	movwf	??_oversampling
  1228  01D4  0870               	movf	??_oversampling,w
  1229  01D5  07C3               	addwf	_kT0,f
  1230                           
  1231                           ;main.c: 75: if (kT0 > T0PS) {
  1232  01D6  0843               	movf	_kT0,w
  1233  01D7  0242               	subwf	_T0PS,w
  1234  01D8  1803               	skipnc
  1235  01D9  29E8               	goto	i1l826
  1236                           
  1237                           ;main.c: 76: kT0 = 0;
  1238  01DA  01C3               	clrf	_kT0
  1239                           
  1240                           ;main.c: 77: T1FOH = TMR1;
  1241  01DB  080F               	movf	15,w	;volatile
  1242  01DC  00C0               	movwf	_T1FOH+1	;volatile
  1243  01DD  080E               	movf	14,w	;volatile
  1244  01DE  00BF               	movwf	_T1FOH	;volatile
  1245                           
  1246                           ;main.c: 78: PWM = PWMZOH;
  1247  01DF  0841               	movf	_PWMZOH,w
  1248  01E0  009B               	movwf	27
  1249                           
  1250                           ;main.c: 79: TMR1 -= T1FOH;
  1251  01E1  083F               	movf	_T1FOH,w	;volatile
  1252  01E2  028E               	subwf	14,f	;volatile
  1253  01E3  0840               	movf	_T1FOH+1,w	;volatile
  1254  01E4  1C03               	skipc
  1255  01E5  038F               	decf	15,f	;volatile
  1256  01E6  028F               	subwf	15,f	;volatile
  1257                           
  1258                           ;main.c: 80: }
  1259  01E7  2A1C               	goto	i1l828
  1260  01E8                     i1l826:	
  1261                           
  1262                           ;main.c: 81: else {
  1263                           ;main.c: 82: T1FOH = T1FOH + ((TMR1 - TMR1R) - T1ACC);
  1264  01E8  083D               	movf	_T1ACC,w
  1265  01E9  077A               	addwf	_TMR1R,w
  1266  01EA  00F0               	movwf	??_oversampling
  1267  01EB  083E               	movf	_T1ACC+1,w
  1268  01EC  1803               	skipnc
  1269  01ED  0A3E               	incf	_T1ACC+1,w
  1270  01EE  077B               	addwf	_TMR1R+1,w
  1271  01EF  00F1               	movwf	??_oversampling+1
  1272  01F0  09F0               	comf	??_oversampling,f
  1273  01F1  09F1               	comf	??_oversampling+1,f
  1274  01F2  0AF0               	incf	??_oversampling,f
  1275  01F3  1903               	skipnz
  1276  01F4  0AF1               	incf	??_oversampling+1,f
  1277  01F5  080E               	movf	14,w	;volatile
  1278  01F6  0770               	addwf	??_oversampling,w
  1279  01F7  00F2               	movwf	??_oversampling+2
  1280  01F8  080F               	movf	15,w	;volatile
  1281  01F9  1803               	skipnc
  1282  01FA  0A0F               	incf	15,w	;volatile
  1283  01FB  0771               	addwf	??_oversampling+1,w
  1284  01FC  00F3               	movwf	??_oversampling+3
  1285  01FD  083F               	movf	_T1FOH,w	;volatile
  1286  01FE  0772               	addwf	??_oversampling+2,w
  1287  01FF  00F4               	movwf	??_oversampling+4
  1288  0200  0840               	movf	_T1FOH+1,w	;volatile
  1289  0201  1803               	skipnc
  1290  0202  0A40               	incf	_T1FOH+1,w	;volatile
  1291  0203  0773               	addwf	??_oversampling+3,w
  1292  0204  00F5               	movwf	??_oversampling+5
  1293  0205  0874               	movf	??_oversampling+4,w
  1294  0206  00BF               	movwf	_T1FOH	;volatile
  1295  0207  0875               	movf	??_oversampling+5,w
  1296  0208  00C0               	movwf	_T1FOH+1	;volatile
  1297                           
  1298                           ;main.c: 83: T1ACC = TMR1 - TMR1R;
  1299  0209  097A               	comf	_TMR1R,w
  1300  020A  00F0               	movwf	??_oversampling
  1301  020B  097B               	comf	_TMR1R+1,w
  1302  020C  00F1               	movwf	??_oversampling+1
  1303  020D  0AF0               	incf	??_oversampling,f
  1304  020E  1903               	skipnz
  1305  020F  0AF1               	incf	??_oversampling+1,f
  1306  0210  080E               	movf	14,w	;volatile
  1307  0211  0770               	addwf	??_oversampling,w
  1308  0212  00F2               	movwf	??_oversampling+2
  1309  0213  080F               	movf	15,w	;volatile
  1310  0214  1803               	skipnc
  1311  0215  0A0F               	incf	15,w	;volatile
  1312  0216  0771               	addwf	??_oversampling+1,w
  1313  0217  00F3               	movwf	??_oversampling+3
  1314  0218  0872               	movf	??_oversampling+2,w
  1315  0219  00BD               	movwf	_T1ACC
  1316  021A  0873               	movf	??_oversampling+3,w
  1317  021B  00BE               	movwf	_T1ACC+1
  1318  021C                     i1l828:	
  1319                           
  1320                           ;main.c: 84: }
  1321                           ;main.c: 85: TMR1R = TMR1;
  1322  021C  080F               	movf	15,w	;volatile
  1323  021D  00FB               	movwf	_TMR1R+1
  1324  021E  080E               	movf	14,w	;volatile
  1325  021F  00FA               	movwf	_TMR1R
  1326                           
  1327                           ;main.c: 86: TMR0IF = 0;
  1328  0220  110B               	bcf	11,2	;volatile
  1329  0221  0879               	movf	??_oversampling+9,w
  1330  0222  00FF               	movwf	127
  1331  0223  0878               	movf	??_oversampling+8,w
  1332  0224  008A               	movwf	10
  1333  0225  0877               	movf	??_oversampling+7,w
  1334  0226  0084               	movwf	4
  1335  0227  0E76               	swapf	(??_oversampling+6)^(0+-128),w
  1336  0228  0083               	movwf	3
  1337  0229  0EFE               	swapf	126,f
  1338  022A  0E7E               	swapf	126,w
  1339  022B  0009               	retfie
  1340  022C                     __end_of_oversampling:	
  1341  007E                     btemp	set	126	;btemp
  1342  007E                     wtemp0	set	126
  1343                           
  1344                           	psect	intentry
  1345  0004                     __pintentry:	
  1346                           ;incstack = 0
  1347                           ; Regs used in _oversampling: [wreg+status,2+status,0]
  1348                           
  1349  0004                     interrupt_function:	
  1350  007E                     saved_w	set	btemp
  1351  0004  00FE               	movwf	btemp
  1352  0005  0E03               	swapf	3,w
  1353  0006  00F6               	movwf	??_oversampling+6
  1354  0007  0804               	movf	4,w
  1355  0008  00F7               	movwf	??_oversampling+7
  1356  0009  080A               	movf	10,w
  1357  000A  00F8               	movwf	??_oversampling+8
  1358  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1359  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1360  000D  087F               	movf	btemp+1,w
  1361  000E  00F9               	movwf	??_oversampling+9
  1362  000F  120A  118A  29D2   	ljmp	_oversampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     12      37
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _oversampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep
    _read_tmr1->_rsend

Critical Paths under _oversampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _oversampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _oversampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _oversampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     381
                                              6 BANK0      6     6      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _oversampling                                        10    10      0       0
                                              0 COMMON    10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _oversampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      25       5       46.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      33      12        0.0%
ABS                  0      0      33       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Jan  3 12:50:05 2018

                      pc 0002              __CFG_CP$OFF 0000                       l70 027C  
                     l76 0281                       l85 0250                       _RC 0044  
                     fsr 0004                      TMR0 0001                      l812 0254  
                    l910 011C                      l904 013D                      l782 01A5  
                    l918 012F                      l880 00AF                      l874 0092  
                    l890 00CF                      l876 0098                      l892 00DD  
                    l868 00E0                      l878 00A1                      l898 00FB  
                    _BUF 0020                      _BUZ 002D                      u205 01B2  
                    u317 006D                      _PR2 0092                      u407 01C6  
                    u327 007D                      u185 0185                      u337 008D  
           __CFG_CPD$OFF 0000                      u347 00BD                      u357 0107  
                    u367 0117                      u377 018E                      u387 0199  
                    u397 01BB                      _PWM 001B                      _kT0 0043  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
                   T1CON 0010             __CFG_LVP$OFF 0000                     _T0PS 0042  
                   _RCIF 0065                     _TMR1 000E                     _TXIF 0064  
           __CFG_WRT$OFF 0000                     _beep 0174                     _main 0031  
                   btemp 007E                     start 0012                    INTCON 000B  
                  ?_beep 0070                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _T1ACC 003D                    _T1CON 0010                    _T1FOH 003F  
                  _T2CON 0012                    _T1ZOH 007C                    i1l826 01E8  
                  i1l828 021C                    _RCREG 001A                    _RCSTA 0018  
                  _SPBRG 0099                    _TMR1R 007A                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TXREG 0019                    _TXSTA 0098                    beep@j 0033  
                  _rsend 0279                    _rsget 0281                    main@x 003A  
                  _write 0245           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0015  
           __end_of_beep 01D2             __end_of_main 0174                   ??_beep 0031  
                 ??_main 0037                   _ADCON1 009F                   _CCPR1L 0015  
                 _CCPR2L 001B                   ?_rsend 0070                   ?_rsget 0070  
                 ?_write 0070                   _INTCON 000B                   _TMR0IF 005A  
                 _PWMZOH 0041           __CFG_PWRTE$OFF 0000                   saved_w 007E  
__end_of__initialization 002D           __pcstackCOMMON 0070             __pidataBANK0 0257  
          __end_of_rsend 0281            __end_of_rsget 0287            __end_of_write 0257  
                ??_rsend 0031                  ??_rsget 0031                  ??_write 0031  
             __pbssBANK0 003D       __size_of_read_tmr1 0019               __pmaintext 0031  
             __pintentry 0004                  _CCP1CON 0017                  _CCP2CON 001D  
                __ptext1 0245                  __ptext2 0281                  __ptext3 022C  
                __ptext4 0279                  __ptext5 0174                  __ptext6 01D2  
      __end_of_read_tmr1 0245                  main@cmd 003C                  main@msg 003B  
   end_of_initialization 002D            ?_oversampling 0070      start_initialization 0015  
         ??_oversampling 0070               init_fetch0 0268              __pdataBANK0 0020  
            __pbssCOMMON 007A                ___latbits 0002            __pcstackBANK0 0031  
              _read_tmr1 022C           __size_of_rsend 0008           __size_of_rsget 0006  
         __size_of_write 0012        interrupt_function 0004     __end_of_oversampling 022C  
             ?_read_tmr1 0070                 beep@j_56 0035                 beep@dash 0032  
          __size_of_beep 005E            __size_of_main 0143                 init_ram0 026C  
            ??_read_tmr1 0032                 intlevel1 0000                write@duty 0031  
  __size_of_oversampling 005A                 rsend@msg 0031               _OPTION_REG 0081  
           _oversampling 01D2  
