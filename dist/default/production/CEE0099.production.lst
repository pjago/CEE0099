

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 17 17:43:25 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 1.43
    36                           ; Generated 25/07/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F877A Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129                           
   130                           	psect	idataBANK0
   131  07F4                     __pidataBANK0:	
   132                           
   133                           ;initializer for _FAN
   134  07F4  34FF               	retlw	255
   135  07F5  34FF               	retlw	255
   136  07F6  3400               	retlw	0
   137  07F7  3400               	retlw	0
   138  07F8  3400               	retlw	0
   139  07F9  3400               	retlw	0
   140  07FA  3407               	retlw	7
   141  07FB  3400               	retlw	0
   142  07FC  3488               	retlw	136
   143  07FD  3413               	retlw	19
   144                           
   145                           	psect	strings
   146  0662                     __pstrings:	
   147  0662                     stringtab:	
   148  0662                     __stringtab:	
   149  0662                     stringcode:	
   150                           ;	String table - string pointers are 1 byte each
   151                           
   152  0662                     stringdir:	
   153  0662  3006               	movlw	high stringdir
   154  0663  008A               	movwf	10
   155  0664  0804               	movf	4,w
   156  0665  0A84               	incf	4,f
   157  0666  0782               	addwf	2,f
   158  0667                     __stringbase:	
   159  0667  3400               	retlw	0
   160  0668                     __end_of__stringtab:	
   161  0668                     _dpowers:	
   162  0668  3401               	retlw	1
   163  0669  3400               	retlw	0
   164  066A  340A               	retlw	10
   165  066B  3400               	retlw	0
   166  066C  3464               	retlw	100
   167  066D  3400               	retlw	0
   168  066E  34E8               	retlw	232
   169  066F  3403               	retlw	3
   170  0670  3410               	retlw	16
   171  0671  3427               	retlw	39
   172  0672                     __end_of_dpowers:	
   173  0672                     _BAUD:	
   174  0672  3400               	retlw	0
   175  0673  344B               	retlw	75
   176  0674  3400               	retlw	0
   177  0675  3400               	retlw	0
   178  0676                     __end_of_BAUD:	
   179  0676                     _IFOSC:	
   180  0676  3440               	retlw	64
   181  0677  3442               	retlw	66
   182  0678  340F               	retlw	15
   183  0679  3400               	retlw	0
   184  067A                     __end_of_IFOSC:	
   185  067A                     _RPSMIN:	
   186  067A  3408               	retlw	8
   187  067B  3400               	retlw	0
   188  067C                     __end_of_RPSMIN:	
   189  067C                     _T1FOSC:	
   190  067C  3400               	retlw	0
   191  067D  3410               	retlw	16
   192  067E                     __end_of_T1FOSC:	
   193  067E                     STR_1:	
   194  067E  344C               	retlw	76	;'L'
   195  067F  3441               	retlw	65	;'A'
   196  0680  3442               	retlw	66	;'B'
   197  0681  342E               	retlw	46	;'.'
   198  0682  3443               	retlw	67	;'C'
   199  0683  344F               	retlw	79	;'O'
   200  0684  344E               	retlw	78	;'N'
   201  0685  3454               	retlw	84	;'T'
   202  0686  342E               	retlw	46	;'.'
   203  0687  3444               	retlw	68	;'D'
   204  0688  3449               	retlw	73	;'I'
   205  0689  3447               	retlw	71	;'G'
   206  068A  3449               	retlw	73	;'I'
   207  068B  3454               	retlw	84	;'T'
   208  068C  3441               	retlw	65	;'A'
   209  068D  344C               	retlw	76	;'L'
   210  068E  3400               	retlw	0
   211  068F                     STR_2:	
   212  068F  3453               	retlw	83	;'S'
   213  0690  3465               	retlw	101	;'e'
   214  0691  346A               	retlw	106	;'j'
   215  0692  3461               	retlw	97	;'a'
   216  0693  3420               	retlw	32	;' '
   217  0694  3442               	retlw	66	;'B'
   218  0695  3465               	retlw	101	;'e'
   219  0696  346D               	retlw	109	;'m'
   220  0697  342D               	retlw	45	;'-'
   221  0698  3456               	retlw	86	;'V'
   222  0699  3469               	retlw	105	;'i'
   223  069A  346E               	retlw	110	;'n'
   224  069B  3464               	retlw	100	;'d'
   225  069C  346F               	retlw	111	;'o'
   226  069D  3421               	retlw	33	;'!'
   227  069E  3400               	retlw	0
   228  069F                     STR_4:	
   229  069F  3470               	retlw	112	;'p'
   230  06A0  3477               	retlw	119	;'w'
   231  06A1  346D               	retlw	109	;'m'
   232  06A2  343A               	retlw	58	;':'
   233  06A3  3420               	retlw	32	;' '
   234  06A4  3425               	retlw	37	;'%'
   235  06A5  3433               	retlw	51	;'3'
   236  06A6  3464               	retlw	100	;'d'
   237  06A7  3425               	retlw	37	;'%'
   238  06A8  3425               	retlw	37	;'%'
   239  06A9  3400               	retlw	0
   240  06AA                     STR_3:	
   241  06AA  3462               	retlw	98	;'b'
   242  06AB  3470               	retlw	112	;'p'
   243  06AC  3473               	retlw	115	;'s'
   244  06AD  343A               	retlw	58	;':'
   245  06AE  3420               	retlw	32	;' '
   246  06AF  3425               	retlw	37	;'%'
   247  06B0  3433               	retlw	51	;'3'
   248  06B1  3475               	retlw	117	;'u'
   249  06B2  3400               	retlw	0
   250  06B3                     STR_6:	
   251  06B3  3425               	retlw	37	;'%'
   252  06B4  3464               	retlw	100	;'d'
   253  06B5  3400               	retlw	0
   254  06B6                     STR_5:	
   255  06B6  3425               	retlw	37	;'%'
   256  06B7  3475               	retlw	117	;'u'
   257  06B8  3400               	retlw	0
   258                           
   259                           ; #config settings
   260  0000                     
   261                           	psect	bitnvCOMMON
   262  03C8                     __pbitnvCOMMON:	
   263  03C8                     _PUT:	
   264  03C8                     	ds	1
   265  0008                     _LCD	set	8
   266  000E                     _TMR1	set	14
   267  0015                     _PWM	set	21
   268  0018                     _RCSTA	set	24
   269  000B                     _INTCON	set	11
   270  0012                     _T2CON	set	18
   271  0015                     _CCPR1L	set	21
   272  0017                     _CCP1CON	set	23
   273  0010                     _T1CON	set	16
   274  0001                     _TMR0	set	1
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  002D                     _BUZ	set	45
   278  0059                     _INTF	set	89
   279  0065                     _RCIF	set	101
   280  0064                     _TXIF	set	100
   281  0099                     _SPBRG	set	153
   282  0098                     _TXSTA	set	152
   283  0085                     _TRISA	set	133
   284  0089                     _TRISE	set	137
   285  0088                     _TRISD	set	136
   286  0086                     _TRISB	set	134
   287  0081                     _OPTION_REG	set	129
   288  0087                     _TRISC	set	135
   289  0092                     _PR2	set	146
   290                           
   291                           	psect	cinit
   292  0015                     start_initialization:	
   293  0015                     __initialization:	
   294                           
   295                           ; Initialize objects allocated to BANK0
   296  0015  1383               	bcf	3,7	;select IRP bank0
   297  0016  3064               	movlw	low (__pdataBANK0+10)
   298  0017  00FD               	movwf	btemp+-1
   299  0018  3007               	movlw	high __pidataBANK0
   300  0019  00FE               	movwf	btemp
   301  001A  30F4               	movlw	low __pidataBANK0
   302  001B  00FF               	movwf	btemp+1
   303  001C  305A               	movlw	low __pdataBANK0
   304  001D  0084               	movwf	4
   305  001E  120A  158A  27E1   	fcall	init_ram0
   306  0021                     end_of_initialization:	
   307                           ;End of C runtime variable initialization code
   308                           
   309  0021                     __end_of__initialization:	
   310  0021  0183               	clrf	3
   311  0022  120A  118A  2C32   	ljmp	_main	;jump to C main() function
   312                           
   313                           	psect	dataBANK0
   314  005A                     __pdataBANK0:	
   315  005A                     _FAN:	
   316  005A                     	ds	10
   317                           
   318                           	psect	inittext
   319  0FDD                     init_fetch0:	
   320                           ;	Called with low address in FSR and high address in W
   321                           
   322  0FDD  087E               	movf	126,w
   323  0FDE  008A               	movwf	10
   324  0FDF  087F               	movf	127,w
   325  0FE0  0082               	movwf	2
   326  0FE1                     init_ram0:	
   327                           ;Called with:
   328                           ;	high address of idata address in btemp 
   329                           ;	low address of idata address in btemp+1 
   330                           ;	low address of data in FSR
   331                           ;	high address + 1 of data in btemp-1
   332                           
   333  0FE1  27DD  120A  158A   	fcall	init_fetch0
   334  0FE4  0080               	movwf	0
   335  0FE5  0A84               	incf	4,f
   336  0FE6  0804               	movf	4,w
   337  0FE7  067D               	xorwf	125,w
   338  0FE8  1903               	btfsc	3,2
   339  0FE9  3400               	retlw	0
   340  0FEA  0AFF               	incf	127,f
   341  0FEB  1903               	btfsc	3,2
   342  0FEC  0AFE               	incf	126,f
   343  0FED  2FE1               	goto	init_ram0
   344                           
   345                           	psect	cstackCOMMON
   346  0070                     __pcstackCOMMON:	
   347  0070                     ?_isdigit:	
   348  0070                     ?_beep:	
   349                           ; 1 bit 
   350                           
   351  0070                     ?_putch:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_getch:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_prog_lcd:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_init_lcd:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_raycast_intersection_cleared:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ??_raycast_intersection_cleared:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_read_tmr1:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_read_tmr0:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_write:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_io_switch:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_main:	
   382                           ; 1 bytes @ 0x0
   383                           
   384                           
   385                           ; 2 bytes @ 0x0
   386  0070                     	ds	4
   387  0074                     ??_isdigit:	
   388  0074                     ??_getch:	
   389                           ; 1 bytes @ 0x4
   390                           
   391  0074                     ??_write:	
   392                           ; 1 bytes @ 0x4
   393                           
   394  0074                     ??___lldiv:	
   395                           ; 1 bytes @ 0x4
   396                           
   397  0074                     ?___lwdiv:	
   398                           ; 1 bytes @ 0x4
   399                           
   400  0074                     write@duty:	
   401                           ; 2 bytes @ 0x4
   402                           
   403  0074                     _isdigit$358:	
   404                           ; 1 bytes @ 0x4
   405                           
   406  0074                     ___lwdiv@divisor:	
   407                           ; 1 bytes @ 0x4
   408                           
   409                           
   410                           ; 2 bytes @ 0x4
   411  0074                     	ds	1
   412  0075                     ??_beep:	
   413  0075                     ??_putch:	
   414                           ; 1 bytes @ 0x5
   415                           
   416  0075                     ??_prog_lcd:	
   417                           ; 1 bytes @ 0x5
   418                           
   419  0075                     isdigit@c:	
   420                           ; 1 bytes @ 0x5
   421                           
   422                           
   423                           ; 1 bytes @ 0x5
   424  0075                     	ds	1
   425  0076                     ___lwdiv@dividend:	
   426                           
   427                           ; 2 bytes @ 0x6
   428  0076                     	ds	2
   429  0078                     ??___lwdiv:	
   430                           
   431                           ; 1 bytes @ 0x8
   432  0078                     	ds	1
   433  0079                     ??_io_switch:	
   434  0079                     ??___wmul:	
   435                           ; 1 bytes @ 0x9
   436                           
   437                           
   438                           	psect	cstackBANK0
   439  0020                     __pcstackBANK0:	
   440                           ; 1 bytes @ 0x9
   441                           
   442  0020                     ?___lldiv:	
   443  0020                     ___lwdiv@quotient:	
   444                           ; 4 bytes @ 0x0
   445                           
   446  0020                     ___lldiv@divisor:	
   447                           ; 2 bytes @ 0x0
   448                           
   449                           
   450                           ; 4 bytes @ 0x0
   451  0020                     	ds	2
   452  0022                     ___lwdiv@counter:	
   453                           
   454                           ; 1 bytes @ 0x2
   455  0022                     	ds	1
   456  0023                     ?___wmul:	
   457  0023                     ?___lwmod:	
   458                           ; 2 bytes @ 0x3
   459                           
   460  0023                     ___wmul@multiplier:	
   461                           ; 2 bytes @ 0x3
   462                           
   463  0023                     ___lwmod@divisor:	
   464                           ; 2 bytes @ 0x3
   465                           
   466                           
   467                           ; 2 bytes @ 0x3
   468  0023                     	ds	1
   469  0024                     ___lldiv@dividend:	
   470                           
   471                           ; 4 bytes @ 0x4
   472  0024                     	ds	1
   473  0025                     ___wmul@multiplicand:	
   474  0025                     ___lwmod@dividend:	
   475                           ; 2 bytes @ 0x5
   476                           
   477                           
   478                           ; 2 bytes @ 0x5
   479  0025                     	ds	2
   480  0027                     ??___lwmod:	
   481  0027                     ___wmul@product:	
   482                           ; 1 bytes @ 0x7
   483                           
   484                           
   485                           ; 2 bytes @ 0x7
   486  0027                     	ds	1
   487  0028                     ___lwmod@counter:	
   488  0028                     ___lldiv@quotient:	
   489                           ; 1 bytes @ 0x8
   490                           
   491                           
   492                           ; 4 bytes @ 0x8
   493  0028                     	ds	1
   494  0029                     ?_rps_timer1:	
   495  0029                     rps_timer1@x:	
   496                           ; 10 bytes @ 0x9
   497                           
   498                           
   499                           ; 10 bytes @ 0x9
   500  0029                     	ds	3
   501  002C                     ___lldiv@counter:	
   502                           
   503                           ; 1 bytes @ 0xC
   504  002C                     	ds	1
   505  002D                     putch@msg:	
   506  002D                     prog_lcd@msg:	
   507                           ; 1 bytes @ 0xD
   508                           
   509  002D                     beep@j:	
   510                           ; 1 bytes @ 0xD
   511                           
   512                           
   513                           ; 2 bytes @ 0xD
   514  002D                     	ds	1
   515  002E                     ?_printf:	
   516                           
   517                           ; 2 bytes @ 0xE
   518  002E                     	ds	2
   519  0030                     ??_printf:	
   520                           
   521                           ; 1 bytes @ 0x10
   522  0030                     	ds	3
   523  0033                     printf@cp:	
   524  0033                     rps_timer1@t:	
   525                           ; 1 bytes @ 0x13
   526                           
   527                           
   528                           ; 2 bytes @ 0x13
   529  0033                     	ds	1
   530  0034                     printf@prec:	
   531                           
   532                           ; 1 bytes @ 0x14
   533  0034                     	ds	1
   534  0035                     ??_rps_timer1:	
   535  0035                     printf@ap:	
   536                           ; 1 bytes @ 0x15
   537                           
   538                           
   539                           ; 1 bytes @ 0x15
   540  0035                     	ds	1
   541  0036                     printf@len:	
   542                           
   543                           ; 2 bytes @ 0x16
   544  0036                     	ds	2
   545  0038                     printf@flag:	
   546                           
   547                           ; 1 bytes @ 0x18
   548  0038                     	ds	1
   549  0039                     printf@val:	
   550  0039                     _rps_timer1$588:	
   551                           ; 2 bytes @ 0x19
   552                           
   553                           
   554                           ; 2 bytes @ 0x19
   555  0039                     	ds	2
   556  003B                     printf@f:	
   557                           
   558                           ; 1 bytes @ 0x1B
   559  003B                     	ds	1
   560  003C                     printf@width:	
   561                           
   562                           ; 2 bytes @ 0x1C
   563  003C                     	ds	2
   564  003E                     printf@c:	
   565                           
   566                           ; 1 bytes @ 0x1E
   567  003E                     	ds	1
   568  003F                     ??_init_lcd:	
   569  003F                     ?_main_lcd:	
   570                           ; 1 bytes @ 0x1F
   571                           
   572  003F                     ??_read_tmr1:	
   573                           ; 1 bytes @ 0x1F
   574                           
   575  003F                     ??_read_tmr0:	
   576                           ; 1 bytes @ 0x1F
   577                           
   578  003F                     main_lcd@value:	
   579                           ; 1 bytes @ 0x1F
   580                           
   581                           
   582                           ; 2 bytes @ 0x1F
   583  003F                     	ds	2
   584  0041                     main_lcd@duty:	
   585                           
   586                           ; 1 bytes @ 0x21
   587  0041                     	ds	1
   588  0042                     ??_main_lcd:	
   589                           
   590                           ; 1 bytes @ 0x22
   591  0042                     	ds	5
   592  0047                     io_switch@x:	
   593                           
   594                           ; 1 bytes @ 0x27
   595  0047                     	ds	1
   596  0048                     ?_buffer_serial:	
   597  0048                     buffer_serial@idx:	
   598                           ; 2 bytes @ 0x28
   599                           
   600                           
   601                           ; 2 bytes @ 0x28
   602  0048                     	ds	2
   603  004A                     ??_buffer_serial:	
   604                           
   605                           ; 1 bytes @ 0x2A
   606  004A                     	ds	2
   607  004C                     buffer_serial@buffer:	
   608                           
   609                           ; 1 bytes @ 0x2C
   610  004C                     	ds	1
   611  004D                     ??_main:	
   612                           
   613                           ; 1 bytes @ 0x2D
   614  004D                     	ds	3
   615  0050                     main@buffer:	
   616                           
   617                           ; 6 bytes @ 0x30
   618  0050                     	ds	6
   619  0056                     main@logged:	
   620                           
   621                           ; 2 bytes @ 0x36
   622  0056                     	ds	2
   623  0058                     main@idx:	
   624                           
   625                           ; 2 bytes @ 0x38
   626  0058                     	ds	2
   627                           
   628                           	psect	maintext
   629  0432                     __pmaintext:	
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 181 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  buffer          6   48[BANK0 ] unsigned char [6]
   640 ;;  idx             2   56[BANK0 ] int 
   641 ;;  logged          2   54[BANK0 ] unsigned int 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  2  139[None  ] int 
   644 ;; Registers used:
   645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : B00/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   651 ;;      Params:         0       0       0       0       0
   652 ;;      Locals:         0      10       0       0       0
   653 ;;      Temps:          0       3       0       0       0
   654 ;;      Totals:         0      13       0       0       0
   655 ;;Total ram usage:       13 bytes
   656 ;; Hardware stack levels required when called:    7
   657 ;; This function calls:
   658 ;;		_beep
   659 ;;		_buffer_serial
   660 ;;		_init_lcd
   661 ;;		_main_lcd
   662 ;; This function is called by:
   663 ;;		Startup code after reset
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _main
   669  0432                     _main:	
   670                           
   671                           ;main.c: 184: T1CON = 0xFB;
   672                           
   673                           ;incstack = 0
   674                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   675  0432  30FB               	movlw	251
   676  0433  1283               	bcf	3,5	;RP0=0, select bank0
   677  0434  1303               	bcf	3,6	;RP1=0, select bank0
   678  0435  0090               	movwf	16	;volatile
   679                           
   680                           ;main.c: 185: CCP1CON = 0x0F;
   681  0436  300F               	movlw	15
   682  0437  0097               	movwf	23	;volatile
   683                           
   684                           ;main.c: 186: CCPR1L = 0;
   685  0438  0195               	clrf	21	;volatile
   686                           
   687                           ;main.c: 187: PR2 = 100;
   688  0439  3064               	movlw	100
   689  043A  1683               	bsf	3,5	;RP0=1, select bank1
   690  043B  1303               	bcf	3,6	;RP1=0, select bank1
   691  043C  0092               	movwf	18	;volatile
   692                           
   693                           ;main.c: 188: T2CON = 0x04;
   694  043D  3004               	movlw	4
   695  043E  1283               	bcf	3,5	;RP0=0, select bank0
   696  043F  1303               	bcf	3,6	;RP1=0, select bank0
   697  0440  0092               	movwf	18	;volatile
   698                           
   699                           ;main.c: 189: TRISC = 0xFB;
   700  0441  30FB               	movlw	251
   701  0442  1683               	bsf	3,5	;RP0=1, select bank1
   702  0443  1303               	bcf	3,6	;RP1=0, select bank1
   703  0444  0087               	movwf	7	;volatile
   704                           
   705                           ;main.c: 190: OPTION_REG = 0x38;
   706  0445  3038               	movlw	56
   707  0446  0081               	movwf	1	;volatile
   708                           
   709                           ;main.c: 191: TRISB = 0x7F;
   710  0447  307F               	movlw	127
   711  0448  0086               	movwf	6	;volatile
   712                           
   713                           ;main.c: 192: INTCON = 0x90;
   714  0449  3090               	movlw	144
   715  044A  008B               	movwf	11	;volatile
   716                           
   717                           ;main.c: 193: TRISD = 0x00;
   718  044B  0188               	clrf	8	;volatile
   719                           
   720                           ;main.c: 194: TRISE = 0xF8;
   721  044C  30F8               	movlw	248
   722  044D  0089               	movwf	9	;volatile
   723                           
   724                           ;main.c: 195: TRISA = 0xCF;
   725  044E  30CF               	movlw	207
   726  044F  0085               	movwf	5	;volatile
   727                           
   728                           ;main.c: 196: RCSTA = 0x90;
   729  0450  3090               	movlw	144
   730  0451  1283               	bcf	3,5	;RP0=0, select bank0
   731  0452  1303               	bcf	3,6	;RP1=0, select bank0
   732  0453  0098               	movwf	24	;volatile
   733                           
   734                           ;main.c: 197: TXSTA = 0x24;
   735  0454  3024               	movlw	36
   736  0455  1683               	bsf	3,5	;RP0=1, select bank1
   737  0456  1303               	bcf	3,6	;RP1=0, select bank1
   738  0457  0098               	movwf	24	;volatile
   739                           
   740                           ;main.c: 198: SPBRG = 12;
   741  0458  300C               	movlw	12
   742  0459  0099               	movwf	25	;volatile
   743                           
   744                           ;main.c: 200: init_lcd();
   745  045A  120A  118A  21EA  120A  118A  	fcall	_init_lcd
   746                           
   747                           ;main.c: 201: beep();
   748  045F  120A  118A  237F  120A  118A  	fcall	_beep
   749                           
   750                           ;main.c: 202: beep();
   751  0464  120A  118A  237F  120A  118A  	fcall	_beep
   752                           
   753                           ;main.c: 203: beep();
   754  0469  120A  118A  237F  120A  118A  	fcall	_beep
   755                           
   756                           ;main.c: 207: unsigned int logged;
   757                           ;main.c: 208: char buffer[6];
   758                           ;main.c: 209: int idx = 0;
   759  046E  1283               	bcf	3,5	;RP0=0, select bank0
   760  046F  1303               	bcf	3,6	;RP1=0, select bank0
   761  0470  01D8               	clrf	main@idx
   762  0471  01D9               	clrf	main@idx+1
   763  0472  2C75               	goto	l1766
   764  0473                     l1770:	
   765  0473  01D6               	clrf	main@logged
   766  0474  01D7               	clrf	main@logged+1
   767  0475                     l1766:	
   768                           ;main.c: 210: while (1) {
   769                           
   770                           
   771                           ;main.c: 211: idx = buffer_serial(buffer, idx);
   772  0475  0859               	movf	main@idx+1,w
   773  0476  00C9               	movwf	buffer_serial@idx+1
   774  0477  0858               	movf	main@idx,w
   775  0478  00C8               	movwf	buffer_serial@idx
   776  0479  3050               	movlw	(low (main@buffer| 0))& (0+255)
   777  047A  120A  118A  276C  120A  118A  	fcall	_buffer_serial
   778  047F  1283               	bcf	3,5	;RP0=0, select bank0
   779  0480  1303               	bcf	3,6	;RP1=0, select bank0
   780  0481  0849               	movf	?_buffer_serial+1,w
   781  0482  00D9               	movwf	main@idx+1
   782  0483  0848               	movf	?_buffer_serial,w
   783  0484  00D8               	movwf	main@idx
   784                           
   785                           ;main.c: 212: if (TMR1 < T1FOSC) logged = 0;
   786  0485  3015               	movlw	low (_T1FOSC-__stringbase)
   787  0486  0084               	movwf	4
   788  0487  120A  118A  2662  120A  118A  	fcall	stringdir
   789  048C  00CD               	movwf	??_main
   790  048D  120A  118A  2662  120A  118A  	fcall	stringdir
   791  0492  00CE               	movwf	??_main+1
   792  0493  084E               	movf	??_main+1,w
   793  0494  020F               	subwf	15,w	;volatile
   794  0495  1D03               	skipz
   795  0496  2C99               	goto	u1585
   796  0497  084D               	movf	??_main,w
   797  0498  020E               	subwf	14,w	;volatile
   798  0499                     u1585:	
   799  0499  1C03               	btfss	3,0
   800  049A  2C73               	goto	l1770
   801                           
   802                           ;main.c: 213: else if (!logged) {
   803  049B  0856               	movf	main@logged,w
   804  049C  0457               	iorwf	main@logged+1,w
   805  049D  1D03               	btfss	3,2
   806  049E  2C75               	goto	l1766
   807                           
   808                           ;main.c: 214: main_lcd(TMR0, PWM);
   809  049F  0801               	movf	1,w	;volatile
   810  04A0  00CD               	movwf	??_main
   811  04A1  01CE               	clrf	??_main+1
   812  04A2  084D               	movf	??_main,w
   813  04A3  00BF               	movwf	main_lcd@value
   814  04A4  084E               	movf	??_main+1,w
   815  04A5  00C0               	movwf	main_lcd@value+1
   816  04A6  0815               	movf	21,w
   817  04A7  00CF               	movwf	??_main+2
   818  04A8  084F               	movf	??_main+2,w
   819  04A9  00C1               	movwf	main_lcd@duty
   820  04AA  120A  118A  2798  120A  118A  	fcall	_main_lcd
   821                           
   822                           ;main.c: 215: logged = 1;
   823  04AF  3001               	movlw	1
   824  04B0  1283               	bcf	3,5	;RP0=0, select bank0
   825  04B1  1303               	bcf	3,6	;RP1=0, select bank0
   826  04B2  00D6               	movwf	main@logged
   827  04B3  3000               	movlw	0
   828  04B4  00D7               	movwf	main@logged+1
   829  04B5  2C75               	goto	l1766
   830  04B6                     __end_of_main:	
   831                           ;main.c: 216: }
   832                           ;main.c: 217: }
   833                           ;main.c: 218: return 0;
   834                           ;	Return value of _main is never used
   835                           
   836                           
   837                           	psect	text1
   838  0798                     __ptext1:	
   839 ;; *************** function _main_lcd *****************
   840 ;; Defined at:
   841 ;;		line 93 in file "main.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  value           2   31[BANK0 ] unsigned int 
   844 ;;  duty            1   33[BANK0 ] unsigned char 
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   856 ;;      Params:         0       3       0       0       0
   857 ;;      Locals:         0       0       0       0       0
   858 ;;      Temps:          0       2       0       0       0
   859 ;;      Totals:         0       5       0       0       0
   860 ;;Total ram usage:        5 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    4
   863 ;; This function calls:
   864 ;;		_printf
   865 ;;		_prog_lcd
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function _main_lcd
   873  0798                     _main_lcd:	
   874                           
   875                           ;main.c: 94: PUT = 1;
   876                           
   877                           ;incstack = 0
   878                           ; Regs used in _main_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   879  0798  1479               	bsf	_PUT/(0+8),_PUT& (0+7)
   880                           
   881                           ;main.c: 95: prog_lcd(0xC0);
   882  0799  30C0               	movlw	192
   883  079A  120A  118A  2597  120A  118A  	fcall	_prog_lcd
   884                           
   885                           ;main.c: 96: printf("bps: %3u", value);
   886  079F  1283               	bcf	3,5	;RP0=0, select bank0
   887  07A0  1303               	bcf	3,6	;RP1=0, select bank0
   888  07A1  0840               	movf	main_lcd@value+1,w
   889  07A2  00AF               	movwf	?_printf+1
   890  07A3  083F               	movf	main_lcd@value,w
   891  07A4  00AE               	movwf	?_printf
   892  07A5  3043               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   893  07A6  120A  118A  2025  120A  118A  	fcall	_printf
   894                           
   895                           ;main.c: 97: prog_lcd(0xC8);
   896  07AB  30C8               	movlw	200
   897  07AC  120A  118A  2597  120A  118A  	fcall	_prog_lcd
   898                           
   899                           ;main.c: 98: printf("pwm: %3d%%", duty);
   900  07B1  1283               	bcf	3,5	;RP0=0, select bank0
   901  07B2  1303               	bcf	3,6	;RP1=0, select bank0
   902  07B3  0841               	movf	main_lcd@duty,w
   903  07B4  00C2               	movwf	??_main_lcd
   904  07B5  01C3               	clrf	??_main_lcd+1
   905  07B6  0842               	movf	??_main_lcd,w
   906  07B7  00AE               	movwf	?_printf
   907  07B8  0843               	movf	??_main_lcd+1,w
   908  07B9  00AF               	movwf	?_printf+1
   909  07BA  3038               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   910  07BB  120A  118A  2025   	fcall	_printf
   911  07BE  0008               	return
   912  07BF                     __end_of_main_lcd:	
   913                           
   914                           	psect	text2
   915  01EA                     __ptext2:	
   916 ;; *************** function _init_lcd *****************
   917 ;; Defined at:
   918 ;;		line 76 in file "main.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0       0       0       0       0
   933 ;;      Locals:         0       0       0       0       0
   934 ;;      Temps:          0       4       0       0       0
   935 ;;      Totals:         0       4       0       0       0
   936 ;;Total ram usage:        4 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    4
   939 ;; This function calls:
   940 ;;		___lldiv
   941 ;;		_printf
   942 ;;		_prog_lcd
   943 ;; This function is called by:
   944 ;;		_main
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _init_lcd
   950  01EA                     _init_lcd:	
   951                           
   952                           ;main.c: 77: PUT = 1;
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _init_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   956  01EA  1479               	bsf	_PUT/(0+8),_PUT& (0+7)
   957                           
   958                           ;main.c: 78: LCD.RW = 0;
   959  01EB  1283               	bcf	3,5	;RP0=0, select bank0
   960  01EC  1303               	bcf	3,6	;RP1=0, select bank0
   961  01ED  1089               	bcf	9,1
   962                           
   963                           ;main.c: 79: prog_lcd(0x30); _delay(IFOSC/200);
   964  01EE  3030               	movlw	48
   965  01EF  120A  118A  2597  120A  118A  	fcall	_prog_lcd
   966  01F4  3000               	movlw	0
   967  01F5  1283               	bcf	3,5	;RP0=0, select bank0
   968  01F6  1303               	bcf	3,6	;RP1=0, select bank0
   969  01F7  00A3               	movwf	___lldiv@divisor+3
   970  01F8  3000               	movlw	0
   971  01F9  00A2               	movwf	___lldiv@divisor+2
   972  01FA  3000               	movlw	0
   973  01FB  00A1               	movwf	___lldiv@divisor+1
   974  01FC  30C8               	movlw	200
   975  01FD  00A0               	movwf	___lldiv@divisor
   976  01FE  300F               	movlw	low (_IFOSC-__stringbase)
   977  01FF  0084               	movwf	4
   978  0200  120A  118A  2662  120A  118A  	fcall	stringdir
   979  0205  00A4               	movwf	___lldiv@dividend
   980  0206  120A  118A  2662  120A  118A  	fcall	stringdir
   981  020B  00A5               	movwf	___lldiv@dividend+1
   982  020C  120A  118A  2662  120A  118A  	fcall	stringdir
   983  0211  00A6               	movwf	___lldiv@dividend+2
   984  0212  120A  118A  2662  120A  118A  	fcall	stringdir
   985  0217  00A7               	movwf	___lldiv@dividend+3
   986  0218  120A  118A  2602  120A  118A  	fcall	___lldiv
   987  021D  1283               	bcf	3,5	;RP0=0, select bank0
   988  021E  1303               	bcf	3,6	;RP1=0, select bank0
   989  021F  0820               	movf	?___lldiv,w
   990  0220  00BF               	movwf	??_init_lcd
   991  0221  0821               	movf	?___lldiv+1,w
   992  0222  00C0               	movwf	??_init_lcd+1
   993  0223  0822               	movf	?___lldiv+2,w
   994  0224  00C1               	movwf	??_init_lcd+2
   995  0225  0823               	movf	?___lldiv+3,w
   996  0226  00C2               	movwf	??_init_lcd+3
   997                           
   998                           ;main.c: 80: prog_lcd(0x30); _delay(IFOSC/10000);
   999  0227  3030               	movlw	48
  1000  0228  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1001  022D  3000               	movlw	0
  1002  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1003  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1004  0230  00A3               	movwf	___lldiv@divisor+3
  1005  0231  3000               	movlw	0
  1006  0232  00A2               	movwf	___lldiv@divisor+2
  1007  0233  3027               	movlw	39
  1008  0234  00A1               	movwf	___lldiv@divisor+1
  1009  0235  3010               	movlw	16
  1010  0236  00A0               	movwf	___lldiv@divisor
  1011  0237  300F               	movlw	low (_IFOSC-__stringbase)
  1012  0238  0084               	movwf	4
  1013  0239  120A  118A  2662  120A  118A  	fcall	stringdir
  1014  023E  00A4               	movwf	___lldiv@dividend
  1015  023F  120A  118A  2662  120A  118A  	fcall	stringdir
  1016  0244  00A5               	movwf	___lldiv@dividend+1
  1017  0245  120A  118A  2662  120A  118A  	fcall	stringdir
  1018  024A  00A6               	movwf	___lldiv@dividend+2
  1019  024B  120A  118A  2662  120A  118A  	fcall	stringdir
  1020  0250  00A7               	movwf	___lldiv@dividend+3
  1021  0251  120A  118A  2602  120A  118A  	fcall	___lldiv
  1022  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1023  0257  1303               	bcf	3,6	;RP1=0, select bank0
  1024  0258  0820               	movf	?___lldiv,w
  1025  0259  00BF               	movwf	??_init_lcd
  1026  025A  0821               	movf	?___lldiv+1,w
  1027  025B  00C0               	movwf	??_init_lcd+1
  1028  025C  0822               	movf	?___lldiv+2,w
  1029  025D  00C1               	movwf	??_init_lcd+2
  1030  025E  0823               	movf	?___lldiv+3,w
  1031  025F  00C2               	movwf	??_init_lcd+3
  1032                           
  1033                           ;main.c: 81: prog_lcd(0x30);
  1034  0260  3030               	movlw	48
  1035  0261  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1036                           
  1037                           ;main.c: 82: prog_lcd(0x38);
  1038  0266  3038               	movlw	56
  1039  0267  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1040                           
  1041                           ;main.c: 83: prog_lcd(0x01); _delay(IFOSC/500);
  1042  026C  3001               	movlw	1
  1043  026D  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1044  0272  3000               	movlw	0
  1045  0273  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0274  1303               	bcf	3,6	;RP1=0, select bank0
  1047  0275  00A3               	movwf	___lldiv@divisor+3
  1048  0276  3000               	movlw	0
  1049  0277  00A2               	movwf	___lldiv@divisor+2
  1050  0278  3001               	movlw	1
  1051  0279  00A1               	movwf	___lldiv@divisor+1
  1052  027A  30F4               	movlw	244
  1053  027B  00A0               	movwf	___lldiv@divisor
  1054  027C  300F               	movlw	low (_IFOSC-__stringbase)
  1055  027D  0084               	movwf	4
  1056  027E  120A  118A  2662  120A  118A  	fcall	stringdir
  1057  0283  00A4               	movwf	___lldiv@dividend
  1058  0284  120A  118A  2662  120A  118A  	fcall	stringdir
  1059  0289  00A5               	movwf	___lldiv@dividend+1
  1060  028A  120A  118A  2662  120A  118A  	fcall	stringdir
  1061  028F  00A6               	movwf	___lldiv@dividend+2
  1062  0290  120A  118A  2662  120A  118A  	fcall	stringdir
  1063  0295  00A7               	movwf	___lldiv@dividend+3
  1064  0296  120A  118A  2602  120A  118A  	fcall	___lldiv
  1065  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1066  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1067  029D  0820               	movf	?___lldiv,w
  1068  029E  00BF               	movwf	??_init_lcd
  1069  029F  0821               	movf	?___lldiv+1,w
  1070  02A0  00C0               	movwf	??_init_lcd+1
  1071  02A1  0822               	movf	?___lldiv+2,w
  1072  02A2  00C1               	movwf	??_init_lcd+2
  1073  02A3  0823               	movf	?___lldiv+3,w
  1074  02A4  00C2               	movwf	??_init_lcd+3
  1075                           
  1076                           ;main.c: 84: prog_lcd(0x0C);
  1077  02A5  300C               	movlw	12
  1078  02A6  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1079                           
  1080                           ;main.c: 85: prog_lcd(0x06);
  1081  02AB  3006               	movlw	6
  1082  02AC  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1083                           
  1084                           ;main.c: 86: prog_lcd(0x80);
  1085  02B1  3080               	movlw	128
  1086  02B2  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1087                           
  1088                           ;main.c: 87: printf("LAB.CONT.DIGITAL");
  1089  02B7  3017               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1090  02B8  120A  118A  2025  120A  118A  	fcall	_printf
  1091                           
  1092                           ;main.c: 88: prog_lcd(0xC0);
  1093  02BD  30C0               	movlw	192
  1094  02BE  120A  118A  2597  120A  118A  	fcall	_prog_lcd
  1095                           
  1096                           ;main.c: 89: printf("Seja Bem-Vindo!");
  1097  02C3  3028               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1098  02C4  120A  118A  2025   	fcall	_printf
  1099  02C7  0008               	return
  1100  02C8                     __end_of_init_lcd:	
  1101                           ;main.c: 90: return;
  1102                           
  1103                           
  1104                           	psect	text3
  1105  0597                     __ptext3:	
  1106 ;; *************** function _prog_lcd *****************
  1107 ;; Defined at:
  1108 ;;		line 68 in file "main.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  msg             1    wreg     unsigned char 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  msg             1   13[BANK0 ] unsigned char 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1122 ;;      Params:         0       0       0       0       0
  1123 ;;      Locals:         0       1       0       0       0
  1124 ;;      Temps:          4       0       0       0       0
  1125 ;;      Totals:         4       1       0       0       0
  1126 ;;Total ram usage:        5 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    2
  1129 ;; This function calls:
  1130 ;;		___lldiv
  1131 ;; This function is called by:
  1132 ;;		_init_lcd
  1133 ;;		_main_lcd
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           
  1138                           ;psect for function _prog_lcd
  1139  0597                     _prog_lcd:	
  1140                           
  1141                           ;incstack = 0
  1142                           ; Regs used in _prog_lcd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1143                           ;prog_lcd@msg stored from wreg
  1144  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1145  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1146  0599  00AD               	movwf	prog_lcd@msg
  1147                           
  1148                           ;main.c: 69: LCD.RS = 0;
  1149  059A  1009               	bcf	9,0
  1150                           
  1151                           ;main.c: 70: LCD.CH = msg;
  1152  059B  082D               	movf	prog_lcd@msg,w
  1153  059C  0088               	movwf	8
  1154                           
  1155                           ;main.c: 71: LCD.EN = 1; _delay(IFOSC/1000000);
  1156  059D  1509               	bsf	9,2
  1157  059E  3000               	movlw	0
  1158  059F  00A3               	movwf	___lldiv@divisor+3
  1159  05A0  300F               	movlw	15
  1160  05A1  00A2               	movwf	___lldiv@divisor+2
  1161  05A2  3042               	movlw	66
  1162  05A3  00A1               	movwf	___lldiv@divisor+1
  1163  05A4  3040               	movlw	64
  1164  05A5  00A0               	movwf	___lldiv@divisor
  1165  05A6  300F               	movlw	low (_IFOSC-__stringbase)
  1166  05A7  0084               	movwf	4
  1167  05A8  120A  118A  2662  120A  118A  	fcall	stringdir
  1168  05AD  00A4               	movwf	___lldiv@dividend
  1169  05AE  120A  118A  2662  120A  118A  	fcall	stringdir
  1170  05B3  00A5               	movwf	___lldiv@dividend+1
  1171  05B4  120A  118A  2662  120A  118A  	fcall	stringdir
  1172  05B9  00A6               	movwf	___lldiv@dividend+2
  1173  05BA  120A  118A  2662  120A  118A  	fcall	stringdir
  1174  05BF  00A7               	movwf	___lldiv@dividend+3
  1175  05C0  120A  118A  2602  120A  118A  	fcall	___lldiv
  1176  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1177  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1178  05C7  0820               	movf	?___lldiv,w
  1179  05C8  00F5               	movwf	??_prog_lcd
  1180  05C9  0821               	movf	?___lldiv+1,w
  1181  05CA  00F6               	movwf	??_prog_lcd+1
  1182  05CB  0822               	movf	?___lldiv+2,w
  1183  05CC  00F7               	movwf	??_prog_lcd+2
  1184  05CD  0823               	movf	?___lldiv+3,w
  1185  05CE  00F8               	movwf	??_prog_lcd+3
  1186                           
  1187                           ;main.c: 72: LCD.EN = 0; _delay(IFOSC/20000);
  1188  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  1189  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  1190  05D1  1109               	bcf	9,2
  1191  05D2  3000               	movlw	0
  1192  05D3  00A3               	movwf	___lldiv@divisor+3
  1193  05D4  3000               	movlw	0
  1194  05D5  00A2               	movwf	___lldiv@divisor+2
  1195  05D6  304E               	movlw	78
  1196  05D7  00A1               	movwf	___lldiv@divisor+1
  1197  05D8  3020               	movlw	32
  1198  05D9  00A0               	movwf	___lldiv@divisor
  1199  05DA  300F               	movlw	low (_IFOSC-__stringbase)
  1200  05DB  0084               	movwf	4
  1201  05DC  120A  118A  2662  120A  118A  	fcall	stringdir
  1202  05E1  00A4               	movwf	___lldiv@dividend
  1203  05E2  120A  118A  2662  120A  118A  	fcall	stringdir
  1204  05E7  00A5               	movwf	___lldiv@dividend+1
  1205  05E8  120A  118A  2662  120A  118A  	fcall	stringdir
  1206  05ED  00A6               	movwf	___lldiv@dividend+2
  1207  05EE  120A  118A  2662  120A  118A  	fcall	stringdir
  1208  05F3  00A7               	movwf	___lldiv@dividend+3
  1209  05F4  120A  118A  2602   	fcall	___lldiv
  1210  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1211  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1212  05F9  0820               	movf	?___lldiv,w
  1213  05FA  00F5               	movwf	??_prog_lcd
  1214  05FB  0821               	movf	?___lldiv+1,w
  1215  05FC  00F6               	movwf	??_prog_lcd+1
  1216  05FD  0822               	movf	?___lldiv+2,w
  1217  05FE  00F7               	movwf	??_prog_lcd+2
  1218  05FF  0823               	movf	?___lldiv+3,w
  1219  0600  00F8               	movwf	??_prog_lcd+3
  1220  0601  0008               	return
  1221  0602                     __end_of_prog_lcd:	
  1222                           ;main.c: 73: return;
  1223                           
  1224                           
  1225                           	psect	text4
  1226  076C                     __ptext4:	
  1227 ;; *************** function _buffer_serial *****************
  1228 ;; Defined at:
  1229 ;;		line 169 in file "main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  buffer          1    wreg     PTR unsigned char 
  1232 ;;		 -> main@buffer(6), 
  1233 ;;  idx             2   40[BANK0 ] int 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  buffer          1   44[BANK0 ] PTR unsigned char 
  1236 ;;		 -> main@buffer(6), 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  2   40[BANK0 ] int 
  1239 ;; Registers used:
  1240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1246 ;;      Params:         0       2       0       0       0
  1247 ;;      Locals:         0       1       0       0       0
  1248 ;;      Temps:          0       2       0       0       0
  1249 ;;      Totals:         0       5       0       0       0
  1250 ;;Total ram usage:        5 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    6
  1253 ;; This function calls:
  1254 ;;		_getch
  1255 ;;		_io_switch
  1256 ;; This function is called by:
  1257 ;;		_main
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           
  1262                           ;psect for function _buffer_serial
  1263  076C                     _buffer_serial:	
  1264                           
  1265                           ;incstack = 0
  1266                           ; Regs used in _buffer_serial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1267                           ;buffer_serial@buffer stored from wreg
  1268  076C  1283               	bcf	3,5	;RP0=0, select bank0
  1269  076D  1303               	bcf	3,6	;RP1=0, select bank0
  1270  076E  00CC               	movwf	buffer_serial@buffer
  1271                           
  1272                           ;main.c: 170: buffer[idx] = getch();
  1273  076F  120A  158A  27C3  120A  118A  	fcall	_getch
  1274  0774  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0775  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0776  00CA               	movwf	??_buffer_serial
  1277  0777  0848               	movf	buffer_serial@idx,w
  1278  0778  074C               	addwf	buffer_serial@buffer,w
  1279  0779  00CB               	movwf	??_buffer_serial+1
  1280  077A  084B               	movf	??_buffer_serial+1,w
  1281  077B  0084               	movwf	4
  1282  077C  084A               	movf	??_buffer_serial,w
  1283  077D  1383               	bcf	3,7	;select IRP bank0
  1284  077E  0080               	movwf	0
  1285                           
  1286                           ;main.c: 171: if (buffer[idx] == '\n') {
  1287  077F  0848               	movf	buffer_serial@idx,w
  1288  0780  074C               	addwf	buffer_serial@buffer,w
  1289  0781  00CA               	movwf	??_buffer_serial
  1290  0782  084A               	movf	??_buffer_serial,w
  1291  0783  0084               	movwf	4
  1292  0784  300A               	movlw	10
  1293  0785  0600               	xorwf	0,w
  1294  0786  1D03               	btfss	3,2
  1295  0787  2F8F               	goto	l1732
  1296                           
  1297                           ;main.c: 172: idx=0;
  1298  0788  01C8               	clrf	buffer_serial@idx
  1299  0789  01C9               	clrf	buffer_serial@idx+1
  1300                           
  1301                           ;main.c: 173: io_switch(buffer);
  1302  078A  084C               	movf	buffer_serial@buffer,w
  1303  078B  120A  118A  252A   	fcall	_io_switch
  1304                           
  1305                           ;main.c: 174: }
  1306  078E  0008               	return
  1307  078F                     l1732:	
  1308                           
  1309                           ;main.c: 175: else {
  1310                           ;main.c: 176: idx++;
  1311  078F  3001               	movlw	1
  1312  0790  1283               	bcf	3,5	;RP0=0, select bank0
  1313  0791  1303               	bcf	3,6	;RP1=0, select bank0
  1314  0792  07C8               	addwf	buffer_serial@idx,f
  1315  0793  1803               	skipnc
  1316  0794  0AC9               	incf	buffer_serial@idx+1,f
  1317  0795  3000               	movlw	0
  1318  0796  07C9               	addwf	buffer_serial@idx+1,f
  1319  0797  0008               	return
  1320  0798                     __end_of_buffer_serial:	
  1321                           ;main.c: 177: }
  1322                           ;main.c: 178: return idx;
  1323                           
  1324                           
  1325                           	psect	text5
  1326  052A                     __ptext5:	
  1327 ;; *************** function _io_switch *****************
  1328 ;; Defined at:
  1329 ;;		line 156 in file "main.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  x               1    wreg     PTR unsigned char 
  1332 ;;		 -> main@buffer(6), 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  x               1   39[BANK0 ] PTR unsigned char 
  1335 ;;		 -> main@buffer(6), 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1345 ;;      Params:         0       0       0       0       0
  1346 ;;      Locals:         0       1       0       0       0
  1347 ;;      Temps:          0       0       0       0       0
  1348 ;;      Totals:         0       1       0       0       0
  1349 ;;Total ram usage:        1 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    5
  1352 ;; This function calls:
  1353 ;;		_beep
  1354 ;;		_read_tmr0
  1355 ;;		_read_tmr1
  1356 ;;		_write
  1357 ;; This function is called by:
  1358 ;;		_buffer_serial
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function _io_switch
  1364  052A                     _io_switch:	
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in _io_switch: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1368                           ;io_switch@x stored from wreg
  1369  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1370  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1371  052C  00C7               	movwf	io_switch@x
  1372                           
  1373                           ;main.c: 157: switch (x[0]) {
  1374  052D  2D77               	goto	l1704
  1375  052E                     l1680:	
  1376                           ;main.c: 158: case '7': read_tmr0(); break;
  1377                           
  1378  052E  120A  118A  27E2   	fcall	_read_tmr0
  1379  0531  0008               	return
  1380  0532                     l1682:	
  1381                           ;main.c: 159: case '5': write(x[1]); break;
  1382                           
  1383  0532  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0533  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0534  0A47               	incf	io_switch@x,w
  1386  0535  0084               	movwf	4
  1387  0536  1383               	bcf	3,7	;select IRP bank0
  1388  0537  0800               	movf	0,w
  1389  0538  120A  158A  27C9   	fcall	_write
  1390  053B  0008               	return
  1391  053C                     l1684:	
  1392                           ;main.c: 160: case '1': read_tmr0(); write(x[1]); break;
  1393                           
  1394  053C  120A  118A  27E2  120A  118A  	fcall	_read_tmr0
  1395  0541  1283               	bcf	3,5	;RP0=0, select bank0
  1396  0542  1303               	bcf	3,6	;RP1=0, select bank0
  1397  0543  0A47               	incf	io_switch@x,w
  1398  0544  0084               	movwf	4
  1399  0545  1383               	bcf	3,7	;select IRP bank0
  1400  0546  0800               	movf	0,w
  1401  0547  120A  158A  27C9   	fcall	_write
  1402  054A  0008               	return
  1403  054B                     l1688:	
  1404                           ;main.c: 161: case 'r': read_tmr1(); break;
  1405                           
  1406  054B  120A  118A  26B9   	fcall	_read_tmr1
  1407  054E  0008               	return
  1408  054F                     l1690:	
  1409                           ;main.c: 162: case 'w': write(x[1]); break;
  1410                           
  1411  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0551  0A47               	incf	io_switch@x,w
  1414  0552  0084               	movwf	4
  1415  0553  1383               	bcf	3,7	;select IRP bank0
  1416  0554  0800               	movf	0,w
  1417  0555  120A  158A  27C9   	fcall	_write
  1418  0558  0008               	return
  1419  0559                     l1692:	
  1420                           ;main.c: 163: case 'x': read_tmr1(); write(x[1]); break;
  1421                           
  1422  0559  120A  118A  26B9  120A  118A  	fcall	_read_tmr1
  1423  055E  1283               	bcf	3,5	;RP0=0, select bank0
  1424  055F  1303               	bcf	3,6	;RP1=0, select bank0
  1425  0560  0A47               	incf	io_switch@x,w
  1426  0561  0084               	movwf	4
  1427  0562  1383               	bcf	3,7	;select IRP bank0
  1428  0563  0800               	movf	0,w
  1429  0564  120A  158A  27C9   	fcall	_write
  1430  0567  0008               	return
  1431  0568                     l1696:	
  1432                           ;main.c: 164: case 's':
  1433                           
  1434                           
  1435                           ;main.c: 165: case '2': write(0); beep(); beep(); break;
  1436  0568  3000               	movlw	0
  1437  0569  120A  158A  27C9  120A  118A  	fcall	_write
  1438  056E  120A  118A  237F  120A  118A  	fcall	_beep
  1439  0573  120A  118A  237F   	fcall	_beep
  1440                           
  1441                           ;main.c: 166: }
  1442  0576  0008               	return
  1443  0577                     l1704:	
  1444  0577  1283               	bcf	3,5	;RP0=0, select bank0
  1445  0578  1303               	bcf	3,6	;RP1=0, select bank0
  1446  0579  0847               	movf	io_switch@x,w
  1447  057A  0084               	movwf	4
  1448  057B  1383               	bcf	3,7	;select IRP bank0
  1449  057C  0800               	movf	0,w
  1450                           
  1451                           ; Switch size 1, requested type "space"
  1452                           ; Number of cases is 8, Range of values is 49 to 120
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte           25    13 (average)
  1456                           ; direct_byte          227    11 (fixed)
  1457                           ; jumptable            263     9 (fixed)
  1458                           ;	Chosen strategy is simple_byte
  1459  057D  3A31               	xorlw	49	; case 49
  1460  057E  1903               	skipnz
  1461  057F  2D3C               	goto	l1684
  1462  0580  3A03               	xorlw	3	; case 50
  1463  0581  1903               	skipnz
  1464  0582  2D68               	goto	l1696
  1465  0583  3A07               	xorlw	7	; case 53
  1466  0584  1903               	skipnz
  1467  0585  2D32               	goto	l1682
  1468  0586  3A02               	xorlw	2	; case 55
  1469  0587  1903               	skipnz
  1470  0588  2D2E               	goto	l1680
  1471  0589  3A45               	xorlw	69	; case 114
  1472  058A  1903               	skipnz
  1473  058B  2D4B               	goto	l1688
  1474  058C  3A01               	xorlw	1	; case 115
  1475  058D  1903               	skipnz
  1476  058E  2D68               	goto	l1696
  1477  058F  3A04               	xorlw	4	; case 119
  1478  0590  1903               	skipnz
  1479  0591  2D4F               	goto	l1690
  1480  0592  3A0F               	xorlw	15	; case 120
  1481  0593  1903               	skipnz
  1482  0594  2D59               	goto	l1692
  1483  0595  2D96               	goto	l130
  1484  0596                     l130:	
  1485  0596  0008               	return
  1486  0597                     __end_of_io_switch:	
  1487                           
  1488                           	psect	text6
  1489  0FC9                     __ptext6:	
  1490 ;; *************** function _write *****************
  1491 ;; Defined at:
  1492 ;;		line 152 in file "main.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;  duty            1    wreg     unsigned char 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  duty            1    4[COMMON] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1506 ;;      Params:         0       0       0       0       0
  1507 ;;      Locals:         1       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0
  1509 ;;      Totals:         1       0       0       0       0
  1510 ;;Total ram usage:        1 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    1
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_io_switch
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           
  1521                           ;psect for function _write
  1522  0FC9                     _write:	
  1523                           
  1524                           ;incstack = 0
  1525                           ; Regs used in _write: [wreg]
  1526                           ;write@duty stored from wreg
  1527  0FC9  00F4               	movwf	write@duty
  1528                           
  1529                           ;main.c: 153: PWM = duty;
  1530  0FCA  0874               	movf	write@duty,w
  1531  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  1532  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  1533  0FCD  0095               	movwf	21
  1534  0FCE  0008               	return
  1535  0FCF                     __end_of_write:	
  1536                           
  1537                           	psect	text7
  1538  06B9                     __ptext7:	
  1539 ;; *************** function _read_tmr1 *****************
  1540 ;; Defined at:
  1541 ;;		line 138 in file "main.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1555 ;;      Params:         0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0
  1557 ;;      Temps:          0       8       0       0       0
  1558 ;;      Totals:         0       8       0       0       0
  1559 ;;Total ram usage:        8 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    4
  1562 ;; This function calls:
  1563 ;;		_printf
  1564 ;;		_rps_timer1
  1565 ;; This function is called by:
  1566 ;;		_io_switch
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           
  1571                           ;psect for function _read_tmr1
  1572  06B9                     _read_tmr1:	
  1573                           
  1574                           ;main.c: 139: PUT = 0;
  1575                           
  1576                           ;incstack = 0
  1577                           ; Regs used in _read_tmr1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1578  06B9  1079               	bcf	_PUT/(0+8),_PUT& (0+7)
  1579                           
  1580                           ;main.c: 140: FAN = rps_timer1(FAN, TMR1);
  1581  06BA  3029               	movlw	rps_timer1@x& (0+255)
  1582  06BB  0084               	movwf	4
  1583  06BC  305A               	movlw	low _FAN
  1584  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1585  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1586  06BF  00BF               	movwf	??_read_tmr1
  1587  06C0  0804               	movf	4,w
  1588  06C1  00C0               	movwf	??_read_tmr1+1
  1589  06C2  300A               	movlw	10
  1590  06C3  00C1               	movwf	??_read_tmr1+2
  1591  06C4                     u1550:	
  1592  06C4  083F               	movf	??_read_tmr1,w
  1593  06C5  0084               	movwf	4
  1594  06C6  1383               	bcf	3,7	;select IRP bank0
  1595  06C7  0800               	movf	0,w
  1596  06C8  00C2               	movwf	??_read_tmr1+3
  1597  06C9  0ABF               	incf	??_read_tmr1,f
  1598  06CA  0840               	movf	??_read_tmr1+1,w
  1599  06CB  0084               	movwf	4
  1600  06CC  0842               	movf	??_read_tmr1+3,w
  1601  06CD  0080               	movwf	0
  1602  06CE  0AC0               	incf	??_read_tmr1+1,f
  1603  06CF  0BC1               	decfsz	??_read_tmr1+2,f
  1604  06D0  2EC4               	goto	u1550
  1605  06D1  080F               	movf	15,w	;volatile
  1606  06D2  00B4               	movwf	rps_timer1@t+1
  1607  06D3  080E               	movf	14,w	;volatile
  1608  06D4  00B3               	movwf	rps_timer1@t
  1609  06D5  120A  118A  22C8  120A  118A  	fcall	_rps_timer1
  1610  06DA  305A               	movlw	_FAN& (0+255)
  1611  06DB  0084               	movwf	4
  1612  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  1613  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  1614  06DE  3029               	movlw	low ?_rps_timer1
  1615  06DF  00C3               	movwf	??_read_tmr1+4
  1616  06E0  0804               	movf	4,w
  1617  06E1  00C4               	movwf	??_read_tmr1+5
  1618  06E2  300A               	movlw	10
  1619  06E3  00C5               	movwf	??_read_tmr1+6
  1620  06E4                     u1560:	
  1621  06E4  0843               	movf	??_read_tmr1+4,w
  1622  06E5  0084               	movwf	4
  1623  06E6  1383               	bcf	3,7	;select IRP bank0
  1624  06E7  0800               	movf	0,w
  1625  06E8  00C6               	movwf	??_read_tmr1+7
  1626  06E9  0AC3               	incf	??_read_tmr1+4,f
  1627  06EA  0844               	movf	??_read_tmr1+5,w
  1628  06EB  0084               	movwf	4
  1629  06EC  0846               	movf	??_read_tmr1+7,w
  1630  06ED  0080               	movwf	0
  1631  06EE  0AC4               	incf	??_read_tmr1+5,f
  1632  06EF  0BC5               	decfsz	??_read_tmr1+6,f
  1633  06F0  2EE4               	goto	u1560
  1634                           
  1635                           ;main.c: 141: printf("%u", FAN.value);
  1636  06F1  085F               	movf	_FAN+5,w	;volatile
  1637  06F2  00AF               	movwf	?_printf+1
  1638  06F3  085E               	movf	_FAN+4,w	;volatile
  1639  06F4  00AE               	movwf	?_printf
  1640  06F5  304F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1641  06F6  120A  118A  2025   	fcall	_printf
  1642  06F9  0008               	return
  1643  06FA                     __end_of_read_tmr1:	
  1644                           ;main.c: 142: return;
  1645                           
  1646                           
  1647                           	psect	text8
  1648  02C8                     __ptext8:	
  1649 ;; *************** function _rps_timer1 *****************
  1650 ;; Defined at:
  1651 ;;		line 119 in file "main.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  x              10    9[BANK0 ] volatile struct .
  1654 ;;  t               2   19[BANK0 ] unsigned int 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  10    9[BANK0 ] struct .
  1659 ;; Registers used:
  1660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1666 ;;      Params:         0      12       0       0       0
  1667 ;;      Locals:         0       2       0       0       0
  1668 ;;      Temps:          0       4       0       0       0
  1669 ;;      Totals:         0      18       0       0       0
  1670 ;;Total ram usage:       18 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    2
  1673 ;; This function calls:
  1674 ;;		___lwdiv
  1675 ;;		___wmul
  1676 ;; This function is called by:
  1677 ;;		_read_tmr1
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function _rps_timer1
  1683  02C8                     _rps_timer1:	
  1684                           
  1685                           ;main.c: 120: if (x.time > t) {
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _rps_timer1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1689  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  1690  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  1691  02CA  082C               	movf	rps_timer1@x+3,w	;volatile
  1692  02CB  0234               	subwf	rps_timer1@t+1,w
  1693  02CC  1D03               	skipz
  1694  02CD  2AD0               	goto	u1075
  1695  02CE  082B               	movf	rps_timer1@x+2,w	;volatile
  1696  02CF  0233               	subwf	rps_timer1@t,w
  1697  02D0                     u1075:	
  1698  02D0  1803               	skipnc
  1699  02D1  2AD9               	goto	l1286
  1700                           
  1701                           ;main.c: 121: x.count = 0;
  1702  02D2  01A9               	clrf	rps_timer1@x	;volatile
  1703  02D3  01AA               	clrf	rps_timer1@x+1	;volatile
  1704                           
  1705                           ;main.c: 122: x.time = t;
  1706  02D4  0834               	movf	rps_timer1@t+1,w
  1707  02D5  00AC               	movwf	rps_timer1@x+3	;volatile
  1708  02D6  0833               	movf	rps_timer1@t,w
  1709  02D7  00AB               	movwf	rps_timer1@x+2	;volatile
  1710                           
  1711                           ;main.c: 123: }
  1712  02D8  0008               	return
  1713  02D9                     l1286:	
  1714                           
  1715                           ;main.c: 124: else if (x.count > 0) {
  1716  02D9  0829               	movf	rps_timer1@x,w	;volatile
  1717  02DA  042A               	iorwf	rps_timer1@x+1,w	;volatile
  1718  02DB  1903               	btfsc	3,2
  1719  02DC  2B3A               	goto	l1300
  1720                           
  1721                           ;main.c: 125: x.value = T1FOSC / (t - x.time) * x.count / x.div;
  1722  02DD  092B               	comf	rps_timer1@x+2,w	;volatile
  1723  02DE  00B5               	movwf	??_rps_timer1
  1724  02DF  092C               	comf	rps_timer1@x+3,w	;volatile
  1725  02E0  00B6               	movwf	??_rps_timer1+1
  1726  02E1  0AB5               	incf	??_rps_timer1,f
  1727  02E2  1903               	skipnz
  1728  02E3  0AB6               	incf	??_rps_timer1+1,f
  1729  02E4  0833               	movf	rps_timer1@t,w
  1730  02E5  0735               	addwf	??_rps_timer1,w
  1731  02E6  00F4               	movwf	___lwdiv@divisor
  1732  02E7  0834               	movf	rps_timer1@t+1,w
  1733  02E8  1803               	skipnc
  1734  02E9  0A34               	incf	rps_timer1@t+1,w
  1735  02EA  0736               	addwf	??_rps_timer1+1,w
  1736  02EB  00F5               	movwf	___lwdiv@divisor+1
  1737  02EC  3015               	movlw	low (_T1FOSC-__stringbase)
  1738  02ED  0084               	movwf	4
  1739  02EE  120A  118A  2662  120A  118A  	fcall	stringdir
  1740  02F3  00F6               	movwf	___lwdiv@dividend
  1741  02F4  120A  118A  2662  120A  118A  	fcall	stringdir
  1742  02F9  00F7               	movwf	___lwdiv@dividend+1
  1743  02FA  120A  118A  26FA  120A  118A  	fcall	___lwdiv
  1744  02FF  0875               	movf	?___lwdiv+1,w
  1745  0300  1283               	bcf	3,5	;RP0=0, select bank0
  1746  0301  1303               	bcf	3,6	;RP1=0, select bank0
  1747  0302  00A4               	movwf	___wmul@multiplier+1
  1748  0303  0874               	movf	?___lwdiv,w
  1749  0304  00A3               	movwf	___wmul@multiplier
  1750  0305  082A               	movf	rps_timer1@x+1,w	;volatile
  1751  0306  00A6               	movwf	___wmul@multiplicand+1
  1752  0307  0829               	movf	rps_timer1@x,w	;volatile
  1753  0308  00A5               	movwf	___wmul@multiplicand
  1754  0309  120A  118A  27BF  120A  118A  	fcall	___wmul
  1755  030E  1283               	bcf	3,5	;RP0=0, select bank0
  1756  030F  1303               	bcf	3,6	;RP1=0, select bank0
  1757  0310  0824               	movf	?___wmul+1,w
  1758  0311  00BA               	movwf	_rps_timer1$588+1
  1759  0312  0823               	movf	?___wmul,w
  1760  0313  00B9               	movwf	_rps_timer1$588
  1761                           
  1762                           ;main.c: 125: x.value = T1FOSC / (t - x.time) * x.count / x.div;
  1763  0314  0830               	movf	rps_timer1@x+7,w	;volatile
  1764  0315  00F5               	movwf	___lwdiv@divisor+1
  1765  0316  082F               	movf	rps_timer1@x+6,w	;volatile
  1766  0317  00F4               	movwf	___lwdiv@divisor
  1767  0318  083A               	movf	_rps_timer1$588+1,w
  1768  0319  00F7               	movwf	___lwdiv@dividend+1
  1769  031A  0839               	movf	_rps_timer1$588,w
  1770  031B  00F6               	movwf	___lwdiv@dividend
  1771  031C  120A  118A  26FA  120A  118A  	fcall	___lwdiv
  1772  0321  0875               	movf	?___lwdiv+1,w
  1773  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0323  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0324  00AE               	movwf	rps_timer1@x+5	;volatile
  1776  0325  0874               	movf	?___lwdiv,w
  1777  0326  00AD               	movwf	rps_timer1@x+4	;volatile
  1778                           
  1779                           ;main.c: 126: if (x.value > x.max) x.max = x.value;
  1780  0327  082E               	movf	rps_timer1@x+5,w	;volatile
  1781  0328  0232               	subwf	rps_timer1@x+9,w	;volatile
  1782  0329  1D03               	skipz
  1783  032A  2B2D               	goto	u1095
  1784  032B  082D               	movf	rps_timer1@x+4,w	;volatile
  1785  032C  0231               	subwf	rps_timer1@x+8,w	;volatile
  1786  032D                     u1095:	
  1787  032D  1803               	skipnc
  1788  032E  2B33               	goto	l1296
  1789  032F  082E               	movf	rps_timer1@x+5,w	;volatile
  1790  0330  00B2               	movwf	rps_timer1@x+9	;volatile
  1791  0331  082D               	movf	rps_timer1@x+4,w	;volatile
  1792  0332  00B1               	movwf	rps_timer1@x+8	;volatile
  1793  0333                     l1296:	
  1794                           
  1795                           ;main.c: 127: x.count = 0;
  1796  0333  01A9               	clrf	rps_timer1@x	;volatile
  1797  0334  01AA               	clrf	rps_timer1@x+1	;volatile
  1798                           
  1799                           ;main.c: 128: x.time = t;
  1800  0335  0834               	movf	rps_timer1@t+1,w
  1801  0336  00AC               	movwf	rps_timer1@x+3	;volatile
  1802  0337  0833               	movf	rps_timer1@t,w
  1803  0338  00AB               	movwf	rps_timer1@x+2	;volatile
  1804                           
  1805                           ;main.c: 129: }
  1806  0339  0008               	return
  1807  033A                     l1300:	
  1808                           
  1809                           ;main.c: 130: else if ( (t - x.time) > (T1FOSC / RPSMIN) ) {
  1810  033A  092B               	comf	rps_timer1@x+2,w	;volatile
  1811  033B  00B5               	movwf	??_rps_timer1
  1812  033C  092C               	comf	rps_timer1@x+3,w	;volatile
  1813  033D  00B6               	movwf	??_rps_timer1+1
  1814  033E  0AB5               	incf	??_rps_timer1,f
  1815  033F  1903               	skipnz
  1816  0340  0AB6               	incf	??_rps_timer1+1,f
  1817  0341  0833               	movf	rps_timer1@t,w
  1818  0342  0735               	addwf	??_rps_timer1,w
  1819  0343  00B7               	movwf	??_rps_timer1+2
  1820  0344  0834               	movf	rps_timer1@t+1,w
  1821  0345  1803               	skipnc
  1822  0346  0A34               	incf	rps_timer1@t+1,w
  1823  0347  0736               	addwf	??_rps_timer1+1,w
  1824  0348  00B8               	movwf	??_rps_timer1+3
  1825  0349  3013               	movlw	low (_RPSMIN-__stringbase)
  1826  034A  0084               	movwf	4
  1827  034B  120A  118A  2662  120A  118A  	fcall	stringdir
  1828  0350  00F4               	movwf	___lwdiv@divisor
  1829  0351  120A  118A  2662  120A  118A  	fcall	stringdir
  1830  0356  00F5               	movwf	___lwdiv@divisor+1
  1831  0357  3015               	movlw	low (_T1FOSC-__stringbase)
  1832  0358  0084               	movwf	4
  1833  0359  120A  118A  2662  120A  118A  	fcall	stringdir
  1834  035E  00F6               	movwf	___lwdiv@dividend
  1835  035F  120A  118A  2662  120A  118A  	fcall	stringdir
  1836  0364  00F7               	movwf	___lwdiv@dividend+1
  1837  0365  120A  118A  26FA  120A  118A  	fcall	___lwdiv
  1838  036A  1283               	bcf	3,5	;RP0=0, select bank0
  1839  036B  1303               	bcf	3,6	;RP1=0, select bank0
  1840  036C  0838               	movf	??_rps_timer1+3,w
  1841  036D  0275               	subwf	?___lwdiv+1,w
  1842  036E  1D03               	skipz
  1843  036F  2B72               	goto	u1105
  1844  0370  0837               	movf	??_rps_timer1+2,w
  1845  0371  0274               	subwf	?___lwdiv,w
  1846  0372                     u1105:	
  1847  0372  1803               	skipnc
  1848  0373  0008               	return
  1849                           
  1850                           ;main.c: 131: x.count = -1;
  1851  0374  30FF               	movlw	255
  1852  0375  00A9               	movwf	rps_timer1@x	;volatile
  1853  0376  30FF               	movlw	255
  1854  0377  00AA               	movwf	rps_timer1@x+1	;volatile
  1855                           
  1856                           ;main.c: 132: x.value = 0;
  1857  0378  01AD               	clrf	rps_timer1@x+4	;volatile
  1858  0379  01AE               	clrf	rps_timer1@x+5	;volatile
  1859                           
  1860                           ;main.c: 133: x.time = t;
  1861  037A  0834               	movf	rps_timer1@t+1,w
  1862  037B  00AC               	movwf	rps_timer1@x+3	;volatile
  1863  037C  0833               	movf	rps_timer1@t,w
  1864  037D  00AB               	movwf	rps_timer1@x+2	;volatile
  1865  037E  0008               	return
  1866  037F                     __end_of_rps_timer1:	
  1867                           ;main.c: 134: }
  1868                           ;main.c: 135: return x;
  1869                           
  1870                           
  1871                           	psect	text9
  1872  07E2                     __ptext9:	
  1873 ;; *************** function _read_tmr0 *****************
  1874 ;; Defined at:
  1875 ;;		line 145 in file "main.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1889 ;;      Params:         0       0       0       0       0
  1890 ;;      Locals:         0       0       0       0       0
  1891 ;;      Temps:          0       2       0       0       0
  1892 ;;      Totals:         0       2       0       0       0
  1893 ;;Total ram usage:        2 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    4
  1896 ;; This function calls:
  1897 ;;		_printf
  1898 ;; This function is called by:
  1899 ;;		_io_switch
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           
  1904                           ;psect for function _read_tmr0
  1905  07E2                     _read_tmr0:	
  1906                           
  1907                           ;main.c: 146: PUT = 0;
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _read_tmr0: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1911  07E2  1079               	bcf	_PUT/(0+8),_PUT& (0+7)
  1912                           
  1913                           ;main.c: 147: printf("%d", TMR0);
  1914  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  1915  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  1916  07E5  0801               	movf	1,w	;volatile
  1917  07E6  00BF               	movwf	??_read_tmr0
  1918  07E7  01C0               	clrf	??_read_tmr0+1
  1919  07E8  083F               	movf	??_read_tmr0,w
  1920  07E9  00AE               	movwf	?_printf
  1921  07EA  0840               	movf	??_read_tmr0+1,w
  1922  07EB  00AF               	movwf	?_printf+1
  1923  07EC  304C               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1924  07ED  120A  118A  2025   	fcall	_printf
  1925                           
  1926                           ;main.c: 148: TMR0 = 0;
  1927  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  1928  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  1929  07F2  0181               	clrf	1	;volatile
  1930  07F3  0008               	return
  1931  07F4                     __end_of_read_tmr0:	
  1932                           ;main.c: 149: return;
  1933                           
  1934                           
  1935                           	psect	text10
  1936  0025                     __ptext10:	
  1937 ;; *************** function _printf *****************
  1938 ;; Defined at:
  1939 ;;		line 464 in file "/opt/microchip/xc8/v1.43/sources/common/doprnt.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  f               1    wreg     PTR const unsigned char 
  1942 ;;		 -> STR_6(3), STR_5(3), STR_4(11), STR_3(9), 
  1943 ;;		 -> STR_2(16), STR_1(17), 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  f               1   27[BANK0 ] PTR const unsigned char 
  1946 ;;		 -> STR_6(3), STR_5(3), STR_4(11), STR_3(9), 
  1947 ;;		 -> STR_2(16), STR_1(17), 
  1948 ;;  tmpval          4    0        struct .
  1949 ;;  width           2   28[BANK0 ] int 
  1950 ;;  val             2   25[BANK0 ] unsigned int 
  1951 ;;  len             2   22[BANK0 ] unsigned int 
  1952 ;;  c               1   30[BANK0 ] char 
  1953 ;;  flag            1   24[BANK0 ] unsigned char 
  1954 ;;  ap              1   21[BANK0 ] PTR void [1]
  1955 ;;		 -> ?_printf(2), 
  1956 ;;  prec            1   20[BANK0 ] char 
  1957 ;;  cp              1   19[BANK0 ] PTR const unsigned char 
  1958 ;;		 -> printf@c(1), 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  2   14[BANK0 ] int 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1968 ;;      Params:         0       2       0       0       0
  1969 ;;      Locals:         0      12       0       0       0
  1970 ;;      Temps:          0       3       0       0       0
  1971 ;;      Totals:         0      17       0       0       0
  1972 ;;Total ram usage:       17 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    3
  1975 ;; This function calls:
  1976 ;;		___lwdiv
  1977 ;;		___lwmod
  1978 ;;		___wmul
  1979 ;;		_isdigit
  1980 ;;		_putch
  1981 ;; This function is called by:
  1982 ;;		_init_lcd
  1983 ;;		_main_lcd
  1984 ;;		_read_tmr1
  1985 ;;		_read_tmr0
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           
  1990                           ;psect for function _printf
  1991  0025                     _printf:	
  1992                           
  1993                           ;incstack = 0
  1994                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1995                           ;printf@f stored from wreg
  1996  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0026  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0027  00BB               	movwf	printf@f
  1999                           
  2000                           ;doprnt.c: 466: va_list ap;
  2001                           ;doprnt.c: 499: signed char c;
  2002                           ;doprnt.c: 501: int width;
  2003                           ;doprnt.c: 506: signed char prec;
  2004                           ;doprnt.c: 508: unsigned char flag;
  2005                           ;doprnt.c: 523: union {
  2006                           ;doprnt.c: 524: unsigned long vd;
  2007                           ;doprnt.c: 525: double integ;
  2008                           ;doprnt.c: 526: } tmpval;
  2009                           ;doprnt.c: 528: unsigned int val;
  2010                           ;doprnt.c: 529: unsigned len;
  2011                           ;doprnt.c: 530: const char * cp;
  2012                           ;doprnt.c: 533: *ap = __va_start();
  2013  0028  302E               	movlw	(low (?_printf| 0))& (0+255)
  2014  0029  00B0               	movwf	??_printf
  2015  002A  0830               	movf	??_printf,w
  2016  002B  00B5               	movwf	printf@ap
  2017  002C                     l1630:	
  2018                           ;doprnt.c: 536: while(c = *f++) {
  2019                           
  2020  002C  3001               	movlw	1
  2021  002D  1283               	bcf	3,5	;RP0=0, select bank0
  2022  002E  1303               	bcf	3,6	;RP1=0, select bank0
  2023  002F  07BB               	addwf	printf@f,f
  2024  0030  30FF               	movlw	-1
  2025  0031  073B               	addwf	printf@f,w
  2026  0032  0084               	movwf	4
  2027  0033  120A  118A  2662  120A  118A  	fcall	stringdir
  2028  0038  00B0               	movwf	??_printf
  2029  0039  0830               	movf	??_printf,w
  2030  003A  00BE               	movwf	printf@c
  2031  003B  083E               	movf	printf@c,w
  2032  003C  1903               	btfsc	3,2
  2033  003D  0008               	return
  2034                           
  2035                           ;doprnt.c: 538: if(c != '%')
  2036  003E  3025               	movlw	37
  2037  003F  063E               	xorwf	printf@c,w
  2038  0040  1903               	btfsc	3,2
  2039  0041  2849               	goto	l1542
  2040                           
  2041                           ;doprnt.c: 540: {
  2042                           ;doprnt.c: 541: (putch(c) );
  2043  0042  083E               	movf	printf@c,w
  2044  0043  120A  118A  24B6  120A  118A  	fcall	_putch
  2045                           
  2046                           ;doprnt.c: 542: continue;
  2047  0048  282C               	goto	l1630
  2048  0049                     l1542:	
  2049                           
  2050                           ;doprnt.c: 543: }
  2051                           ;doprnt.c: 546: width = 0;
  2052  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2053  004A  1303               	bcf	3,6	;RP1=0, select bank0
  2054  004B  01BC               	clrf	printf@width
  2055  004C  01BD               	clrf	printf@width+1
  2056                           
  2057                           ;doprnt.c: 548: flag = 0;
  2058  004D  01B8               	clrf	printf@flag
  2059                           
  2060                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2061  004E  083B               	movf	printf@f,w
  2062  004F  0084               	movwf	4
  2063  0050  120A  118A  2662  120A  118A  	fcall	stringdir
  2064  0055  120A  158A  27CF  120A  118A  	fcall	_isdigit
  2065  005A  1C03               	btfss	3,0
  2066  005B  28E9               	goto	l1576
  2067                           
  2068                           ;doprnt.c: 598: width = 0;
  2069  005C  1283               	bcf	3,5	;RP0=0, select bank0
  2070  005D  1303               	bcf	3,6	;RP1=0, select bank0
  2071  005E  01BC               	clrf	printf@width
  2072  005F  01BD               	clrf	printf@width+1
  2073  0060                     l1548:	
  2074                           ;doprnt.c: 599: do {
  2075                           
  2076                           
  2077                           ;doprnt.c: 600: width *= 10;
  2078  0060  300A               	movlw	10
  2079  0061  1283               	bcf	3,5	;RP0=0, select bank0
  2080  0062  1303               	bcf	3,6	;RP1=0, select bank0
  2081  0063  00A3               	movwf	___wmul@multiplier
  2082  0064  3000               	movlw	0
  2083  0065  00A4               	movwf	___wmul@multiplier+1
  2084  0066  083D               	movf	printf@width+1,w
  2085  0067  00A6               	movwf	___wmul@multiplicand+1
  2086  0068  083C               	movf	printf@width,w
  2087  0069  00A5               	movwf	___wmul@multiplicand
  2088  006A  120A  118A  27BF  120A  118A  	fcall	___wmul
  2089  006F  1283               	bcf	3,5	;RP0=0, select bank0
  2090  0070  1303               	bcf	3,6	;RP1=0, select bank0
  2091  0071  0824               	movf	?___wmul+1,w
  2092  0072  00BD               	movwf	printf@width+1
  2093  0073  0823               	movf	?___wmul,w
  2094  0074  00BC               	movwf	printf@width
  2095                           
  2096                           ;doprnt.c: 601: width += *f++ - '0';
  2097  0075  083B               	movf	printf@f,w
  2098  0076  0084               	movwf	4
  2099  0077  120A  118A  2662  120A  118A  	fcall	stringdir
  2100  007C  3ED0               	addlw	208
  2101  007D  00B0               	movwf	??_printf
  2102  007E  30FF               	movlw	255
  2103  007F  1803               	skipnc
  2104  0080  3000               	movlw	0
  2105  0081  00B1               	movwf	??_printf+1
  2106  0082  0830               	movf	??_printf,w
  2107  0083  07BC               	addwf	printf@width,f
  2108  0084  1803               	skipnc
  2109  0085  0ABD               	incf	printf@width+1,f
  2110  0086  0831               	movf	??_printf+1,w
  2111  0087  07BD               	addwf	printf@width+1,f
  2112  0088  3001               	movlw	1
  2113  0089  00B0               	movwf	??_printf
  2114  008A  0830               	movf	??_printf,w
  2115  008B  07BB               	addwf	printf@f,f
  2116                           
  2117                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2118  008C  083B               	movf	printf@f,w
  2119  008D  0084               	movwf	4
  2120  008E  120A  118A  2662  120A  118A  	fcall	stringdir
  2121  0093  120A  158A  27CF  120A  118A  	fcall	_isdigit
  2122  0098  1C03               	btfss	3,0
  2123  0099  28E9               	goto	l1576
  2124  009A  2860               	goto	l1548
  2125  009B                     l1556:	
  2126                           ;doprnt.c: 750: dostring:
  2127                           
  2128                           ;doprnt.c: 698: case 'i':
  2129                           ;doprnt.c: 699: break;
  2130                           
  2131                           ;doprnt.c: 697: case 'd':
  2132                           
  2133                           ;doprnt.c: 638: goto alldone;
  2134                           
  2135                           ;doprnt.c: 637: case 0:
  2136                           
  2137                           ;doprnt.c: 608: }
  2138                           ;doprnt.c: 635: switch(c = *f++) {
  2139                           
  2140                           
  2141                           ;doprnt.c: 757: if(width > len)
  2142  009B  1283               	bcf	3,5	;RP0=0, select bank0
  2143  009C  1303               	bcf	3,6	;RP1=0, select bank0
  2144  009D  083D               	movf	printf@width+1,w
  2145  009E  0237               	subwf	printf@len+1,w
  2146  009F  1D03               	skipz
  2147  00A0  28A3               	goto	u1375
  2148  00A1  083C               	movf	printf@width,w
  2149  00A2  0236               	subwf	printf@len,w
  2150  00A3                     u1375:	
  2151  00A3  1803               	skipnc
  2152  00A4  28AC               	goto	l1560
  2153                           
  2154                           ;doprnt.c: 758: width -= len;
  2155  00A5  0836               	movf	printf@len,w
  2156  00A6  02BC               	subwf	printf@width,f
  2157  00A7  0837               	movf	printf@len+1,w
  2158  00A8  1C03               	skipc
  2159  00A9  03BD               	decf	printf@width+1,f
  2160  00AA  02BD               	subwf	printf@width+1,f
  2161  00AB  28AE               	goto	l1564
  2162  00AC                     l1560:	
  2163                           
  2164                           ;doprnt.c: 759: else
  2165                           ;doprnt.c: 760: width = 0;
  2166  00AC  01BC               	clrf	printf@width
  2167  00AD  01BD               	clrf	printf@width+1
  2168  00AE                     l1564:	
  2169                           ;doprnt.c: 764: while(width--)
  2170                           
  2171  00AE  30FF               	movlw	255
  2172  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  2173  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  2174  00B1  07BC               	addwf	printf@width,f
  2175  00B2  1803               	skipnc
  2176  00B3  0ABD               	incf	printf@width+1,f
  2177  00B4  30FF               	movlw	255
  2178  00B5  07BD               	addwf	printf@width+1,f
  2179  00B6  0A3C               	incf	printf@width,w
  2180  00B7  1903               	btfsc	3,2
  2181  00B8  0A3D               	incf	printf@width+1,w
  2182  00B9  1903               	btfsc	3,2
  2183  00BA  28D1               	goto	l1570
  2184                           
  2185                           ;doprnt.c: 765: (putch(' ') );
  2186  00BB  3020               	movlw	32
  2187  00BC  120A  118A  24B6  120A  118A  	fcall	_putch
  2188  00C1  28AE               	goto	l1564
  2189  00C2                     l1566:	
  2190                           ;doprnt.c: 767: while(len--)
  2191                           
  2192                           
  2193                           ;doprnt.c: 768: (putch(*cp++) );
  2194  00C2  0833               	movf	printf@cp,w
  2195  00C3  0084               	movwf	4
  2196  00C4  1383               	bcf	3,7	;select IRP bank0
  2197  00C5  0800               	movf	0,w
  2198  00C6  120A  118A  24B6  120A  118A  	fcall	_putch
  2199  00CB  3001               	movlw	1
  2200  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  2201  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  2202  00CE  00B0               	movwf	??_printf
  2203  00CF  0830               	movf	??_printf,w
  2204  00D0  07B3               	addwf	printf@cp,f
  2205  00D1                     l1570:	
  2206  00D1  3001               	movlw	1
  2207  00D2  02B6               	subwf	printf@len,f
  2208  00D3  3000               	movlw	0
  2209  00D4  1C03               	skipc
  2210  00D5  03B7               	decf	printf@len+1,f
  2211  00D6  02B7               	subwf	printf@len+1,f
  2212  00D7  0A36               	incf	printf@len,w
  2213  00D8  1D03               	skipz
  2214  00D9  28C2               	goto	l1566
  2215  00DA  0A37               	incf	printf@len+1,w
  2216  00DB  1903               	btfsc	3,2
  2217  00DC  282C               	goto	l1630
  2218  00DD  28C2               	goto	l1566
  2219  00DE                     l1572:	
  2220                           ;doprnt.c: 802: default:
  2221                           
  2222                           ;doprnt.c: 774: continue;
  2223                           
  2224                           
  2225                           ;doprnt.c: 805: cp = (char *)&c;
  2226  00DE  303E               	movlw	(low (printf@c| 0))& (0+255)
  2227  00DF  00B0               	movwf	??_printf
  2228  00E0  0830               	movf	??_printf,w
  2229  00E1  00B3               	movwf	printf@cp
  2230                           
  2231                           ;doprnt.c: 806: len = 1;
  2232  00E2  3001               	movlw	1
  2233  00E3  00B6               	movwf	printf@len
  2234  00E4  3000               	movlw	0
  2235  00E5  00B7               	movwf	printf@len+1
  2236                           
  2237                           ;doprnt.c: 807: goto dostring;
  2238  00E6  289B               	goto	l1556
  2239  00E7                     l181:	
  2240                           ;doprnt.c: 817: case 'u':
  2241                           
  2242                           
  2243                           ;doprnt.c: 818: flag |= 0x40;
  2244  00E7  1738               	bsf	printf@flag,6
  2245                           
  2246                           ;doprnt.c: 822: }
  2247                           
  2248                           ;doprnt.c: 819: break;
  2249  00E8  2903               	goto	l170
  2250  00E9                     l1576:	
  2251  00E9  3001               	movlw	1
  2252  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  2253  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  2254  00EC  07BB               	addwf	printf@f,f
  2255  00ED  30FF               	movlw	-1
  2256  00EE  073B               	addwf	printf@f,w
  2257  00EF  0084               	movwf	4
  2258  00F0  120A  118A  2662  120A  118A  	fcall	stringdir
  2259  00F5  00BE               	movwf	printf@c
  2260                           
  2261                           ; Switch size 1, requested type "space"
  2262                           ; Number of cases is 4, Range of values is 0 to 117
  2263                           ; switch strategies available:
  2264                           ; Name         Instructions Cycles
  2265                           ; simple_byte           13     7 (average)
  2266                           ; jumptable            260     6 (fixed)
  2267                           ;	Chosen strategy is simple_byte
  2268  00F6  3A00               	xorlw	0	; case 0
  2269  00F7  1903               	skipnz
  2270  00F8  29E9               	goto	l199
  2271  00F9  3A64               	xorlw	100	; case 100
  2272  00FA  1903               	skipnz
  2273  00FB  2903               	goto	l170
  2274  00FC  3A0D               	xorlw	13	; case 105
  2275  00FD  1903               	skipnz
  2276  00FE  2903               	goto	l170
  2277  00FF  3A1C               	xorlw	28	; case 117
  2278  0100  1903               	skipnz
  2279  0101  28E7               	goto	l181
  2280  0102  28DE               	goto	l1572
  2281  0103                     l170:	
  2282                           
  2283                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2284  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0104  1303               	bcf	3,6	;RP1=0, select bank0
  2286  0105  1B38               	btfsc	printf@flag,6
  2287  0106  291F               	goto	l1588
  2288                           
  2289                           ;doprnt.c: 1253: {
  2290                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2291  0107  0835               	movf	printf@ap,w
  2292  0108  0084               	movwf	4
  2293  0109  1383               	bcf	3,7	;select IRP bank0
  2294  010A  0800               	movf	0,w
  2295  010B  00B9               	movwf	printf@val
  2296  010C  0A84               	incf	4,f
  2297  010D  0800               	movf	0,w
  2298  010E  00BA               	movwf	printf@val+1
  2299  010F  3002               	movlw	2
  2300  0110  00B0               	movwf	??_printf
  2301  0111  0830               	movf	??_printf,w
  2302  0112  07B5               	addwf	printf@ap,f
  2303                           
  2304                           ;doprnt.c: 1261: if((int)val < 0) {
  2305  0113  1FBA               	btfss	printf@val+1,7
  2306  0114  292B               	goto	l1592
  2307                           
  2308                           ;doprnt.c: 1262: flag |= 0x03;
  2309  0115  3003               	movlw	3
  2310  0116  00B0               	movwf	??_printf
  2311  0117  0830               	movf	??_printf,w
  2312  0118  04B8               	iorwf	printf@flag,f
  2313                           
  2314                           ;doprnt.c: 1263: val = -val;
  2315  0119  09B9               	comf	printf@val,f
  2316  011A  09BA               	comf	printf@val+1,f
  2317  011B  0AB9               	incf	printf@val,f
  2318  011C  1903               	skipnz
  2319  011D  0ABA               	incf	printf@val+1,f
  2320                           
  2321                           ;doprnt.c: 1264: }
  2322                           ;doprnt.c: 1266: }
  2323  011E  292B               	goto	l1592
  2324  011F                     l1588:	
  2325                           
  2326                           ;doprnt.c: 1268: else
  2327                           ;doprnt.c: 1273: {
  2328                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2329  011F  0835               	movf	printf@ap,w
  2330  0120  0084               	movwf	4
  2331  0121  1383               	bcf	3,7	;select IRP bank0
  2332  0122  0800               	movf	0,w
  2333  0123  00B9               	movwf	printf@val
  2334  0124  0A84               	incf	4,f
  2335  0125  0800               	movf	0,w
  2336  0126  00BA               	movwf	printf@val+1
  2337  0127  3002               	movlw	2
  2338  0128  00B0               	movwf	??_printf
  2339  0129  0830               	movf	??_printf,w
  2340  012A  07B5               	addwf	printf@ap,f
  2341  012B                     l1592:	
  2342                           
  2343                           ;doprnt.c: 1287: }
  2344                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2345  012B  01BE               	clrf	printf@c
  2346  012C  0ABE               	incf	printf@c,f
  2347  012D  3005               	movlw	5
  2348  012E  063E               	xorwf	printf@c,w
  2349  012F  1903               	btfsc	3,2
  2350  0130  2952               	goto	l1604
  2351  0131                     l1598:	
  2352                           
  2353                           ;doprnt.c: 1306: if(val < dpowers[c])
  2354  0131  083E               	movf	printf@c,w
  2355  0132  00B0               	movwf	??_printf
  2356  0133  0730               	addwf	??_printf,w
  2357  0134  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2358  0135  0084               	movwf	4
  2359  0136  120A  118A  2662  120A  118A  	fcall	stringdir
  2360  013B  00B1               	movwf	??_printf+1
  2361  013C  120A  118A  2662  120A  118A  	fcall	stringdir
  2362  0141  00B2               	movwf	??_printf+2
  2363  0142  0832               	movf	??_printf+2,w
  2364  0143  023A               	subwf	printf@val+1,w
  2365  0144  1D03               	skipz
  2366  0145  2948               	goto	u1435
  2367  0146  0831               	movf	??_printf+1,w
  2368  0147  0239               	subwf	printf@val,w
  2369  0148                     u1435:	
  2370  0148  1C03               	btfss	3,0
  2371  0149  2952               	goto	l1604
  2372                           
  2373                           ;doprnt.c: 1307: break;
  2374  014A  3001               	movlw	1
  2375  014B  00B0               	movwf	??_printf
  2376  014C  0830               	movf	??_printf,w
  2377  014D  07BE               	addwf	printf@c,f
  2378  014E  3005               	movlw	5
  2379  014F  063E               	xorwf	printf@c,w
  2380  0150  1D03               	btfss	3,2
  2381  0151  2931               	goto	l1598
  2382  0152                     l1604:	
  2383                           
  2384                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2385  0152  083C               	movf	printf@width,w
  2386  0153  043D               	iorwf	printf@width+1,w
  2387  0154  1903               	btfsc	3,2
  2388  0155  2960               	goto	l188
  2389  0156  0838               	movf	printf@flag,w
  2390  0157  3903               	andlw	3
  2391  0158  1903               	btfsc	3,2
  2392  0159  2960               	goto	l188
  2393                           
  2394                           ;doprnt.c: 1346: width--;
  2395  015A  30FF               	movlw	255
  2396  015B  07BC               	addwf	printf@width,f
  2397  015C  1803               	skipnc
  2398  015D  0ABD               	incf	printf@width+1,f
  2399  015E  30FF               	movlw	255
  2400  015F  07BD               	addwf	printf@width+1,f
  2401  0160                     l188:	
  2402                           
  2403                           ;doprnt.c: 1381: if(width > c)
  2404  0160  083E               	movf	printf@c,w
  2405  0161  00B0               	movwf	??_printf
  2406  0162  01B1               	clrf	??_printf+1
  2407  0163  1BB0               	btfsc	??_printf,7
  2408  0164  03B1               	decf	??_printf+1,f
  2409  0165  0831               	movf	??_printf+1,w
  2410  0166  3A80               	xorlw	128
  2411  0167  00B2               	movwf	??_printf+2
  2412  0168  083D               	movf	printf@width+1,w
  2413  0169  3A80               	xorlw	128
  2414  016A  0232               	subwf	??_printf+2,w
  2415  016B  1D03               	skipz
  2416  016C  296F               	goto	u1475
  2417  016D  083C               	movf	printf@width,w
  2418  016E  0230               	subwf	??_printf,w
  2419  016F                     u1475:	
  2420  016F  1803               	skipnc
  2421  0170  297F               	goto	l1612
  2422                           
  2423                           ;doprnt.c: 1382: width -= c;
  2424  0171  1283               	bcf	3,5	;RP0=0, select bank0
  2425  0172  1303               	bcf	3,6	;RP1=0, select bank0
  2426  0173  083E               	movf	printf@c,w
  2427  0174  00B0               	movwf	??_printf
  2428  0175  01B1               	clrf	??_printf+1
  2429  0176  1BB0               	btfsc	??_printf,7
  2430  0177  03B1               	decf	??_printf+1,f
  2431  0178  0830               	movf	??_printf,w
  2432  0179  02BC               	subwf	printf@width,f
  2433  017A  0831               	movf	??_printf+1,w
  2434  017B  1C03               	skipc
  2435  017C  03BD               	decf	printf@width+1,f
  2436  017D  02BD               	subwf	printf@width+1,f
  2437  017E  2983               	goto	l1614
  2438  017F                     l1612:	
  2439                           
  2440                           ;doprnt.c: 1383: else
  2441                           ;doprnt.c: 1384: width = 0;
  2442  017F  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0180  1303               	bcf	3,6	;RP1=0, select bank0
  2444  0181  01BC               	clrf	printf@width
  2445  0182  01BD               	clrf	printf@width+1
  2446  0183                     l1614:	
  2447                           
  2448                           ;doprnt.c: 1422: {
  2449                           ;doprnt.c: 1424: if(width
  2450                           ;doprnt.c: 1428: )
  2451  0183  083C               	movf	printf@width,w
  2452  0184  043D               	iorwf	printf@width+1,w
  2453  0185  1903               	btfsc	3,2
  2454  0186  2999               	goto	l1620
  2455  0187                     l1616:	
  2456                           ;doprnt.c: 1429: do
  2457                           
  2458                           
  2459                           ;doprnt.c: 1430: (putch(' ') );
  2460  0187  3020               	movlw	32
  2461  0188  120A  118A  24B6  120A  118A  	fcall	_putch
  2462                           
  2463                           ;doprnt.c: 1431: while(--width);
  2464  018D  30FF               	movlw	255
  2465  018E  1283               	bcf	3,5	;RP0=0, select bank0
  2466  018F  1303               	bcf	3,6	;RP1=0, select bank0
  2467  0190  07BC               	addwf	printf@width,f
  2468  0191  1803               	skipnc
  2469  0192  0ABD               	incf	printf@width+1,f
  2470  0193  30FF               	movlw	255
  2471  0194  07BD               	addwf	printf@width+1,f
  2472  0195  083C               	movf	printf@width,w
  2473  0196  043D               	iorwf	printf@width+1,w
  2474  0197  1D03               	btfss	3,2
  2475  0198  2987               	goto	l1616
  2476  0199                     l1620:	
  2477                           
  2478                           ;doprnt.c: 1438: if(flag & 0x03)
  2479  0199  0838               	movf	printf@flag,w
  2480  019A  3903               	andlw	3
  2481  019B  1903               	btfsc	3,2
  2482  019C  29A3               	goto	l1624
  2483                           
  2484                           ;doprnt.c: 1439: (putch('-') );
  2485  019D  302D               	movlw	45
  2486  019E  120A  118A  24B6  120A  118A  	fcall	_putch
  2487  01A3                     l1624:	
  2488                           
  2489                           ;doprnt.c: 1469: }
  2490                           ;doprnt.c: 1472: prec = c;
  2491  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  2492  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  2493  01A5  083E               	movf	printf@c,w
  2494  01A6  00B0               	movwf	??_printf
  2495  01A7  0830               	movf	??_printf,w
  2496  01A8  00B4               	movwf	printf@prec
  2497  01A9                     l1628:	
  2498                           ;doprnt.c: 1474: while(prec--) {
  2499                           
  2500  01A9  30FF               	movlw	255
  2501  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  2502  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  2503  01AC  00B0               	movwf	??_printf
  2504  01AD  0830               	movf	??_printf,w
  2505  01AE  07B4               	addwf	printf@prec,f
  2506  01AF  0A34               	incf	printf@prec,w
  2507  01B0  1903               	btfsc	3,2
  2508  01B1  282C               	goto	l1630
  2509                           
  2510                           ;doprnt.c: 1478: {
  2511                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2512  01B2  300A               	movlw	10
  2513  01B3  00A3               	movwf	___lwmod@divisor
  2514  01B4  3000               	movlw	0
  2515  01B5  00A4               	movwf	___lwmod@divisor+1
  2516  01B6  0834               	movf	printf@prec,w
  2517  01B7  00B0               	movwf	??_printf
  2518  01B8  0730               	addwf	??_printf,w
  2519  01B9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2520  01BA  0084               	movwf	4
  2521  01BB  120A  118A  2662  120A  118A  	fcall	stringdir
  2522  01C0  00F4               	movwf	___lwdiv@divisor
  2523  01C1  120A  118A  2662  120A  118A  	fcall	stringdir
  2524  01C6  00F5               	movwf	___lwdiv@divisor+1
  2525  01C7  083A               	movf	printf@val+1,w
  2526  01C8  00F7               	movwf	___lwdiv@dividend+1
  2527  01C9  0839               	movf	printf@val,w
  2528  01CA  00F6               	movwf	___lwdiv@dividend
  2529  01CB  120A  118A  26FA  120A  118A  	fcall	___lwdiv
  2530  01D0  0875               	movf	?___lwdiv+1,w
  2531  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  2532  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  2533  01D3  00A6               	movwf	___lwmod@dividend+1
  2534  01D4  0874               	movf	?___lwdiv,w
  2535  01D5  00A5               	movwf	___lwmod@dividend
  2536  01D6  120A  118A  2738  120A  118A  	fcall	___lwmod
  2537  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  2538  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  2539  01DD  0823               	movf	?___lwmod,w
  2540  01DE  3E30               	addlw	48
  2541  01DF  00B1               	movwf	??_printf+1
  2542  01E0  0831               	movf	??_printf+1,w
  2543  01E1  00BE               	movwf	printf@c
  2544                           
  2545                           ;doprnt.c: 1523: }
  2546                           ;doprnt.c: 1524: (putch(c) );
  2547  01E2  083E               	movf	printf@c,w
  2548  01E3  120A  118A  24B6  120A  118A  	fcall	_putch
  2549  01E8  29A9               	goto	l1628
  2550  01E9                     l199:	
  2551                           ;doprnt.c: 1540: return 0;
  2552                           ;	Return value of _printf is never used
  2553                           
  2554                           ;doprnt.c: 1525: }
  2555                           ;doprnt.c: 1533: }
  2556                           ;doprnt.c: 1535: alldone:
  2557                           
  2558  01E9  0008               	return
  2559  01EA                     __end_of_printf:	
  2560                           
  2561                           	psect	text11
  2562  04B6                     __ptext11:	
  2563 ;; *************** function _putch *****************
  2564 ;; Defined at:
  2565 ;;		line 49 in file "main.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  msg             1    wreg     unsigned char 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  msg             1   13[BANK0 ] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2579 ;;      Params:         0       0       0       0       0
  2580 ;;      Locals:         0       1       0       0       0
  2581 ;;      Temps:          4       0       0       0       0
  2582 ;;      Totals:         4       1       0       0       0
  2583 ;;Total ram usage:        5 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    2
  2586 ;; This function calls:
  2587 ;;		___lldiv
  2588 ;; This function is called by:
  2589 ;;		_printf
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function _putch
  2595  04B6                     _putch:	
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in _putch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2599                           ;putch@msg stored from wreg
  2600  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  2601  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  2602  04B8  00AD               	movwf	putch@msg
  2603                           
  2604                           ;main.c: 50: if (PUT) {
  2605  04B9  1C79               	btfss	_PUT/(0+8),_PUT& (0+7)
  2606  04BA  2D23               	goto	l74
  2607                           
  2608                           ;main.c: 51: LCD.RS = 1;
  2609  04BB  1409               	bsf	9,0
  2610                           
  2611                           ;main.c: 52: LCD.CH = msg;
  2612  04BC  082D               	movf	putch@msg,w
  2613  04BD  0088               	movwf	8
  2614                           
  2615                           ;main.c: 53: LCD.EN = 1; _delay(IFOSC/1000000);
  2616  04BE  1509               	bsf	9,2
  2617  04BF  3000               	movlw	0
  2618  04C0  00A3               	movwf	___lldiv@divisor+3
  2619  04C1  300F               	movlw	15
  2620  04C2  00A2               	movwf	___lldiv@divisor+2
  2621  04C3  3042               	movlw	66
  2622  04C4  00A1               	movwf	___lldiv@divisor+1
  2623  04C5  3040               	movlw	64
  2624  04C6  00A0               	movwf	___lldiv@divisor
  2625  04C7  300F               	movlw	low (_IFOSC-__stringbase)
  2626  04C8  0084               	movwf	4
  2627  04C9  120A  118A  2662  120A  118A  	fcall	stringdir
  2628  04CE  00A4               	movwf	___lldiv@dividend
  2629  04CF  120A  118A  2662  120A  118A  	fcall	stringdir
  2630  04D4  00A5               	movwf	___lldiv@dividend+1
  2631  04D5  120A  118A  2662  120A  118A  	fcall	stringdir
  2632  04DA  00A6               	movwf	___lldiv@dividend+2
  2633  04DB  120A  118A  2662  120A  118A  	fcall	stringdir
  2634  04E0  00A7               	movwf	___lldiv@dividend+3
  2635  04E1  120A  118A  2602  120A  118A  	fcall	___lldiv
  2636  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  2637  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  2638  04E8  0820               	movf	?___lldiv,w
  2639  04E9  00F5               	movwf	??_putch
  2640  04EA  0821               	movf	?___lldiv+1,w
  2641  04EB  00F6               	movwf	??_putch+1
  2642  04EC  0822               	movf	?___lldiv+2,w
  2643  04ED  00F7               	movwf	??_putch+2
  2644  04EE  0823               	movf	?___lldiv+3,w
  2645  04EF  00F8               	movwf	??_putch+3
  2646                           
  2647                           ;main.c: 54: LCD.EN = 0; _delay(IFOSC/20000);
  2648  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  2649  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  2650  04F2  1109               	bcf	9,2
  2651  04F3  3000               	movlw	0
  2652  04F4  00A3               	movwf	___lldiv@divisor+3
  2653  04F5  3000               	movlw	0
  2654  04F6  00A2               	movwf	___lldiv@divisor+2
  2655  04F7  304E               	movlw	78
  2656  04F8  00A1               	movwf	___lldiv@divisor+1
  2657  04F9  3020               	movlw	32
  2658  04FA  00A0               	movwf	___lldiv@divisor
  2659  04FB  300F               	movlw	low (_IFOSC-__stringbase)
  2660  04FC  0084               	movwf	4
  2661  04FD  120A  118A  2662  120A  118A  	fcall	stringdir
  2662  0502  00A4               	movwf	___lldiv@dividend
  2663  0503  120A  118A  2662  120A  118A  	fcall	stringdir
  2664  0508  00A5               	movwf	___lldiv@dividend+1
  2665  0509  120A  118A  2662  120A  118A  	fcall	stringdir
  2666  050E  00A6               	movwf	___lldiv@dividend+2
  2667  050F  120A  118A  2662  120A  118A  	fcall	stringdir
  2668  0514  00A7               	movwf	___lldiv@dividend+3
  2669  0515  120A  118A  2602   	fcall	___lldiv
  2670  0518  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0519  1303               	bcf	3,6	;RP1=0, select bank0
  2672  051A  0820               	movf	?___lldiv,w
  2673  051B  00F5               	movwf	??_putch
  2674  051C  0821               	movf	?___lldiv+1,w
  2675  051D  00F6               	movwf	??_putch+1
  2676  051E  0822               	movf	?___lldiv+2,w
  2677  051F  00F7               	movwf	??_putch+2
  2678  0520  0823               	movf	?___lldiv+3,w
  2679  0521  00F8               	movwf	??_putch+3
  2680                           
  2681                           ;main.c: 55: }
  2682  0522  0008               	return
  2683  0523                     l74:	
  2684                           ;main.c: 56: else {
  2685                           ;main.c: 57: while(!TXIF) continue;
  2686                           
  2687  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2688  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2689  0525  1E0C               	btfss	12,4	;volatile
  2690  0526  2D23               	goto	l74
  2691                           
  2692                           ;main.c: 58: TXREG = msg;
  2693  0527  082D               	movf	putch@msg,w
  2694  0528  0099               	movwf	25	;volatile
  2695  0529  0008               	return
  2696  052A                     __end_of_putch:	
  2697                           ;main.c: 59: }
  2698                           ;main.c: 60: return;
  2699                           
  2700                           
  2701                           	psect	text12
  2702  0FCF                     __ptext12:	
  2703 ;; *************** function _isdigit *****************
  2704 ;; Defined at:
  2705 ;;		line 8 in file "/opt/microchip/xc8/v1.43/sources/common/isdigit.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  c               1    wreg     unsigned char 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  c               1    5[COMMON] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;		None               void
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2719 ;;      Params:         0       0       0       0       0
  2720 ;;      Locals:         2       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0
  2722 ;;      Totals:         2       0       0       0       0
  2723 ;;Total ram usage:        2 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    1
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_printf
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           
  2734                           ;psect for function _isdigit
  2735  0FCF                     _isdigit:	
  2736                           
  2737                           ;incstack = 0
  2738                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2739                           ;isdigit@c stored from wreg
  2740  0FCF  00F5               	movwf	isdigit@c
  2741  0FD0  01F4               	clrf	_isdigit$358
  2742  0FD1  303A               	movlw	58
  2743  0FD2  0275               	subwf	isdigit@c,w
  2744  0FD3  1803               	skipnc
  2745  0FD4  2FDB               	goto	l1118
  2746  0FD5  3030               	movlw	48
  2747  0FD6  0275               	subwf	isdigit@c,w
  2748  0FD7  1C03               	skipc
  2749  0FD8  2FDB               	goto	l1118
  2750  0FD9  01F4               	clrf	_isdigit$358
  2751  0FDA  0AF4               	incf	_isdigit$358,f
  2752  0FDB                     l1118:	
  2753  0FDB  0C74               	rrf	_isdigit$358,w
  2754  0FDC  0008               	return
  2755  0FDD                     __end_of_isdigit:	
  2756                           
  2757                           	psect	text13
  2758  07BF                     __ptext13:	
  2759 ;; *************** function ___wmul *****************
  2760 ;; Defined at:
  2761 ;;		line 15 in file "/opt/microchip/xc8/v1.43/sources/common/Umul16.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  multiplier      2    3[BANK0 ] unsigned int 
  2764 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  product         2    7[BANK0 ] unsigned int 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  2    3[BANK0 ] unsigned int 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       4       0       0       0
  2777 ;;      Locals:         0       2       0       0       0
  2778 ;;      Temps:          0       0       0       0       0
  2779 ;;      Totals:         0       6       0       0       0
  2780 ;;Total ram usage:        6 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_rps_timer1
  2787 ;;		_printf
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function ___wmul
  2793  07BF                     ___wmul:	
  2794                           
  2795                           ;incstack = 0
  2796                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2797  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  2798  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  2799  07C1  01A7               	clrf	___wmul@product
  2800  07C2  01A8               	clrf	___wmul@product+1
  2801  07C3                     l1124:	
  2802  07C3  1C23               	btfss	___wmul@multiplier,0
  2803  07C4  2FCB               	goto	l283
  2804  07C5  0825               	movf	___wmul@multiplicand,w
  2805  07C6  07A7               	addwf	___wmul@product,f
  2806  07C7  1803               	skipnc
  2807  07C8  0AA8               	incf	___wmul@product+1,f
  2808  07C9  0826               	movf	___wmul@multiplicand+1,w
  2809  07CA  07A8               	addwf	___wmul@product+1,f
  2810  07CB                     l283:	
  2811  07CB  3001               	movlw	1
  2812  07CC                     u725:	
  2813  07CC  1003               	clrc
  2814  07CD  0DA5               	rlf	___wmul@multiplicand,f
  2815  07CE  0DA6               	rlf	___wmul@multiplicand+1,f
  2816  07CF  3EFF               	addlw	-1
  2817  07D0  1D03               	skipz
  2818  07D1  2FCC               	goto	u725
  2819  07D2  3001               	movlw	1
  2820  07D3                     u735:	
  2821  07D3  1003               	clrc
  2822  07D4  0CA4               	rrf	___wmul@multiplier+1,f
  2823  07D5  0CA3               	rrf	___wmul@multiplier,f
  2824  07D6  3EFF               	addlw	-1
  2825  07D7  1D03               	skipz
  2826  07D8  2FD3               	goto	u735
  2827  07D9  0823               	movf	___wmul@multiplier,w
  2828  07DA  0424               	iorwf	___wmul@multiplier+1,w
  2829  07DB  1D03               	btfss	3,2
  2830  07DC  2FC3               	goto	l1124
  2831  07DD  0828               	movf	___wmul@product+1,w
  2832  07DE  00A4               	movwf	?___wmul+1
  2833  07DF  0827               	movf	___wmul@product,w
  2834  07E0  00A3               	movwf	?___wmul
  2835  07E1  0008               	return
  2836  07E2                     __end_of___wmul:	
  2837                           
  2838                           	psect	text14
  2839  0738                     __ptext14:	
  2840 ;; *************** function ___lwmod *****************
  2841 ;; Defined at:
  2842 ;;		line 6 in file "/opt/microchip/xc8/v1.43/sources/common/lwmod.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  divisor         2    3[BANK0 ] unsigned int 
  2845 ;;  dividend        2    5[BANK0 ] unsigned int 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  counter         1    8[BANK0 ] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  2    3[BANK0 ] unsigned int 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2857 ;;      Params:         0       4       0       0       0
  2858 ;;      Locals:         0       1       0       0       0
  2859 ;;      Temps:          0       1       0       0       0
  2860 ;;      Totals:         0       6       0       0       0
  2861 ;;Total ram usage:        6 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    1
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_printf
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           
  2872                           ;psect for function ___lwmod
  2873  0738                     ___lwmod:	
  2874                           
  2875                           ;incstack = 0
  2876                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2877  0738  1283               	bcf	3,5	;RP0=0, select bank0
  2878  0739  1303               	bcf	3,6	;RP1=0, select bank0
  2879  073A  0823               	movf	___lwmod@divisor,w
  2880  073B  0424               	iorwf	___lwmod@divisor+1,w
  2881  073C  1903               	btfsc	3,2
  2882  073D  2F67               	goto	l1532
  2883  073E  01A8               	clrf	___lwmod@counter
  2884  073F  0AA8               	incf	___lwmod@counter,f
  2885  0740                     l1522:	
  2886  0740  1BA4               	btfsc	___lwmod@divisor+1,7
  2887  0741  2F4E               	goto	l1524
  2888  0742  3001               	movlw	1
  2889  0743                     u1295:	
  2890  0743  1003               	clrc
  2891  0744  0DA3               	rlf	___lwmod@divisor,f
  2892  0745  0DA4               	rlf	___lwmod@divisor+1,f
  2893  0746  3EFF               	addlw	-1
  2894  0747  1D03               	skipz
  2895  0748  2F43               	goto	u1295
  2896  0749  3001               	movlw	1
  2897  074A  00A7               	movwf	??___lwmod
  2898  074B  0827               	movf	??___lwmod,w
  2899  074C  07A8               	addwf	___lwmod@counter,f
  2900  074D  2F40               	goto	l1522
  2901  074E                     l1524:	
  2902  074E  0824               	movf	___lwmod@divisor+1,w
  2903  074F  0226               	subwf	___lwmod@dividend+1,w
  2904  0750  1D03               	skipz
  2905  0751  2F54               	goto	u1315
  2906  0752  0823               	movf	___lwmod@divisor,w
  2907  0753  0225               	subwf	___lwmod@dividend,w
  2908  0754                     u1315:	
  2909  0754  1C03               	skipc
  2910  0755  2F5C               	goto	l1528
  2911  0756  0823               	movf	___lwmod@divisor,w
  2912  0757  02A5               	subwf	___lwmod@dividend,f
  2913  0758  0824               	movf	___lwmod@divisor+1,w
  2914  0759  1C03               	skipc
  2915  075A  03A6               	decf	___lwmod@dividend+1,f
  2916  075B  02A6               	subwf	___lwmod@dividend+1,f
  2917  075C                     l1528:	
  2918  075C  3001               	movlw	1
  2919  075D                     u1325:	
  2920  075D  1003               	clrc
  2921  075E  0CA4               	rrf	___lwmod@divisor+1,f
  2922  075F  0CA3               	rrf	___lwmod@divisor,f
  2923  0760  3EFF               	addlw	-1
  2924  0761  1D03               	skipz
  2925  0762  2F5D               	goto	u1325
  2926  0763  3001               	movlw	1
  2927  0764  02A8               	subwf	___lwmod@counter,f
  2928  0765  1D03               	btfss	3,2
  2929  0766  2F4E               	goto	l1524
  2930  0767                     l1532:	
  2931  0767  0826               	movf	___lwmod@dividend+1,w
  2932  0768  00A4               	movwf	?___lwmod+1
  2933  0769  0825               	movf	___lwmod@dividend,w
  2934  076A  00A3               	movwf	?___lwmod
  2935  076B  0008               	return
  2936  076C                     __end_of___lwmod:	
  2937                           
  2938                           	psect	text15
  2939  06FA                     __ptext15:	
  2940 ;; *************** function ___lwdiv *****************
  2941 ;; Defined at:
  2942 ;;		line 6 in file "/opt/microchip/xc8/v1.43/sources/common/lwdiv.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  divisor         2    4[COMMON] unsigned int 
  2945 ;;  dividend        2    6[COMMON] unsigned int 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  quotient        2    0[BANK0 ] unsigned int 
  2948 ;;  counter         1    2[BANK0 ] unsigned char 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  2    4[COMMON] unsigned int 
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2958 ;;      Params:         4       0       0       0       0
  2959 ;;      Locals:         0       3       0       0       0
  2960 ;;      Temps:          1       0       0       0       0
  2961 ;;      Totals:         5       3       0       0       0
  2962 ;;Total ram usage:        8 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:    1
  2965 ;; This function calls:
  2966 ;;		Nothing
  2967 ;; This function is called by:
  2968 ;;		_rps_timer1
  2969 ;;		_printf
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           
  2974                           ;psect for function ___lwdiv
  2975  06FA                     ___lwdiv:	
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2979  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2980  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2981  06FC  01A0               	clrf	___lwdiv@quotient
  2982  06FD  01A1               	clrf	___lwdiv@quotient+1
  2983  06FE  0874               	movf	___lwdiv@divisor,w
  2984  06FF  0475               	iorwf	___lwdiv@divisor+1,w
  2985  0700  1903               	btfsc	3,2
  2986  0701  2F33               	goto	l1158
  2987  0702  01A2               	clrf	___lwdiv@counter
  2988  0703  0AA2               	incf	___lwdiv@counter,f
  2989  0704                     l1146:	
  2990  0704  1BF5               	btfsc	___lwdiv@divisor+1,7
  2991  0705  2F12               	goto	l1148
  2992  0706  3001               	movlw	1
  2993  0707                     u765:	
  2994  0707  1003               	clrc
  2995  0708  0DF4               	rlf	___lwdiv@divisor,f
  2996  0709  0DF5               	rlf	___lwdiv@divisor+1,f
  2997  070A  3EFF               	addlw	-1
  2998  070B  1D03               	skipz
  2999  070C  2F07               	goto	u765
  3000  070D  3001               	movlw	1
  3001  070E  00F8               	movwf	??___lwdiv
  3002  070F  0878               	movf	??___lwdiv,w
  3003  0710  07A2               	addwf	___lwdiv@counter,f
  3004  0711  2F04               	goto	l1146
  3005  0712                     l1148:	
  3006  0712  3001               	movlw	1
  3007  0713                     u785:	
  3008  0713  1003               	clrc
  3009  0714  0DA0               	rlf	___lwdiv@quotient,f
  3010  0715  0DA1               	rlf	___lwdiv@quotient+1,f
  3011  0716  3EFF               	addlw	-1
  3012  0717  1D03               	skipz
  3013  0718  2F13               	goto	u785
  3014  0719  0875               	movf	___lwdiv@divisor+1,w
  3015  071A  0277               	subwf	___lwdiv@dividend+1,w
  3016  071B  1D03               	skipz
  3017  071C  2F1F               	goto	u795
  3018  071D  0874               	movf	___lwdiv@divisor,w
  3019  071E  0276               	subwf	___lwdiv@dividend,w
  3020  071F                     u795:	
  3021  071F  1C03               	skipc
  3022  0720  2F28               	goto	l1154
  3023  0721  0874               	movf	___lwdiv@divisor,w
  3024  0722  02F6               	subwf	___lwdiv@dividend,f
  3025  0723  0875               	movf	___lwdiv@divisor+1,w
  3026  0724  1C03               	skipc
  3027  0725  03F7               	decf	___lwdiv@dividend+1,f
  3028  0726  02F7               	subwf	___lwdiv@dividend+1,f
  3029  0727  1420               	bsf	___lwdiv@quotient,0
  3030  0728                     l1154:	
  3031  0728  3001               	movlw	1
  3032  0729                     u805:	
  3033  0729  1003               	clrc
  3034  072A  0CF5               	rrf	___lwdiv@divisor+1,f
  3035  072B  0CF4               	rrf	___lwdiv@divisor,f
  3036  072C  3EFF               	addlw	-1
  3037  072D  1D03               	skipz
  3038  072E  2F29               	goto	u805
  3039  072F  3001               	movlw	1
  3040  0730  02A2               	subwf	___lwdiv@counter,f
  3041  0731  1D03               	btfss	3,2
  3042  0732  2F12               	goto	l1148
  3043  0733                     l1158:	
  3044  0733  0821               	movf	___lwdiv@quotient+1,w
  3045  0734  00F5               	movwf	?___lwdiv+1
  3046  0735  0820               	movf	___lwdiv@quotient,w
  3047  0736  00F4               	movwf	?___lwdiv
  3048  0737  0008               	return
  3049  0738                     __end_of___lwdiv:	
  3050                           
  3051                           	psect	text16
  3052  037F                     __ptext16:	
  3053 ;; *************** function _beep *****************
  3054 ;; Defined at:
  3055 ;;		line 41 in file "main.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  j               2   13[BANK0 ] int 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  1    wreg      void 
  3062 ;; Registers used:
  3063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3069 ;;      Params:         0       0       0       0       0
  3070 ;;      Locals:         0       2       0       0       0
  3071 ;;      Temps:          4       0       0       0       0
  3072 ;;      Totals:         4       2       0       0       0
  3073 ;;Total ram usage:        6 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    2
  3076 ;; This function calls:
  3077 ;;		___lldiv
  3078 ;; This function is called by:
  3079 ;;		_io_switch
  3080 ;;		_main
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function _beep
  3086  037F                     _beep:	
  3087                           
  3088                           ;main.c: 42: _delay(IFOSC/10);
  3089                           
  3090                           ;incstack = 0
  3091                           ; Regs used in _beep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3092  037F  3000               	movlw	0
  3093  0380  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0381  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0382  00A3               	movwf	___lldiv@divisor+3
  3096  0383  3000               	movlw	0
  3097  0384  00A2               	movwf	___lldiv@divisor+2
  3098  0385  3000               	movlw	0
  3099  0386  00A1               	movwf	___lldiv@divisor+1
  3100  0387  300A               	movlw	10
  3101  0388  00A0               	movwf	___lldiv@divisor
  3102  0389  300F               	movlw	low (_IFOSC-__stringbase)
  3103  038A  0084               	movwf	4
  3104  038B  120A  118A  2662  120A  118A  	fcall	stringdir
  3105  0390  00A4               	movwf	___lldiv@dividend
  3106  0391  120A  118A  2662  120A  118A  	fcall	stringdir
  3107  0396  00A5               	movwf	___lldiv@dividend+1
  3108  0397  120A  118A  2662  120A  118A  	fcall	stringdir
  3109  039C  00A6               	movwf	___lldiv@dividend+2
  3110  039D  120A  118A  2662  120A  118A  	fcall	stringdir
  3111  03A2  00A7               	movwf	___lldiv@dividend+3
  3112  03A3  120A  118A  2602  120A  118A  	fcall	___lldiv
  3113  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  3114  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  3115  03AA  0820               	movf	?___lldiv,w
  3116  03AB  00F5               	movwf	??_beep
  3117  03AC  0821               	movf	?___lldiv+1,w
  3118  03AD  00F6               	movwf	??_beep+1
  3119  03AE  0822               	movf	?___lldiv+2,w
  3120  03AF  00F7               	movwf	??_beep+2
  3121  03B0  0823               	movf	?___lldiv+3,w
  3122  03B1  00F8               	movwf	??_beep+3
  3123                           
  3124                           ;main.c: 43: for (int j = 0; j < 100; ++j) {
  3125  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  3126  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  3127  03B4  01AD               	clrf	beep@j
  3128  03B5  01AE               	clrf	beep@j+1
  3129  03B6                     L1:	
  3130  03B6  082E               	movf	beep@j+1,w
  3131  03B7  3A80               	xorlw	128
  3132  03B8  00FF               	movwf	127
  3133  03B9  3080               	movlw	128
  3134  03BA  027F               	subwf	127,w
  3135  03BB  1D03               	skipz
  3136  03BC  2BBF               	goto	u1535
  3137  03BD  3064               	movlw	100
  3138  03BE  022D               	subwf	beep@j,w
  3139  03BF                     u1535:	
  3140  03BF  1803               	btfsc	3,0
  3141  03C0  0008               	return
  3142                           
  3143                           ;main.c: 44: BUZ = 1; _delay(IFOSC/1000);
  3144  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  3145  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  3146  03C3  1685               	bsf	5,5
  3147  03C4  3000               	movlw	0
  3148  03C5  00A3               	movwf	___lldiv@divisor+3
  3149  03C6  3000               	movlw	0
  3150  03C7  00A2               	movwf	___lldiv@divisor+2
  3151  03C8  3003               	movlw	3
  3152  03C9  00A1               	movwf	___lldiv@divisor+1
  3153  03CA  30E8               	movlw	232
  3154  03CB  00A0               	movwf	___lldiv@divisor
  3155  03CC  300F               	movlw	low (_IFOSC-__stringbase)
  3156  03CD  0084               	movwf	4
  3157  03CE  120A  118A  2662  120A  118A  	fcall	stringdir
  3158  03D3  00A4               	movwf	___lldiv@dividend
  3159  03D4  120A  118A  2662  120A  118A  	fcall	stringdir
  3160  03D9  00A5               	movwf	___lldiv@dividend+1
  3161  03DA  120A  118A  2662  120A  118A  	fcall	stringdir
  3162  03DF  00A6               	movwf	___lldiv@dividend+2
  3163  03E0  120A  118A  2662  120A  118A  	fcall	stringdir
  3164  03E5  00A7               	movwf	___lldiv@dividend+3
  3165  03E6  120A  118A  2602  120A  118A  	fcall	___lldiv
  3166  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  3167  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  3168  03ED  0820               	movf	?___lldiv,w
  3169  03EE  00F5               	movwf	??_beep
  3170  03EF  0821               	movf	?___lldiv+1,w
  3171  03F0  00F6               	movwf	??_beep+1
  3172  03F1  0822               	movf	?___lldiv+2,w
  3173  03F2  00F7               	movwf	??_beep+2
  3174  03F3  0823               	movf	?___lldiv+3,w
  3175  03F4  00F8               	movwf	??_beep+3
  3176                           
  3177                           ;main.c: 45: BUZ = 0; _delay(IFOSC/2000);
  3178  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  3179  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  3180  03F7  1285               	bcf	5,5
  3181  03F8  3000               	movlw	0
  3182  03F9  00A3               	movwf	___lldiv@divisor+3
  3183  03FA  3000               	movlw	0
  3184  03FB  00A2               	movwf	___lldiv@divisor+2
  3185  03FC  3007               	movlw	7
  3186  03FD  00A1               	movwf	___lldiv@divisor+1
  3187  03FE  30D0               	movlw	208
  3188  03FF  00A0               	movwf	___lldiv@divisor
  3189  0400  300F               	movlw	low (_IFOSC-__stringbase)
  3190  0401  0084               	movwf	4
  3191  0402  120A  118A  2662  120A  118A  	fcall	stringdir
  3192  0407  00A4               	movwf	___lldiv@dividend
  3193  0408  120A  118A  2662  120A  118A  	fcall	stringdir
  3194  040D  00A5               	movwf	___lldiv@dividend+1
  3195  040E  120A  118A  2662  120A  118A  	fcall	stringdir
  3196  0413  00A6               	movwf	___lldiv@dividend+2
  3197  0414  120A  118A  2662  120A  118A  	fcall	stringdir
  3198  0419  00A7               	movwf	___lldiv@dividend+3
  3199  041A  120A  118A  2602  120A  118A  	fcall	___lldiv
  3200  041F  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0420  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0421  0820               	movf	?___lldiv,w
  3203  0422  00F5               	movwf	??_beep
  3204  0423  0821               	movf	?___lldiv+1,w
  3205  0424  00F6               	movwf	??_beep+1
  3206  0425  0822               	movf	?___lldiv+2,w
  3207  0426  00F7               	movwf	??_beep+2
  3208  0427  0823               	movf	?___lldiv+3,w
  3209  0428  00F8               	movwf	??_beep+3
  3210  0429  3001               	movlw	1
  3211  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3212  042B  1303               	bcf	3,6	;RP1=0, select bank0
  3213  042C  07AD               	addwf	beep@j,f
  3214  042D  1803               	skipnc
  3215  042E  0AAE               	incf	beep@j+1,f
  3216  042F  3000               	movlw	0
  3217  0430  07AE               	addwf	beep@j+1,f
  3218  0431  2BB6               	goto	L1
  3219  0432                     __end_of_beep:	
  3220                           
  3221                           	psect	text17
  3222  0602                     __ptext17:	
  3223 ;; *************** function ___lldiv *****************
  3224 ;; Defined at:
  3225 ;;		line 6 in file "/opt/microchip/xc8/v1.43/sources/common/lldiv.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  divisor         4    0[BANK0 ] unsigned long 
  3228 ;;  dividend        4    4[BANK0 ] unsigned long 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  quotient        4    8[BANK0 ] unsigned long 
  3231 ;;  counter         1   12[BANK0 ] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  4    0[BANK0 ] unsigned long 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3241 ;;      Params:         0       8       0       0       0
  3242 ;;      Locals:         0       5       0       0       0
  3243 ;;      Temps:          1       0       0       0       0
  3244 ;;      Totals:         1      13       0       0       0
  3245 ;;Total ram usage:       14 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    1
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_beep
  3252 ;;		_putch
  3253 ;;		_prog_lcd
  3254 ;;		_init_lcd
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function ___lldiv
  3260  0602                     ___lldiv:	
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3264  0602  3000               	movlw	0
  3265  0603  1283               	bcf	3,5	;RP0=0, select bank0
  3266  0604  1303               	bcf	3,6	;RP1=0, select bank0
  3267  0605  00AB               	movwf	___lldiv@quotient+3
  3268  0606  3000               	movlw	0
  3269  0607  00AA               	movwf	___lldiv@quotient+2
  3270  0608  3000               	movlw	0
  3271  0609  00A9               	movwf	___lldiv@quotient+1
  3272  060A  3000               	movlw	0
  3273  060B  00A8               	movwf	___lldiv@quotient
  3274  060C  0823               	movf	___lldiv@divisor+3,w
  3275  060D  0422               	iorwf	___lldiv@divisor+2,w
  3276  060E  0421               	iorwf	___lldiv@divisor+1,w
  3277  060F  0420               	iorwf	___lldiv@divisor,w
  3278  0610  1903               	skipnz
  3279  0611  2E59               	goto	l1492
  3280  0612  01AC               	clrf	___lldiv@counter
  3281  0613  0AAC               	incf	___lldiv@counter,f
  3282  0614                     l1478:	
  3283  0614  1BA3               	btfsc	___lldiv@divisor+3,7
  3284  0615  2E24               	goto	l1480
  3285  0616  3001               	movlw	1
  3286  0617  00F4               	movwf	??___lldiv
  3287  0618                     u1205:	
  3288  0618  1003               	clrc
  3289  0619  0DA0               	rlf	___lldiv@divisor,f
  3290  061A  0DA1               	rlf	___lldiv@divisor+1,f
  3291  061B  0DA2               	rlf	___lldiv@divisor+2,f
  3292  061C  0DA3               	rlf	___lldiv@divisor+3,f
  3293  061D  0BF4               	decfsz	??___lldiv,f
  3294  061E  2E18               	goto	u1205
  3295  061F  3001               	movlw	1
  3296  0620  00F4               	movwf	??___lldiv
  3297  0621  0874               	movf	??___lldiv,w
  3298  0622  07AC               	addwf	___lldiv@counter,f
  3299  0623  2E14               	goto	l1478
  3300  0624                     l1480:	
  3301  0624  3001               	movlw	1
  3302  0625  00F4               	movwf	??___lldiv
  3303  0626                     u1225:	
  3304  0626  1003               	clrc
  3305  0627  0DA8               	rlf	___lldiv@quotient,f
  3306  0628  0DA9               	rlf	___lldiv@quotient+1,f
  3307  0629  0DAA               	rlf	___lldiv@quotient+2,f
  3308  062A  0DAB               	rlf	___lldiv@quotient+3,f
  3309  062B  0BF4               	decfsz	??___lldiv,f
  3310  062C  2E26               	goto	u1225
  3311  062D  0823               	movf	___lldiv@divisor+3,w
  3312  062E  0227               	subwf	___lldiv@dividend+3,w
  3313  062F  1D03               	skipz
  3314  0630  2E3B               	goto	u1235
  3315  0631  0822               	movf	___lldiv@divisor+2,w
  3316  0632  0226               	subwf	___lldiv@dividend+2,w
  3317  0633  1D03               	skipz
  3318  0634  2E3B               	goto	u1235
  3319  0635  0821               	movf	___lldiv@divisor+1,w
  3320  0636  0225               	subwf	___lldiv@dividend+1,w
  3321  0637  1D03               	skipz
  3322  0638  2E3B               	goto	u1235
  3323  0639  0820               	movf	___lldiv@divisor,w
  3324  063A  0224               	subwf	___lldiv@dividend,w
  3325  063B                     u1235:	
  3326  063B  1C03               	skipc
  3327  063C  2E4C               	goto	l1488
  3328  063D  0820               	movf	___lldiv@divisor,w
  3329  063E  02A4               	subwf	___lldiv@dividend,f
  3330  063F  0821               	movf	___lldiv@divisor+1,w
  3331  0640  1C03               	skipc
  3332  0641  0F21               	incfsz	___lldiv@divisor+1,w
  3333  0642  02A5               	subwf	___lldiv@dividend+1,f
  3334  0643  0822               	movf	___lldiv@divisor+2,w
  3335  0644  1C03               	skipc
  3336  0645  0F22               	incfsz	___lldiv@divisor+2,w
  3337  0646  02A6               	subwf	___lldiv@dividend+2,f
  3338  0647  0823               	movf	___lldiv@divisor+3,w
  3339  0648  1C03               	skipc
  3340  0649  0F23               	incfsz	___lldiv@divisor+3,w
  3341  064A  02A7               	subwf	___lldiv@dividend+3,f
  3342  064B  1428               	bsf	___lldiv@quotient,0
  3343  064C                     l1488:	
  3344  064C  3001               	movlw	1
  3345  064D                     u1245:	
  3346  064D  1003               	clrc
  3347  064E  0CA3               	rrf	___lldiv@divisor+3,f
  3348  064F  0CA2               	rrf	___lldiv@divisor+2,f
  3349  0650  0CA1               	rrf	___lldiv@divisor+1,f
  3350  0651  0CA0               	rrf	___lldiv@divisor,f
  3351  0652  3EFF               	addlw	-1
  3352  0653  1D03               	skipz
  3353  0654  2E4D               	goto	u1245
  3354  0655  3001               	movlw	1
  3355  0656  02AC               	subwf	___lldiv@counter,f
  3356  0657  1D03               	btfss	3,2
  3357  0658  2E24               	goto	l1480
  3358  0659                     l1492:	
  3359  0659  082B               	movf	___lldiv@quotient+3,w
  3360  065A  00A3               	movwf	?___lldiv+3
  3361  065B  082A               	movf	___lldiv@quotient+2,w
  3362  065C  00A2               	movwf	?___lldiv+2
  3363  065D  0829               	movf	___lldiv@quotient+1,w
  3364  065E  00A1               	movwf	?___lldiv+1
  3365  065F  0828               	movf	___lldiv@quotient,w
  3366  0660  00A0               	movwf	?___lldiv
  3367  0661  0008               	return
  3368  0662                     __end_of___lldiv:	
  3369                           
  3370                           	psect	text18
  3371  0FC3                     __ptext18:	
  3372 ;; *************** function _getch *****************
  3373 ;; Defined at:
  3374 ;;		line 63 in file "main.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      unsigned char 
  3381 ;; Registers used:
  3382 ;;		wreg
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3388 ;;      Params:         0       0       0       0       0
  3389 ;;      Locals:         0       0       0       0       0
  3390 ;;      Temps:          0       0       0       0       0
  3391 ;;      Totals:         0       0       0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    1
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_buffer_serial
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           
  3403                           ;psect for function _getch
  3404  0FC3                     _getch:	
  3405  0FC3                     l80:	
  3406                           ;main.c: 64: while(!RCIF) continue;
  3407                           
  3408                           ;incstack = 0
  3409                           ; Regs used in _getch: [wreg]
  3410                           
  3411  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  3412  0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  3413  0FC5  1E8C               	btfss	12,5	;volatile
  3414  0FC6  2FC3               	goto	l80
  3415                           
  3416                           ;main.c: 65: return RCREG;
  3417  0FC7  081A               	movf	26,w	;volatile
  3418  0FC8  0008               	return
  3419  0FC9                     __end_of_getch:	
  3420                           
  3421                           	psect	text19
  3422  0FEE                     __ptext19:	
  3423 ;; *************** function _raycast_intersection_cleared *****************
  3424 ;; Defined at:
  3425 ;;		line 113 in file "main.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3439 ;;      Params:         0       0       0       0       0
  3440 ;;      Locals:         0       0       0       0       0
  3441 ;;      Temps:          4       0       0       0       0
  3442 ;;      Totals:         4       0       0       0       0
  3443 ;;Total ram usage:        4 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		Interrupt level 1
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           
  3453                           ;psect for function _raycast_intersection_cleared
  3454  0FEE                     _raycast_intersection_cleared:	
  3455                           
  3456                           ;main.c: 114: FAN.count++;
  3457  0FEE  3001               	movlw	1
  3458  0FEF  07DA               	addwf	_FAN,f	;volatile
  3459  0FF0  1803               	skipnc
  3460  0FF1  0ADB               	incf	_FAN+1,f	;volatile
  3461  0FF2  3000               	movlw	0
  3462  0FF3  07DB               	addwf	_FAN+1,f	;volatile
  3463                           
  3464                           ;main.c: 115: INTF = 0;
  3465  0FF4  108B               	bcf	11,1	;volatile
  3466                           
  3467                           ;main.c: 116: return;
  3468  0FF5  0873               	movf	??_raycast_intersection_cleared+3,w
  3469  0FF6  00FF               	movwf	127
  3470  0FF7  0872               	movf	??_raycast_intersection_cleared+2,w
  3471  0FF8  008A               	movwf	10
  3472  0FF9  0871               	movf	??_raycast_intersection_cleared+1,w
  3473  0FFA  0084               	movwf	4
  3474  0FFB  0E70               	swapf	??_raycast_intersection_cleared^(0+-128),w
  3475  0FFC  0083               	movwf	3
  3476  0FFD  0EFE               	swapf	126,f
  3477  0FFE  0E7E               	swapf	126,w
  3478  0FFF  0009               	retfie
  3479  1000                     __end_of_raycast_intersection_cleared:	
  3480  007E                     btemp	set	126	;btemp
  3481  007E                     wtemp0	set	126
  3482                           
  3483                           	psect	intentry
  3484  0004                     __pintentry:	
  3485                           ;incstack = 0
  3486                           ; Regs used in _raycast_intersection_cleared: [wreg]
  3487                           
  3488  0004                     interrupt_function:	
  3489  007E                     saved_w	set	btemp
  3490  0004  00FE               	movwf	btemp
  3491  0005  0E03               	swapf	3,w
  3492  0006  00F0               	movwf	??_raycast_intersection_cleared
  3493  0007  0804               	movf	4,w
  3494  0008  00F1               	movwf	??_raycast_intersection_cleared+1
  3495  0009  080A               	movf	10,w
  3496  000A  00F2               	movwf	??_raycast_intersection_cleared+2
  3497  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3498  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3499  000D  087F               	movf	btemp+1,w
  3500  000E  00F3               	movwf	??_raycast_intersection_cleared+3
  3501  000F  120A  158A  2FEE   	ljmp	_raycast_intersection_cleared


Data Sizes:
    Strings     59
    Constant    22
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     58      68
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[11]), STR_3(CODE[9]), 
		 -> STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    buffer_serial@buffer	PTR unsigned char  size(1) Largest target is 6
		 -> main@buffer(BANK0[6]), 

    io_switch@x	PTR unsigned char  size(1) Largest target is 6
		 -> main@buffer(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_beep
    _main_lcd->_prog_lcd
    _init_lcd->_prog_lcd
    _prog_lcd->___lldiv
    _io_switch->_beep
    _rps_timer1->___lwdiv
    _printf->___lwdiv
    _printf->_putch
    _putch->___lldiv
    ___wmul->___lwdiv
    ___lwmod->___lwdiv
    _beep->___lldiv

Critical Paths under _raycast_intersection_cleared in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_buffer_serial
    _main_lcd->_printf
    _init_lcd->_printf
    _prog_lcd->___lldiv
    _buffer_serial->_io_switch
    _io_switch->_read_tmr1
    _read_tmr1->_printf
    _rps_timer1->___wmul
    _read_tmr0->_printf
    _printf->_putch
    _putch->___lldiv
    ___wmul->___lwdiv
    ___lwmod->___lwdiv
    _beep->___lldiv

Critical Paths under _raycast_intersection_cleared in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _raycast_intersection_cleared in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _raycast_intersection_cleared in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _raycast_intersection_cleared in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   27594
                                             45 BANK0     13    13      0
                               _beep
                      _buffer_serial
                           _init_lcd
                           _main_lcd
 ---------------------------------------------------------------------------------
 (1) _main_lcd                                             5     2      3    6101
                                             31 BANK0      5     2      3
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             4     4      0    7450
                                             31 BANK0      4     4      0
                            ___lldiv
                             _printf
                           _prog_lcd
 ---------------------------------------------------------------------------------
 (2) _prog_lcd                                             5     5      0    1572
                                              5 COMMON     4     4      0
                                             13 BANK0      1     1      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _buffer_serial                                        5     3      2   12302
                                             40 BANK0      5     3      2
                              _getch
                          _io_switch
 ---------------------------------------------------------------------------------
 (2) _io_switch                                            1     1      0   12015
                                             39 BANK0      1     1      0
                               _beep
                          _read_tmr0
                          _read_tmr1
                              _write
 ---------------------------------------------------------------------------------
 (3) _write                                                1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _read_tmr1                                            8     8      0    5862
                                             31 BANK0      8     8      0
                             _printf
                         _rps_timer1
 ---------------------------------------------------------------------------------
 (4) _rps_timer1                                          18     6     12    1525
                                              9 BANK0     18     6     12
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _read_tmr0                                            2     2      0    4337
                                             31 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              21    19      2    4337
                                             14 BANK0     17    15      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                5     5      0    1603
                                              5 COMMON     4     4      0
                                             13 BANK0      1     1      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     304
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     586
                                              4 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _beep                                                 6     6      0    1609
                                              5 COMMON     4     4      0
                                             13 BANK0      2     2      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8    1541
                                              4 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _raycast_intersection_cleared                         4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
     ___lldiv
   _buffer_serial
     _getch
     _io_switch
       _beep
         ___lldiv
       _read_tmr0
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
           _putch
             ___lldiv
       _read_tmr1
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
           _putch
             ___lldiv
         _rps_timer1
           ___lwdiv
           ___wmul
             ___lwdiv (ARG)
       _write
   _init_lcd
     ___lldiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___lwdiv (ARG)
       _isdigit
       _putch
         ___lldiv
     _prog_lcd
       ___lldiv
   _main_lcd
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
         ___lwdiv (ARG)
       _isdigit
       _putch
         ___lldiv
     _prog_lcd
       ___lldiv

 _raycast_intersection_cleared (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4E      12        0.0%
ABS                  0      0      4E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 17 17:43:25 2017

                                    pc 0002                            __CFG_CP$OFF 0000  
                                   l80 0FC3                                     l74 0523  
                                   fsr 0004                    ___wmul@multiplicand 0025  
                                  l130 0596                                    l170 0103  
                                  l181 00E7                                    l283 07CB  
                                  l188 0160                                    l199 01E9  
                                  _FAN 005A                                    _LCD 0008  
                                  _BUZ 002D                                    _PR2 0092  
                         __CFG_CPD$OFF 0000                                    u805 0729  
                                  u725 07CC                                    u735 07D3  
                                  u765 0707                                    u785 0713  
                                  u795 071F                                    _PWM 0015  
                                  _PUT 03C8                                    fsr0 0004  
                                  indf 0000                           __CFG_LVP$OFF 0000  
                                 l1124 07C3                                   l1300 033A  
                                 l1118 0FDB                                   l1154 0728  
                                 l1146 0704                                   l1148 0712  
                                 l1158 0733                                   l1522 0740  
                                 l1524 074E                                   l1532 0767  
                                 l1620 0199                                   l1612 017F  
                                 l1604 0152                                   l1614 0183  
                                 l1542 0049                                   l1630 002C  
                                 l1286 02D9                                   l1480 0624  
                                 l1528 075C                                   l1624 01A3  
                                 l1616 0187                                   l1560 00AC  
                                 l1296 0333                                   l1704 0577  
                                 l1570 00D1                                   l1492 0659  
                                 l1628 01A9                                   l1572 00DE  
                                 l1564 00AE                                   l1556 009B  
                                 l1548 0060                                   l1732 078F  
                                 l1478 0614                                   l1566 00C2  
                                 l1488 064C                                   l1592 012B  
                                 l1576 00E9                                   l1680 052E  
                                 l1690 054F                                   l1682 0532  
                                 l1770 0473                                   l1588 011F  
                                 l1692 0559                                   l1684 053C  
                                 l1598 0131                                   l1766 0475  
                                 l1696 0568                                   l1688 054B  
                                 _BAUD 0672                                   STR_1 067E  
                                 STR_2 068F                                   STR_3 06AA  
                                 STR_4 069F                                   STR_5 06B6  
                                 STR_6 06B3                                   u1105 0372  
                                 u1205 0618                                   u1225 0626  
                                 u1235 063B                                   u1315 0754  
                                 u1075 02D0                                   u1245 064D  
                                 u1325 075D                                   u1095 032D  
                                 u1435 0148                                   u1550 06C4  
                                 u1535 03BF                                   u1295 0743  
                                 u1375 00A3                                   u1560 06E4  
                                 u1475 016F                                   u1585 0499  
                                 _INTF 0059                                   _RCIF 0065  
                                 _TMR0 0001                                   _TMR1 000E  
                                 _TXIF 0064                           __CFG_WRT$OFF 0000  
                                 _beep 037F                                   _main 0432  
                                 btemp 007E                                   start 0012  
                                ?_beep 0070                                  ?_main 0070  
                        __CFG_WDTE$OFF 0000                        __end_of___lldiv 0662  
                                _T1CON 0010                                  _T2CON 0012  
                                _IFOSC 0676                        __end_of___lwdiv 0738  
                      __end_of___lwmod 076C                                  _RCREG 001A  
                                _RCSTA 0018                                  _SPBRG 0099  
                                _TRISA 0085                                  _TRISB 0086  
                                _TRISC 0087                                  _TRISD 0088  
                                _TRISE 0089                                  _TXREG 0019  
                                _TXSTA 0098                         _rps_timer1$588 0039  
                                beep@j 002D                                  _getch 0FC3  
                      __end_of_dpowers 0672                        __end_of_isdigit 0FDD  
                                _putch 04B6                                  _write 0FC9  
                       __CFG_BOREN$OFF 0000                                  pclath 000A  
                                status 0003                                  wtemp0 007E  
                      ??_buffer_serial 004A                           __end_of_BAUD 0676  
                      __initialization 0015                           __end_of_beep 0432  
                         __end_of_main 04B6                       buffer_serial@idx 0048  
                               ??_beep 0075                                 ??_main 004D  
                               ?_getch 0070                                 _CCPR1L 0015  
                  buffer_serial@buffer 004C                                 ?_putch 0070  
                               ?_write 0070                                 _T1FOSC 067C  
                               _INTCON 000B                                 _RPSMIN 067A  
                       __CFG_PWRTE$OFF 0000                                 ___wmul 07BF  
                         main_lcd@duty 0041                       __end_of_main_lcd 07BF  
                            ??___lldiv 0074                              ??___lwdiv 0078  
                            ??___lwmod 0027                       __end_of_init_lcd 02C8  
                               _printf 0025                              ??_isdigit 0074  
                               saved_w 007E                       __end_of_prog_lcd 0602  
                      __CFG_FOSC$EXTRC 0000                __end_of__initialization 0021  
                        __end_of_IFOSC 067A                         __pcstackCOMMON 0070  
                         __pidataBANK0 07F4                          __end_of_getch 0FC9  
                        __end_of_putch 052A                          __end_of_write 0FCF  
                              ??_getch 0074                                ??_putch 0075  
                              ??_write 0074                     __size_of_io_switch 006D  
                   __size_of_read_tmr0 0012                     __size_of_read_tmr1 0041  
                           __pmaintext 0432                                ?___wmul 0023  
                           __pintentry 0004                                _CCP1CON 0017  
                              ?_printf 002E                             __stringtab 0662  
                            ?_main_lcd 003F                              ?_init_lcd 0070  
                            ?_prog_lcd 0070                                ___lldiv 0602  
                      __size_of___wmul 0023                                ___lwdiv 06FA  
                              ___lwmod 0738                          main_lcd@value 003F  
                              __ptext1 0798                                __ptext2 01EA  
                              __ptext3 0597                                __ptext4 076C  
                              __ptext5 052A                                __ptext6 0FC9  
                              __ptext7 06B9                                __ptext8 02C8  
                              __ptext9 07E2                        __size_of_printf 01C5  
                    __end_of_io_switch 0597                                _dpowers 0668  
                              _isdigit 0FCF                      __end_of_read_tmr0 07F4  
                    __end_of_read_tmr1 06FA                                main@idx 0058  
                 end_of_initialization 0021                             ??_main_lcd 0042  
                           ??_init_lcd 003F   __end_of_raycast_intersection_cleared 1000  
__size_of_raycast_intersection_cleared 0012           _raycast_intersection_cleared 0FEE  
                      ___lldiv@divisor 0020                        ___lldiv@counter 002C  
                __end_of_buffer_serial 0798                                printf@c 003E  
                              printf@f 003B                             ??_prog_lcd 0075  
                           _rps_timer1 02C8                            prog_lcd@msg 002D  
                       __end_of_T1FOSC 067E                             main@buffer 0050  
                          printf@width 003C                             main@logged 0056  
                       __end_of_RPSMIN 067C          ?_raycast_intersection_cleared 0070  
                       __end_of___wmul 07E2                         __end_of_printf 01EA  
                        __pbitnvCOMMON 03C8                    start_initialization 0015  
                          rps_timer1@t 0033                            rps_timer1@x 0029  
                           io_switch@x 0047                               ??___wmul 0079  
                           init_fetch0 0FDD                            __pdataBANK0 005A  
                             ??_printf 0030                              ___latbits 0002  
                        __pcstackBANK0 0020                            ?_rps_timer1 0029  
                    __size_of_main_lcd 0027                      __size_of_init_lcd 00DE  
                     ___lwdiv@dividend 0076                               ?___lldiv 0020  
       ??_raycast_intersection_cleared 0070                               ?___lwdiv 0074  
                             ?___lwmod 0023                      __size_of_prog_lcd 006B  
                            __pstrings 0662                               ?_isdigit 0070  
                            _io_switch 052A                       ___lwdiv@quotient 0020  
                       __size_of_getch 0006                              _read_tmr0 07E2  
                            _read_tmr1 06B9                         __size_of_putch 0074  
                       __size_of_write 0006                      interrupt_function 0004  
                       ___wmul@product 0027                    __size_of_rps_timer1 00B7  
                          __stringbase 0667                      ___wmul@multiplier 0023  
                           printf@flag 0038                             printf@prec 0034  
                           ?_io_switch 0070                             ?_read_tmr0 0070  
                           ?_read_tmr1 0070                       __size_of___lldiv 0060  
                     __size_of___lwdiv 003E                       __size_of___lwmod 0034  
                   __end_of__stringtab 0668                            _isdigit$358 0074  
                     __size_of_isdigit 000E                        ___lwdiv@divisor 0074  
                      ___lwdiv@counter 0022                               __ptext10 0025  
                             __ptext11 04B6                               __ptext12 0FCF  
                             __ptext13 07BF                               __ptext14 0738  
                             __ptext15 06FA                               __ptext16 037F  
                             __ptext17 0602                               __ptext18 0FC3  
                             __ptext19 0FEE                 __size_of_buffer_serial 002C  
                             _main_lcd 0798                          __size_of_beep 00B3  
                             _init_lcd 01EA                          __size_of_main 0084  
                             _prog_lcd 0597                              printf@len 0036  
                            printf@val 0039                               init_ram0 0FE1  
                             isdigit@c 0075                            ??_io_switch 0079  
                         ??_rps_timer1 0035                            ??_read_tmr0 003F  
                          ??_read_tmr1 003F                               intlevel1 0000  
                     ___lwmod@dividend 0025                       ___lldiv@dividend 0024  
                            stringcode 0662                              write@duty 0074  
                        _buffer_serial 076C                               printf@ap 0035  
                             printf@cp 0033                               putch@msg 002D  
                   __end_of_rps_timer1 037F                             _OPTION_REG 0081  
                     ___lldiv@quotient 0028                        ___lwmod@divisor 0023  
                      ___lwmod@counter 0028                               stringdir 0662  
                             stringtab 0662                         ?_buffer_serial 0048  
