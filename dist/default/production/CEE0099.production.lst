

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Mon Jan  1 14:49:21 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.43
    23                           ; Generated 25/07/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116                           
   117                           	psect	idataBANK0
   118  0208                     __pidataBANK0:	
   119                           
   120                           ;initializer for _BUF
   121  0208  3420               	retlw	32
   122  0209  3420               	retlw	32
   123  020A  3420               	retlw	32
   124  020B  3420               	retlw	32
   125  020C  3420               	retlw	32
   126  020D  3420               	retlw	32
   127  020E  3420               	retlw	32
   128  020F  3420               	retlw	32
   129  0210  3420               	retlw	32
   130  0211  3420               	retlw	32
   131  0212  3420               	retlw	32
   132  0213  3420               	retlw	32
   133  0214  3420               	retlw	32
   134  0215  3420               	retlw	32
   135  0216  3420               	retlw	32
   136  0217  3420               	retlw	32
   137  0218  3400               	retlw	0
   138  000E                     _TMR1	set	14
   139  001B                     _PWM	set	27
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  3008               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  221D   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01B9               	clrf	__pbssBANK0& (0+127)
   184  0022  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   186  0024  01BC               	clrf	(__pbssBANK0+3)& (0+127)
   187  0025  01BD               	clrf	(__pbssBANK0+4)& (0+127)
   188                           
   189                           ; Clear objects allocated to COMMON
   190  0026  01F8               	clrf	__pbssCOMMON& (0+127)
   191  0027                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0027                     __end_of__initialization:	
   195  0027  0183               	clrf	3
   196  0028  120A  118A  282B   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssCOMMON
   199  0078                     __pbssCOMMON:	
   200  0078                     _kT0:	
   201  0078                     	ds	1
   202                           
   203                           	psect	bssBANK0
   204  0039                     __pbssBANK0:	
   205  0039                     _T1ZOH:	
   206  0039                     	ds	2
   207  003B                     _PWMZOH:	
   208  003B                     	ds	1
   209  003C                     _T0PS:	
   210  003C                     	ds	1
   211  003D                     _RC:	
   212  003D                     	ds	1
   213                           
   214                           	psect	dataBANK0
   215  0020                     __pdataBANK0:	
   216  0020                     _BUF:	
   217  0020                     	ds	17
   218                           
   219                           	psect	inittext
   220  0219                     init_fetch0:	
   221                           ;	Called with low address in FSR and high address in W
   222                           
   223  0219  087E               	movf	126,w
   224  021A  008A               	movwf	10
   225  021B  087F               	movf	127,w
   226  021C  0082               	movwf	2
   227  021D                     init_ram0:	
   228                           ;Called with:
   229                           ;	high address of idata address in btemp 
   230                           ;	low address of idata address in btemp+1 
   231                           ;	low address of data in FSR
   232                           ;	high address + 1 of data in btemp-1
   233                           
   234  021D  2219  120A  118A   	fcall	init_fetch0
   235  0220  0080               	movwf	0
   236  0221  0A84               	incf	4,f
   237  0222  0804               	movf	4,w
   238  0223  067D               	xorwf	125,w
   239  0224  1903               	btfsc	3,2
   240  0225  3400               	retlw	0
   241  0226  0AFF               	incf	127,f
   242  0227  1903               	btfsc	3,2
   243  0228  0AFE               	incf	126,f
   244  0229  2A1D               	goto	init_ram0
   245                           
   246                           	psect	cstackCOMMON
   247  0070                     __pcstackCOMMON:	
   248  0070                     ?_beep:	
   249  0070                     ?_rsend:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_rsget:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_read_tmr1:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_write:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_sampling:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ??_sampling:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_main:	
   268                           ; 1 bytes @ 0x0
   269                           
   270                           
   271                           ; 2 bytes @ 0x0
   272  0070                     	ds	5
   273  0075                     ??_beep:	
   274  0075                     ??_rsend:	
   275                           ; 1 bytes @ 0x5
   276                           
   277  0075                     ??_rsget:	
   278                           ; 1 bytes @ 0x5
   279                           
   280  0075                     ??_write:	
   281                           ; 1 bytes @ 0x5
   282                           
   283  0075                     rsend@msg:	
   284                           ; 1 bytes @ 0x5
   285                           
   286  0075                     write@duty:	
   287                           ; 1 bytes @ 0x5
   288                           
   289                           
   290                           ; 1 bytes @ 0x5
   291  0075                     	ds	1
   292  0076                     ??_read_tmr1:	
   293  0076                     ??_main:	
   294                           ; 1 bytes @ 0x6
   295                           
   296                           
   297                           ; 1 bytes @ 0x6
   298  0076                     	ds	2
   299                           
   300                           	psect	cstackBANK0
   301  0031                     __pcstackBANK0:	
   302  0031                     beep@dash:	
   303                           
   304                           ; 1 bytes @ 0x0
   305  0031                     	ds	1
   306  0032                     beep@j:	
   307                           
   308                           ; 2 bytes @ 0x1
   309  0032                     	ds	2
   310  0034                     beep@j_56:	
   311                           
   312                           ; 2 bytes @ 0x3
   313  0034                     	ds	2
   314  0036                     main@x:	
   315                           
   316                           ; 1 bytes @ 0x5
   317  0036                     	ds	1
   318  0037                     main@msg:	
   319                           
   320                           ; 1 bytes @ 0x6
   321  0037                     	ds	1
   322  0038                     main@cmd:	
   323                           
   324                           ; 1 bytes @ 0x7
   325  0038                     	ds	1
   326                           
   327                           	psect	maintext
   328  002B                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 81 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  cmd             1    7[BANK0 ] unsigned char 
   339 ;;  msg             1    6[BANK0 ] unsigned char 
   340 ;;  x               1    5[BANK0 ] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2  105[None  ] int 
   343 ;; Registers used:
   344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : B00/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   350 ;;      Params:         0       0       0       0       0
   351 ;;      Locals:         0       3       0       0       0
   352 ;;      Temps:          2       0       0       0       0
   353 ;;      Totals:         2       3       0       0       0
   354 ;;Total ram usage:        5 bytes
   355 ;; Hardware stack levels required when called:    3
   356 ;; This function calls:
   357 ;;		_beep
   358 ;;		_read_tmr1
   359 ;;		_rsend
   360 ;;		_rsget
   361 ;;		_write
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           
   368                           ;psect for function _main
   369  002B                     _main:	
   370                           
   371                           ;main.c: 82: OPTION_REG = 0x85;
   372                           
   373                           ;incstack = 0
   374                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   375  002B  3085               	movlw	133
   376  002C  1683               	bsf	3,5	;RP0=1, select bank1
   377  002D  1303               	bcf	3,6	;RP1=0, select bank1
   378  002E  0081               	movwf	1	;volatile
   379                           
   380                           ;main.c: 83: INTCON = 0x80;
   381  002F  3080               	movlw	128
   382  0030  008B               	movwf	11	;volatile
   383                           
   384                           ;main.c: 84: T1CON = 0x03;
   385  0031  3003               	movlw	3
   386  0032  1283               	bcf	3,5	;RP0=0, select bank0
   387  0033  1303               	bcf	3,6	;RP1=0, select bank0
   388  0034  0090               	movwf	16	;volatile
   389                           
   390                           ;main.c: 85: CCP1CON = 0x0F;
   391  0035  300F               	movlw	15
   392  0036  0097               	movwf	23	;volatile
   393                           
   394                           ;main.c: 86: CCPR1L = 0;
   395  0037  0195               	clrf	21	;volatile
   396                           
   397                           ;main.c: 87: CCP2CON = 0x0F;
   398  0038  300F               	movlw	15
   399  0039  009D               	movwf	29	;volatile
   400                           
   401                           ;main.c: 88: CCPR2L = 0;
   402  003A  019B               	clrf	27	;volatile
   403                           
   404                           ;main.c: 89: PR2 = 100;
   405  003B  3064               	movlw	100
   406  003C  1683               	bsf	3,5	;RP0=1, select bank1
   407  003D  1303               	bcf	3,6	;RP1=0, select bank1
   408  003E  0092               	movwf	18	;volatile
   409                           
   410                           ;main.c: 90: T2CON = 0x04;
   411  003F  3004               	movlw	4
   412  0040  1283               	bcf	3,5	;RP0=0, select bank0
   413  0041  1303               	bcf	3,6	;RP1=0, select bank0
   414  0042  0092               	movwf	18	;volatile
   415                           
   416                           ;main.c: 91: ADCON1 = 0x05;
   417  0043  3005               	movlw	5
   418  0044  1683               	bsf	3,5	;RP0=1, select bank1
   419  0045  1303               	bcf	3,6	;RP1=0, select bank1
   420  0046  009F               	movwf	31	;volatile
   421                           
   422                           ;main.c: 92: TRISC = 0xFD;
   423  0047  30FD               	movlw	253
   424  0048  0087               	movwf	7	;volatile
   425                           
   426                           ;main.c: 93: TRISB = 0xFF;
   427  0049  30FF               	movlw	255
   428  004A  0086               	movwf	6	;volatile
   429                           
   430                           ;main.c: 94: TRISA = 0xDF;
   431  004B  30DF               	movlw	223
   432  004C  0085               	movwf	5	;volatile
   433                           
   434                           ;main.c: 95: RCSTA = 0x90;
   435  004D  3090               	movlw	144
   436  004E  1283               	bcf	3,5	;RP0=0, select bank0
   437  004F  1303               	bcf	3,6	;RP1=0, select bank0
   438  0050  0098               	movwf	24	;volatile
   439                           
   440                           ;main.c: 96: TXSTA = 0x24;
   441  0051  3024               	movlw	36
   442  0052  1683               	bsf	3,5	;RP0=1, select bank1
   443  0053  1303               	bcf	3,6	;RP1=0, select bank1
   444  0054  0098               	movwf	24	;volatile
   445                           
   446                           ;main.c: 97: SPBRG = 12;
   447  0055  300C               	movlw	12
   448  0056  0099               	movwf	25	;volatile
   449                           
   450                           ;main.c: 101: if (PORTB & 0x02) {
   451  0057  1283               	bcf	3,5	;RP0=0, select bank0
   452  0058  1303               	bcf	3,6	;RP1=0, select bank0
   453  0059  1C86               	btfss	6,1	;volatile
   454  005A  28F3               	goto	l879
   455                           
   456                           ;main.c: 102: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   457  005B  3000               	movlw	0
   458  005C  120A  118A  215E  120A  118A  	fcall	_beep
   459  0061  3082               	movlw	130
   460  0062  00F7               	movwf	??_main+1
   461  0063  30DD               	movlw	221
   462  0064  00F6               	movwf	??_main
   463  0065                     u317:	
   464  0065  0BF6               	decfsz	??_main,f
   465  0066  2865               	goto	u317
   466  0067  0BF7               	decfsz	??_main+1,f
   467  0068  2865               	goto	u317
   468  0069  286A               	nop2
   469                           
   470                           ;main.c: 103: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   471  006A  3000               	movlw	0
   472  006B  120A  118A  215E  120A  118A  	fcall	_beep
   473  0070  3082               	movlw	130
   474  0071  00F7               	movwf	??_main+1
   475  0072  30DD               	movlw	221
   476  0073  00F6               	movwf	??_main
   477  0074                     u327:	
   478  0074  0BF6               	decfsz	??_main,f
   479  0075  2874               	goto	u327
   480  0076  0BF7               	decfsz	??_main+1,f
   481  0077  2874               	goto	u327
   482  0078  2879               	nop2
   483                           
   484                           ;main.c: 104: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   485  0079  3000               	movlw	0
   486  007A  120A  118A  215E  120A  118A  	fcall	_beep
   487  007F  3082               	movlw	130
   488  0080  00F7               	movwf	??_main+1
   489  0081  30DD               	movlw	221
   490  0082  00F6               	movwf	??_main
   491  0083                     u337:	
   492  0083  0BF6               	decfsz	??_main,f
   493  0084  2883               	goto	u337
   494  0085  0BF7               	decfsz	??_main+1,f
   495  0086  2883               	goto	u337
   496  0087  2888               	nop2
   497  0088  28D8               	goto	l851
   498  0089                     l857:	
   499                           ;main.c: 110: case 'r': case '7': read_tmr1(); break;
   500                           
   501                           ;main.c: 109: switch (BUF[0]) {
   502                           
   503  0089  120A  118A  21D7  120A  118A  	fcall	_read_tmr1
   504  008E  28D5               	goto	l873
   505  008F                     l859:	
   506                           ;main.c: 111: case 'w': case '5': write(BUF[1]); break;
   507                           
   508  008F  1283               	bcf	3,5	;RP0=0, select bank0
   509  0090  1303               	bcf	3,6	;RP1=0, select bank0
   510  0091  0821               	movf	_BUF+1,w
   511  0092  120A  118A  21F2  120A  118A  	fcall	_write
   512  0097  28D5               	goto	l873
   513  0098                     l861:	
   514                           ;main.c: 112: case 'x': case '1': write(BUF[1]); read_tmr1(); break;
   515                           
   516  0098  1283               	bcf	3,5	;RP0=0, select bank0
   517  0099  1303               	bcf	3,6	;RP1=0, select bank0
   518  009A  0821               	movf	_BUF+1,w
   519  009B  120A  118A  21F2  120A  118A  	fcall	_write
   520  00A0  120A  118A  21D7  120A  118A  	fcall	_read_tmr1
   521  00A5  28D5               	goto	l873
   522  00A6                     l863:	
   523                           ;main.c: 113: case 's': case '2': write(0); beep(0); beep(0); break;
   524                           
   525  00A6  3000               	movlw	0
   526  00A7  120A  118A  21F2  120A  118A  	fcall	_write
   527  00AC  3000               	movlw	0
   528  00AD  120A  118A  215E  120A  118A  	fcall	_beep
   529  00B2  3000               	movlw	0
   530  00B3  120A  118A  215E  120A  118A  	fcall	_beep
   531                           
   532                           ;main.c: 114: }
   533  00B8  28D5               	goto	l873
   534  00B9                     l871:	
   535  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   536  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   537  00BB  0820               	movf	_BUF,w
   538                           
   539                           ; Switch size 1, requested type "space"
   540                           ; Number of cases is 8, Range of values is 49 to 120
   541                           ; switch strategies available:
   542                           ; Name         Instructions Cycles
   543                           ; simple_byte           25    13 (average)
   544                           ; direct_byte          227    11 (fixed)
   545                           ; jumptable            263     9 (fixed)
   546                           ;	Chosen strategy is simple_byte
   547  00BC  3A31               	xorlw	49	; case 49
   548  00BD  1903               	skipnz
   549  00BE  2898               	goto	l861
   550  00BF  3A03               	xorlw	3	; case 50
   551  00C0  1903               	skipnz
   552  00C1  28A6               	goto	l863
   553  00C2  3A07               	xorlw	7	; case 53
   554  00C3  1903               	skipnz
   555  00C4  288F               	goto	l859
   556  00C5  3A02               	xorlw	2	; case 55
   557  00C6  1903               	skipnz
   558  00C7  2889               	goto	l857
   559  00C8  3A45               	xorlw	69	; case 114
   560  00C9  1903               	skipnz
   561  00CA  2889               	goto	l857
   562  00CB  3A01               	xorlw	1	; case 115
   563  00CC  1903               	skipnz
   564  00CD  28A6               	goto	l863
   565  00CE  3A04               	xorlw	4	; case 119
   566  00CF  1903               	skipnz
   567  00D0  288F               	goto	l859
   568  00D1  3A0F               	xorlw	15	; case 120
   569  00D2  1903               	skipnz
   570  00D3  2898               	goto	l861
   571  00D4  28D5               	goto	l873
   572  00D5                     l873:	
   573                           
   574                           ;main.c: 115: RC = 0;
   575  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   576  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   577  00D7  01BD               	clrf	_RC
   578  00D8                     l851:	
   579                           ;main.c: 105: while (1) {
   580                           
   581                           ;main.c: 116: }
   582                           
   583                           
   584                           ;main.c: 107: char x = rsget();
   585  00D8  120A  118A  2232  120A  118A  	fcall	_rsget
   586  00DD  00F6               	movwf	??_main
   587  00DE  0876               	movf	??_main,w
   588  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   589  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   590  00E1  00B6               	movwf	main@x
   591                           
   592                           ;main.c: 108: if (x == '\n') {
   593  00E2  300A               	movlw	10
   594  00E3  0636               	xorwf	main@x,w
   595  00E4  1903               	btfsc	3,2
   596  00E5  28B9               	goto	l871
   597                           
   598                           ;main.c: 117: else {
   599                           ;main.c: 118: BUF[RC] = x;
   600  00E6  0836               	movf	main@x,w
   601  00E7  00F6               	movwf	??_main
   602  00E8  083D               	movf	_RC,w
   603  00E9  3E20               	addlw	(low (_BUF| 0))& (0+255)
   604  00EA  0084               	movwf	4
   605  00EB  0876               	movf	??_main,w
   606  00EC  1383               	bcf	3,7	;select IRP bank0
   607  00ED  0080               	movwf	0
   608                           
   609                           ;main.c: 119: RC++;
   610  00EE  3001               	movlw	1
   611  00EF  00F6               	movwf	??_main
   612  00F0  0876               	movf	??_main,w
   613  00F1  07BD               	addwf	_RC,f
   614  00F2  28D8               	goto	l851
   615  00F3                     l879:	
   616                           ;main.c: 120: }
   617                           ;main.c: 121: }
   618                           ;main.c: 122: }
   619                           
   620                           
   621                           ;main.c: 124: else {
   622                           ;main.c: 125: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   623  00F3  3000               	movlw	0
   624  00F4  120A  118A  215E  120A  118A  	fcall	_beep
   625  00F9  3082               	movlw	130
   626  00FA  00F7               	movwf	??_main+1
   627  00FB  30DD               	movlw	221
   628  00FC  00F6               	movwf	??_main
   629  00FD                     u347:	
   630  00FD  0BF6               	decfsz	??_main,f
   631  00FE  28FD               	goto	u347
   632  00FF  0BF7               	decfsz	??_main+1,f
   633  0100  28FD               	goto	u347
   634  0101  2902               	nop2
   635                           
   636                           ;main.c: 126: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   637  0102  3001               	movlw	1
   638  0103  120A  118A  215E  120A  118A  	fcall	_beep
   639  0108  3082               	movlw	130
   640  0109  00F7               	movwf	??_main+1
   641  010A  30DD               	movlw	221
   642  010B  00F6               	movwf	??_main
   643  010C                     u357:	
   644  010C  0BF6               	decfsz	??_main,f
   645  010D  290C               	goto	u357
   646  010E  0BF7               	decfsz	??_main+1,f
   647  010F  290C               	goto	u357
   648  0110  2911               	nop2
   649  0111  292E               	goto	l885
   650  0112                     l891:	
   651                           
   652                           ;main.c: 132: PWMZOH = msg;
   653  0112  0837               	movf	main@msg,w
   654  0113  00F6               	movwf	??_main
   655  0114  0876               	movf	??_main,w
   656  0115  00BB               	movwf	_PWMZOH
   657                           
   658                           ;main.c: 133: rsend(T1ZOH);
   659  0116  0839               	movf	_T1ZOH,w
   660  0117  120A  118A  222A  120A  118A  	fcall	_rsend
   661                           
   662                           ;main.c: 134: rsend(T1ZOH >> 8);
   663  011C  1283               	bcf	3,5	;RP0=0, select bank0
   664  011D  1303               	bcf	3,6	;RP1=0, select bank0
   665  011E  083A               	movf	_T1ZOH+1,w
   666  011F  120A  118A  222A  120A  118A  	fcall	_rsend
   667                           
   668                           ;main.c: 135: }
   669  0124  292E               	goto	l885
   670  0125                     l899:	
   671                           
   672                           ;main.c: 137: T0PS = msg;
   673  0125  0837               	movf	main@msg,w
   674  0126  00F6               	movwf	??_main
   675  0127  0876               	movf	??_main,w
   676  0128  00BC               	movwf	_T0PS
   677                           
   678                           ;main.c: 138: TMR1 = 0;
   679  0129  018E               	clrf	14	;volatile
   680  012A  018F               	clrf	15	;volatile
   681  012B  0181               	clrf	1	;# 
   682  012C  168B               	bsf	11,5	;# 
   683  012D  1410               	bsf	16,0	;# 
   684  012E                     l885:	
   685                           ;main.c: 127: while (1) {
   686                           
   687                           ;main.c: 142: }
   688                           
   689                           
   690                           ;main.c: 129: char cmd = rsget();
   691  012E  120A  118A  2232  120A  118A  	fcall	_rsget
   692  0133  00F6               	movwf	??_main
   693  0134  0876               	movf	??_main,w
   694  0135  1283               	bcf	3,5	;RP0=0, select bank0
   695  0136  1303               	bcf	3,6	;RP1=0, select bank0
   696  0137  00B8               	movwf	main@cmd
   697                           
   698                           ;main.c: 130: char msg = rsget();
   699  0138  120A  118A  2232  120A  118A  	fcall	_rsget
   700  013D  00F6               	movwf	??_main
   701  013E  0876               	movf	??_main,w
   702  013F  1283               	bcf	3,5	;RP0=0, select bank0
   703  0140  1303               	bcf	3,6	;RP1=0, select bank0
   704  0141  00B7               	movwf	main@msg
   705                           
   706                           ;main.c: 131: if (cmd == 'x') {
   707  0142  3078               	movlw	120
   708  0143  0638               	xorwf	main@cmd,w
   709  0144  1903               	btfsc	3,2
   710  0145  2912               	goto	l891
   711                           
   712                           ;main.c: 136: else if (cmd == 't') {
   713  0146  3074               	movlw	116
   714  0147  1283               	bcf	3,5	;RP0=0, select bank0
   715  0148  1303               	bcf	3,6	;RP1=0, select bank0
   716  0149  0638               	xorwf	main@cmd,w
   717  014A  1903               	btfsc	3,2
   718  014B  2925               	goto	l899
   719                           
   720                           ;main.c: 143: else if (cmd == 's') {
   721  014C  3073               	movlw	115
   722  014D  1283               	bcf	3,5	;RP0=0, select bank0
   723  014E  1303               	bcf	3,6	;RP1=0, select bank0
   724  014F  0638               	xorwf	main@cmd,w
   725  0150  1D03               	btfss	3,2
   726  0151  292E               	goto	l885
   727                           
   728                           ;main.c: 144: T1CON &= 0xFE;
   729  0152  30FE               	movlw	254
   730  0153  00F6               	movwf	??_main
   731  0154  0876               	movf	??_main,w
   732  0155  0590               	andwf	16,f	;volatile
   733                           
   734                           ;main.c: 145: INTCON &= 0xDF;
   735  0156  30DF               	movlw	223
   736  0157  00F6               	movwf	??_main
   737  0158  0876               	movf	??_main,w
   738  0159  058B               	andwf	11,f	;volatile
   739                           
   740                           ;main.c: 146: PWM = 0;
   741  015A  019B               	clrf	27
   742                           
   743                           ;main.c: 147: T1ZOH = 0;
   744  015B  01B9               	clrf	_T1ZOH
   745  015C  01BA               	clrf	_T1ZOH+1
   746  015D  292E               	goto	l885
   747  015E                     __end_of_main:	
   748                           ;main.c: 148: }
   749                           ;main.c: 149: }
   750                           ;main.c: 150: }
   751                           ;main.c: 151: return 0;
   752                           ;	Return value of _main is never used
   753                           
   754                           
   755                           	psect	text1
   756  01F2                     __ptext1:	
   757 ;; *************** function _write *****************
   758 ;; Defined at:
   759 ;;		line 61 in file "main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  duty            1    wreg     char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  duty            1    5[COMMON] char 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, status,2
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   773 ;;      Params:         0       0       0       0       0
   774 ;;      Locals:         1       0       0       0       0
   775 ;;      Temps:          0       0       0       0       0
   776 ;;      Totals:         1       0       0       0       0
   777 ;;Total ram usage:        1 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    1
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _write
   789  01F2                     _write:	
   790                           
   791                           ;incstack = 0
   792                           ; Regs used in _write: [wreg+status,2]
   793                           ;write@duty stored from wreg
   794  01F2  00F5               	movwf	write@duty
   795                           
   796                           ;main.c: 62: if (duty > 100) PWM = 100;
   797  01F3  0875               	movf	write@duty,w
   798  01F4  3A80               	xorlw	128
   799  01F5  3E1B               	addlw	-229
   800  01F6  1C03               	skipc
   801  01F7  29FD               	goto	l85
   802  01F8  3064               	movlw	100
   803  01F9  1283               	bcf	3,5	;RP0=0, select bank0
   804  01FA  1303               	bcf	3,6	;RP1=0, select bank0
   805  01FB  009B               	movwf	27
   806  01FC  0008               	return
   807  01FD                     l85:	
   808                           
   809                           ;main.c: 63: else if (duty < 0) PWM = 0;
   810  01FD  1FF5               	btfss	write@duty,7
   811  01FE  2A03               	goto	l799
   812  01FF  1283               	bcf	3,5	;RP0=0, select bank0
   813  0200  1303               	bcf	3,6	;RP1=0, select bank0
   814  0201  019B               	clrf	27
   815  0202  0008               	return
   816  0203                     l799:	
   817                           
   818                           ;main.c: 64: else PWM = duty;
   819  0203  0875               	movf	write@duty,w
   820  0204  1283               	bcf	3,5	;RP0=0, select bank0
   821  0205  1303               	bcf	3,6	;RP1=0, select bank0
   822  0206  009B               	movwf	27
   823  0207  0008               	return
   824  0208                     __end_of_write:	
   825                           
   826                           	psect	text2
   827  0232                     __ptext2:	
   828 ;; *************** function _rsget *****************
   829 ;; Defined at:
   830 ;;		line 47 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      unsigned char 
   837 ;; Registers used:
   838 ;;		wreg
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   844 ;;      Params:         0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0
   846 ;;      Temps:          0       0       0       0       0
   847 ;;      Totals:         0       0       0       0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:    1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           
   859                           ;psect for function _rsget
   860  0232                     _rsget:	
   861  0232                     l76:	
   862                           ;main.c: 48: while (!RCIF) continue;
   863                           
   864                           ;incstack = 0
   865                           ; Regs used in _rsget: [wreg]
   866                           
   867  0232  1283               	bcf	3,5	;RP0=0, select bank0
   868  0233  1303               	bcf	3,6	;RP1=0, select bank0
   869  0234  1E8C               	btfss	12,5	;volatile
   870  0235  2A32               	goto	l76
   871                           
   872                           ;main.c: 49: return RCREG;
   873  0236  081A               	movf	26,w	;volatile
   874  0237  0008               	return
   875  0238                     __end_of_rsget:	
   876                           
   877                           	psect	text3
   878  01D7                     __ptext3:	
   879 ;; *************** function _read_tmr1 *****************
   880 ;; Defined at:
   881 ;;		line 54 in file "main.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0, pclath, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   895 ;;      Params:         0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0
   897 ;;      Temps:          0       0       0       0       0
   898 ;;      Totals:         0       0       0       0       0
   899 ;;Total ram usage:        0 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    2
   902 ;; This function calls:
   903 ;;		_rsend
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           
   910                           ;psect for function _read_tmr1
   911  01D7                     _read_tmr1:	
   912                           
   913                           ;main.c: 55: T1ZOH = TMR1;
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   917  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   918  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   919  01D9  080F               	movf	15,w	;volatile
   920  01DA  00BA               	movwf	_T1ZOH+1
   921  01DB  080E               	movf	14,w	;volatile
   922  01DC  00B9               	movwf	_T1ZOH
   923                           
   924                           ;main.c: 56: rsend(T1ZOH >> 8);
   925  01DD  083A               	movf	_T1ZOH+1,w
   926  01DE  120A  118A  222A  120A  118A  	fcall	_rsend
   927                           
   928                           ;main.c: 57: rsend(T1ZOH);
   929  01E3  1283               	bcf	3,5	;RP0=0, select bank0
   930  01E4  1303               	bcf	3,6	;RP1=0, select bank0
   931  01E5  0839               	movf	_T1ZOH,w
   932  01E6  120A  118A  222A   	fcall	_rsend
   933                           
   934                           ;main.c: 58: TMR1 -= T1ZOH;
   935  01E9  1283               	bcf	3,5	;RP0=0, select bank0
   936  01EA  1303               	bcf	3,6	;RP1=0, select bank0
   937  01EB  0839               	movf	_T1ZOH,w
   938  01EC  028E               	subwf	14,f	;volatile
   939  01ED  083A               	movf	_T1ZOH+1,w
   940  01EE  1C03               	skipc
   941  01EF  038F               	decf	15,f	;volatile
   942  01F0  028F               	subwf	15,f	;volatile
   943  01F1  0008               	return
   944  01F2                     __end_of_read_tmr1:	
   945                           
   946                           	psect	text4
   947  022A                     __ptext4:	
   948 ;; *************** function _rsend *****************
   949 ;; Defined at:
   950 ;;		line 42 in file "main.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  msg             1    wreg     unsigned char 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  msg             1    5[COMMON] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   964 ;;      Params:         0       0       0       0       0
   965 ;;      Locals:         1       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0
   967 ;;      Totals:         1       0       0       0       0
   968 ;;Total ram usage:        1 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_read_tmr1
   975 ;;		_main
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           
   980                           ;psect for function _rsend
   981  022A                     _rsend:	
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in _rsend: [wreg]
   985                           ;rsend@msg stored from wreg
   986  022A  00F5               	movwf	rsend@msg
   987  022B                     l70:	
   988                           ;main.c: 43: while (!TXIF) continue;
   989                           
   990  022B  1283               	bcf	3,5	;RP0=0, select bank0
   991  022C  1303               	bcf	3,6	;RP1=0, select bank0
   992  022D  1E0C               	btfss	12,4	;volatile
   993  022E  2A2B               	goto	l70
   994                           
   995                           ;main.c: 44: TXREG = msg;
   996  022F  0875               	movf	rsend@msg,w
   997  0230  0099               	movwf	25	;volatile
   998  0231  0008               	return
   999  0232                     __end_of_rsend:	
  1000                           
  1001                           	psect	text5
  1002  015E                     __ptext5:	
  1003 ;; *************** function _beep *****************
  1004 ;; Defined at:
  1005 ;;		line 31 in file "main.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  dash            1    wreg     unsigned char 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  dash            1    0[BANK0 ] unsigned char 
  1010 ;;  j               2    3[BANK0 ] int 
  1011 ;;  j               2    1[BANK0 ] int 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, status,2, status,0, btemp+1
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1021 ;;      Params:         0       0       0       0       0
  1022 ;;      Locals:         0       5       0       0       0
  1023 ;;      Temps:          1       0       0       0       0
  1024 ;;      Totals:         1       5       0       0       0
  1025 ;;Total ram usage:        6 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _beep
  1037  015E                     _beep:	
  1038                           
  1039                           ;incstack = 0
  1040                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1041                           ;beep@dash stored from wreg
  1042  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1043  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0160  00B1               	movwf	beep@dash
  1045                           
  1046                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1047  0161  0831               	movf	beep@dash,w
  1048  0162  1D03               	btfss	3,2
  1049  0163  298C               	goto	l769
  1050  0164  01B2               	clrf	beep@j
  1051  0165  01B3               	clrf	beep@j+1
  1052  0166                     L1:	
  1053  0166  0833               	movf	beep@j+1,w
  1054  0167  3A80               	xorlw	128
  1055  0168  00FF               	movwf	127
  1056  0169  3080               	movlw	128
  1057  016A  027F               	subwf	127,w
  1058  016B  1D03               	skipz
  1059  016C  296F               	goto	u185
  1060  016D  3064               	movlw	100
  1061  016E  0232               	subwf	beep@j,w
  1062  016F                     u185:	
  1063  016F  1803               	btfsc	3,0
  1064  0170  0008               	return
  1065                           
  1066                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1067  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1068  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1069  0173  1685               	bsf	5,5
  1070  0174  30C7               	movlw	199
  1071  0175  00F5               	movwf	??_beep
  1072  0176                     u367:	
  1073  0176  2977               	nop2
  1074  0177  0BF5               	decfsz	??_beep,f
  1075  0178  2976               	goto	u367
  1076  0179  297A               	nop2
  1077  017A  297B               	nop2
  1078                           
  1079                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1080  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1081  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1082  017D  1285               	bcf	5,5
  1083  017E  30A6               	movlw	166
  1084  017F  00F5               	movwf	??_beep
  1085  0180                     u377:	
  1086  0180  0BF5               	decfsz	??_beep,f
  1087  0181  2980               	goto	u377
  1088  0182  0000               	nop
  1089  0183  3001               	movlw	1
  1090  0184  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0185  1303               	bcf	3,6	;RP1=0, select bank0
  1092  0186  07B2               	addwf	beep@j,f
  1093  0187  1803               	skipnc
  1094  0188  0AB3               	incf	beep@j+1,f
  1095  0189  3000               	movlw	0
  1096  018A  07B3               	addwf	beep@j+1,f
  1097  018B  2966               	goto	L1
  1098  018C                     l769:	
  1099                           ;main.c: 35: }
  1100                           
  1101                           
  1102                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1103  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1104  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1105  018E  01B4               	clrf	beep@j_56
  1106  018F  01B5               	clrf	beep@j_56+1
  1107  0190                     L2:	
  1108  0190  0835               	movf	beep@j_56+1,w
  1109  0191  3A80               	xorlw	128
  1110  0192  00FF               	movwf	127
  1111  0193  3081               	movlw	129
  1112  0194  027F               	subwf	127,w
  1113  0195  1D03               	skipz
  1114  0196  2999               	goto	u205
  1115  0197  30F4               	movlw	244
  1116  0198  0234               	subwf	beep@j_56,w
  1117  0199                     u205:	
  1118  0199  1803               	btfsc	3,0
  1119  019A  0008               	return
  1120                           
  1121                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1122  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1123  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1124  019D  1685               	bsf	5,5
  1125  019E  30C7               	movlw	199
  1126  019F  00F5               	movwf	??_beep
  1127  01A0                     u387:	
  1128  01A0  29A1               	nop2
  1129  01A1  0BF5               	decfsz	??_beep,f
  1130  01A2  29A0               	goto	u387
  1131  01A3  29A4               	nop2
  1132  01A4  29A5               	nop2
  1133                           
  1134                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1135  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1136  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1137  01A7  1285               	bcf	5,5
  1138  01A8  30A6               	movlw	166
  1139  01A9  00F5               	movwf	??_beep
  1140  01AA                     u397:	
  1141  01AA  0BF5               	decfsz	??_beep,f
  1142  01AB  29AA               	goto	u397
  1143  01AC  0000               	nop
  1144  01AD  3001               	movlw	1
  1145  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1146  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1147  01B0  07B4               	addwf	beep@j_56,f
  1148  01B1  1803               	skipnc
  1149  01B2  0AB5               	incf	beep@j_56+1,f
  1150  01B3  3000               	movlw	0
  1151  01B4  07B5               	addwf	beep@j_56+1,f
  1152  01B5  2990               	goto	L2
  1153  01B6                     __end_of_beep:	
  1154                           
  1155                           	psect	text6
  1156  01B6                     __ptext6:	
  1157 ;; *************** function _sampling *****************
  1158 ;; Defined at:
  1159 ;;		line 70 in file "main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2, status,0
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1173 ;;      Params:         0       0       0       0       0
  1174 ;;      Locals:         0       0       0       0       0
  1175 ;;      Temps:          5       0       0       0       0
  1176 ;;      Totals:         5       0       0       0       0
  1177 ;;Total ram usage:        5 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; This function calls:
  1180 ;;		Nothing
  1181 ;; This function is called by:
  1182 ;;		Interrupt level 1
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           
  1187                           ;psect for function _sampling
  1188  01B6                     _sampling:	
  1189                           
  1190                           ;main.c: 71: kT0++;
  1191  01B6  3001               	movlw	1
  1192  01B7  00F0               	movwf	??_sampling
  1193  01B8  0870               	movf	??_sampling,w
  1194  01B9  07F8               	addwf	_kT0,f	;volatile
  1195                           
  1196                           ;main.c: 72: if (kT0 > T0PS) {
  1197  01BA  0878               	movf	_kT0,w	;volatile
  1198  01BB  023C               	subwf	_T0PS,w
  1199  01BC  1803               	skipnc
  1200  01BD  29CB               	goto	i1l813
  1201                           
  1202                           ;main.c: 73: kT0 = 0;
  1203  01BE  01F8               	clrf	_kT0	;volatile
  1204                           
  1205                           ;main.c: 74: T1ZOH = TMR1;
  1206  01BF  080F               	movf	15,w	;volatile
  1207  01C0  00BA               	movwf	_T1ZOH+1
  1208  01C1  080E               	movf	14,w	;volatile
  1209  01C2  00B9               	movwf	_T1ZOH
  1210                           
  1211                           ;main.c: 75: PWM = PWMZOH;
  1212  01C3  083B               	movf	_PWMZOH,w
  1213  01C4  009B               	movwf	27
  1214                           
  1215                           ;main.c: 76: TMR1 -= T1ZOH;
  1216  01C5  0839               	movf	_T1ZOH,w
  1217  01C6  028E               	subwf	14,f	;volatile
  1218  01C7  083A               	movf	_T1ZOH+1,w
  1219  01C8  1C03               	skipc
  1220  01C9  038F               	decf	15,f	;volatile
  1221  01CA  028F               	subwf	15,f	;volatile
  1222  01CB                     i1l813:	
  1223                           
  1224                           ;main.c: 77: }
  1225                           ;main.c: 78: TMR0IF = 0;
  1226  01CB  110B               	bcf	11,2	;volatile
  1227  01CC  0874               	movf	??_sampling+4,w
  1228  01CD  00FF               	movwf	127
  1229  01CE  0873               	movf	??_sampling+3,w
  1230  01CF  008A               	movwf	10
  1231  01D0  0872               	movf	??_sampling+2,w
  1232  01D1  0084               	movwf	4
  1233  01D2  0E71               	swapf	(??_sampling+1)^(0+-128),w
  1234  01D3  0083               	movwf	3
  1235  01D4  0EFE               	swapf	126,f
  1236  01D5  0E7E               	swapf	126,w
  1237  01D6  0009               	retfie
  1238  01D7                     __end_of_sampling:	
  1239  007E                     btemp	set	126	;btemp
  1240  007E                     wtemp0	set	126
  1241                           
  1242                           	psect	intentry
  1243  0004                     __pintentry:	
  1244                           ;incstack = 0
  1245                           ; Regs used in _sampling: [wreg+status,2+status,0]
  1246                           
  1247  0004                     interrupt_function:	
  1248  007E                     saved_w	set	btemp
  1249  0004  00FE               	movwf	btemp
  1250  0005  0E03               	swapf	3,w
  1251  0006  00F1               	movwf	??_sampling+1
  1252  0007  0804               	movf	4,w
  1253  0008  00F2               	movwf	??_sampling+2
  1254  0009  080A               	movf	10,w
  1255  000A  00F3               	movwf	??_sampling+3
  1256  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1257  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1258  000D  087F               	movf	btemp+1,w
  1259  000E  00F4               	movwf	??_sampling+4
  1260  000F  120A  118A  29B6   	ljmp	_sampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80      8      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_rsend
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     381
                                              6 COMMON     2     2      0
                                              5 BANK0      3     3      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              5 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _sampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      27      12        0.0%
ABS                  0      0      27       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Mon Jan  1 14:49:21 2018

                      pc 0002              __CFG_CP$OFF 0000                       l70 022B  
                     l76 0232                       l85 01FD                       _RC 003D  
                     fsr 0004                      TMR0 0001                      l851 00D8  
                    l861 0098                      l863 00A6                      l871 00B9  
                    l769 018C                      l873 00D5                      l857 0089  
                    l891 0112                      l859 008F                      l885 012E  
                    l799 0203                      l879 00F3                      l899 0125  
                    _BUF 0020                      _BUZ 002D                      u205 0199  
                    u317 0065                      _PR2 0092                      u327 0074  
                    u185 016F                      u337 0083             __CFG_CPD$OFF 0000  
                    u347 00FD                      u357 010C                      u367 0176  
                    u377 0180                      u387 01A0                      u397 01AA  
                    _PWM 001B                      _kT0 0078                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000                     T1CON 0010  
           __CFG_LVP$OFF 0000                     _T0PS 003C                     _RCIF 0065  
                   _TMR1 000E                     _TXIF 0064             __CFG_WRT$OFF 0000  
                   _beep 015E                     _main 002B                     btemp 007E  
                   start 0012                    INTCON 000B                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 0039                    i1l813 01CB  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0032                    _rsend 022A                    _rsget 0232  
                  main@x 0036                    _write 01F2           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_beep 01B6             __end_of_main 015E  
                 ??_beep 0075                   ??_main 0076                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070                   _INTCON 000B  
                 _TMR0IF 005A                   _PWMZOH 003B           __CFG_PWRTE$OFF 0000  
       __end_of_sampling 01D7                   saved_w 007E  __end_of__initialization 0027  
         __pcstackCOMMON 0070             __pidataBANK0 0208            __end_of_rsend 0232  
          __end_of_rsget 0238            __end_of_write 0208                  ??_rsend 0075  
                ??_rsget 0075                  ??_write 0075               __pbssBANK0 0039  
     __size_of_read_tmr1 001B               __pmaintext 002B               __pintentry 0004  
                _CCP1CON 0017                  _CCP2CON 001D                ?_sampling 0070  
                __ptext1 01F2                  __ptext2 0232                  __ptext3 01D7  
                __ptext4 022A                  __ptext5 015E                  __ptext6 01B6  
      __end_of_read_tmr1 01F2                  main@cmd 0038                  main@msg 0037  
   end_of_initialization 0027               ??_sampling 0070      start_initialization 0015  
             init_fetch0 0219              __pdataBANK0 0020              __pbssCOMMON 0078  
              ___latbits 0002            __pcstackBANK0 0031        __size_of_sampling 0021  
              _read_tmr1 01D7           __size_of_rsend 0008           __size_of_rsget 0006  
         __size_of_write 0016        interrupt_function 0004               ?_read_tmr1 0070  
               beep@j_56 0034                 beep@dash 0031            __size_of_beep 0058  
          __size_of_main 0133                 _sampling 01B6                 init_ram0 021D  
            ??_read_tmr1 0076                 intlevel1 0000                write@duty 0075  
               rsend@msg 0075               _OPTION_REG 0081  
