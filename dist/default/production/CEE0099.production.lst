

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Jan  3 14:28:37 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.43
    22                           ; Generated 25/07/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115                           
   116                           	psect	idataBANK0
   117  020E                     __pidataBANK0:	
   118                           
   119                           ;initializer for _BUF
   120  020E  3420               	retlw	32
   121  020F  3420               	retlw	32
   122  0210  3420               	retlw	32
   123  0211  3420               	retlw	32
   124  0212  3420               	retlw	32
   125  0213  3420               	retlw	32
   126  0214  3420               	retlw	32
   127  0215  3420               	retlw	32
   128  0216  3420               	retlw	32
   129  0217  3420               	retlw	32
   130  0218  3420               	retlw	32
   131  0219  3420               	retlw	32
   132  021A  3420               	retlw	32
   133  021B  3420               	retlw	32
   134  021C  3420               	retlw	32
   135  021D  3420               	retlw	32
   136  021E  3400               	retlw	0
   137  000E                     _TMR1	set	14
   138  001B                     _PWM	set	27
   139  0001                     _TMR0	set	1
   140  0006                     _PORTB	set	6
   141  0018                     _RCSTA	set	24
   142  0012                     _T2CON	set	18
   143  001B                     _CCPR2L	set	27
   144  001D                     _CCP2CON	set	29
   145  0015                     _CCPR1L	set	21
   146  0017                     _CCP1CON	set	23
   147  0010                     _T1CON	set	16
   148  000B                     _INTCON	set	11
   149  001A                     _RCREG	set	26
   150  0019                     _TXREG	set	25
   151  002D                     _BUZ	set	45
   152  005A                     _TMR0IF	set	90
   153  0065                     _RCIF	set	101
   154  0064                     _TXIF	set	100
   155  0099                     _SPBRG	set	153
   156  0098                     _TXSTA	set	152
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  009F                     _ADCON1	set	159
   161  0092                     _PR2	set	146
   162  0081                     _OPTION_REG	set	129
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  3031               	movlw	low (__pdataBANK0+17)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  300E               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  2223   	fcall	init_ram0
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0021  01B9               	clrf	__pbssBANK0& (0+127)
   184  0022  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   185  0023  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   186  0024  01BC               	clrf	(__pbssBANK0+3)& (0+127)
   187  0025  01BD               	clrf	(__pbssBANK0+4)& (0+127)
   188  0026                     end_of_initialization:	
   189                           ;End of C runtime variable initialization code
   190                           
   191  0026                     __end_of__initialization:	
   192  0026  0183               	clrf	3
   193  0027  120A  118A  282A   	ljmp	_main	;jump to C main() function
   194                           
   195                           	psect	bssBANK0
   196  0039                     __pbssBANK0:	
   197  0039                     _T1ZOH:	
   198  0039                     	ds	2
   199  003B                     _T0PS:	
   200  003B                     	ds	1
   201  003C                     _kT0:	
   202  003C                     	ds	1
   203  003D                     _RC:	
   204  003D                     	ds	1
   205                           
   206                           	psect	dataBANK0
   207  0020                     __pdataBANK0:	
   208  0020                     _BUF:	
   209  0020                     	ds	17
   210                           
   211                           	psect	inittext
   212  021F                     init_fetch0:	
   213                           ;	Called with low address in FSR and high address in W
   214                           
   215  021F  087E               	movf	126,w
   216  0220  008A               	movwf	10
   217  0221  087F               	movf	127,w
   218  0222  0082               	movwf	2
   219  0223                     init_ram0:	
   220                           ;Called with:
   221                           ;	high address of idata address in btemp 
   222                           ;	low address of idata address in btemp+1 
   223                           ;	low address of data in FSR
   224                           ;	high address + 1 of data in btemp-1
   225                           
   226  0223  221F  120A  118A   	fcall	init_fetch0
   227  0226  0080               	movwf	0
   228  0227  0A84               	incf	4,f
   229  0228  0804               	movf	4,w
   230  0229  067D               	xorwf	125,w
   231  022A  1903               	btfsc	3,2
   232  022B  3400               	retlw	0
   233  022C  0AFF               	incf	127,f
   234  022D  1903               	btfsc	3,2
   235  022E  0AFE               	incf	126,f
   236  022F  2A23               	goto	init_ram0
   237                           
   238                           	psect	cstackCOMMON
   239  0070                     __pcstackCOMMON:	
   240  0070                     ?_beep:	
   241  0070                     ?_rsend:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_rsget:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_read_tmr1:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_write:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_sampling:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ??_sampling:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_main:	
   260                           ; 1 bytes @ 0x0
   261                           
   262                           
   263                           ; 2 bytes @ 0x0
   264  0070                     	ds	5
   265  0075                     ??_beep:	
   266  0075                     ??_rsend:	
   267                           ; 1 bytes @ 0x5
   268                           
   269  0075                     ??_rsget:	
   270                           ; 1 bytes @ 0x5
   271                           
   272  0075                     ??_write:	
   273                           ; 1 bytes @ 0x5
   274                           
   275  0075                     rsend@msg:	
   276                           ; 1 bytes @ 0x5
   277                           
   278  0075                     write@duty:	
   279                           ; 1 bytes @ 0x5
   280                           
   281                           
   282                           ; 1 bytes @ 0x5
   283  0075                     	ds	1
   284  0076                     ??_read_tmr1:	
   285  0076                     ??_main:	
   286                           ; 1 bytes @ 0x6
   287                           
   288                           
   289                           ; 1 bytes @ 0x6
   290  0076                     	ds	3
   291                           
   292                           	psect	cstackBANK0
   293  0031                     __pcstackBANK0:	
   294  0031                     beep@dash:	
   295                           
   296                           ; 1 bytes @ 0x0
   297  0031                     	ds	1
   298  0032                     beep@j:	
   299                           
   300                           ; 2 bytes @ 0x1
   301  0032                     	ds	2
   302  0034                     beep@j_57:	
   303                           
   304                           ; 2 bytes @ 0x3
   305  0034                     	ds	2
   306  0036                     main@x:	
   307                           
   308                           ; 1 bytes @ 0x5
   309  0036                     	ds	1
   310  0037                     main@msg:	
   311                           
   312                           ; 1 bytes @ 0x6
   313  0037                     	ds	1
   314  0038                     main@cmd:	
   315                           
   316                           ; 1 bytes @ 0x7
   317  0038                     	ds	1
   318                           
   319                           	psect	maintext
   320  002A                     __pmaintext:	
   321 ;;
   322 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   323 ;;
   324 ;; *************** function _main *****************
   325 ;; Defined at:
   326 ;;		line 79 in file "main.c"
   327 ;; Parameters:    Size  Location     Type
   328 ;;		None
   329 ;; Auto vars:     Size  Location     Type
   330 ;;  cmd             1    7[BANK0 ] unsigned char 
   331 ;;  msg             1    6[BANK0 ] unsigned char 
   332 ;;  x               1    5[BANK0 ] unsigned char 
   333 ;; Return value:  Size  Location     Type
   334 ;;                  2  105[None  ] int 
   335 ;; Registers used:
   336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : B00/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   342 ;;      Params:         0       0       0       0       0
   343 ;;      Locals:         0       3       0       0       0
   344 ;;      Temps:          3       0       0       0       0
   345 ;;      Totals:         3       3       0       0       0
   346 ;;Total ram usage:        6 bytes
   347 ;; Hardware stack levels required when called:    3
   348 ;; This function calls:
   349 ;;		_beep
   350 ;;		_read_tmr1
   351 ;;		_rsend
   352 ;;		_rsget
   353 ;;		_write
   354 ;; This function is called by:
   355 ;;		Startup code after reset
   356 ;; This function uses a non-reentrant model
   357 ;;
   358                           
   359                           
   360                           ;psect for function _main
   361  002A                     _main:	
   362                           
   363                           ;main.c: 80: OPTION_REG = 0x83;
   364                           
   365                           ;incstack = 0
   366                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   367  002A  3083               	movlw	131
   368  002B  1683               	bsf	3,5	;RP0=1, select bank1
   369  002C  1303               	bcf	3,6	;RP1=0, select bank1
   370  002D  0081               	movwf	1	;volatile
   371                           
   372                           ;main.c: 81: INTCON = 0x80;
   373  002E  3080               	movlw	128
   374  002F  008B               	movwf	11	;volatile
   375                           
   376                           ;main.c: 82: T1CON = 0x03;
   377  0030  3003               	movlw	3
   378  0031  1283               	bcf	3,5	;RP0=0, select bank0
   379  0032  1303               	bcf	3,6	;RP1=0, select bank0
   380  0033  0090               	movwf	16	;volatile
   381                           
   382                           ;main.c: 83: CCP1CON = 0x0F;
   383  0034  300F               	movlw	15
   384  0035  0097               	movwf	23	;volatile
   385                           
   386                           ;main.c: 84: CCPR1L = 0;
   387  0036  0195               	clrf	21	;volatile
   388                           
   389                           ;main.c: 85: CCP2CON = 0x0F;
   390  0037  300F               	movlw	15
   391  0038  009D               	movwf	29	;volatile
   392                           
   393                           ;main.c: 86: CCPR2L = 0;
   394  0039  019B               	clrf	27	;volatile
   395                           
   396                           ;main.c: 87: PR2 = 100;
   397  003A  3064               	movlw	100
   398  003B  1683               	bsf	3,5	;RP0=1, select bank1
   399  003C  1303               	bcf	3,6	;RP1=0, select bank1
   400  003D  0092               	movwf	18	;volatile
   401                           
   402                           ;main.c: 88: T2CON = 0x04;
   403  003E  3004               	movlw	4
   404  003F  1283               	bcf	3,5	;RP0=0, select bank0
   405  0040  1303               	bcf	3,6	;RP1=0, select bank0
   406  0041  0092               	movwf	18	;volatile
   407                           
   408                           ;main.c: 89: ADCON1 = 0x05;
   409  0042  3005               	movlw	5
   410  0043  1683               	bsf	3,5	;RP0=1, select bank1
   411  0044  1303               	bcf	3,6	;RP1=0, select bank1
   412  0045  009F               	movwf	31	;volatile
   413                           
   414                           ;main.c: 90: TRISC = 0xFD;
   415  0046  30FD               	movlw	253
   416  0047  0087               	movwf	7	;volatile
   417                           
   418                           ;main.c: 91: TRISB = 0xFF;
   419  0048  30FF               	movlw	255
   420  0049  0086               	movwf	6	;volatile
   421                           
   422                           ;main.c: 92: TRISA = 0xDF;
   423  004A  30DF               	movlw	223
   424  004B  0085               	movwf	5	;volatile
   425                           
   426                           ;main.c: 93: RCSTA = 0x90;
   427  004C  3090               	movlw	144
   428  004D  1283               	bcf	3,5	;RP0=0, select bank0
   429  004E  1303               	bcf	3,6	;RP1=0, select bank0
   430  004F  0098               	movwf	24	;volatile
   431                           
   432                           ;main.c: 94: TXSTA = 0x24;
   433  0050  3024               	movlw	36
   434  0051  1683               	bsf	3,5	;RP0=1, select bank1
   435  0052  1303               	bcf	3,6	;RP1=0, select bank1
   436  0053  0098               	movwf	24	;volatile
   437                           
   438                           ;main.c: 95: SPBRG = 12;
   439  0054  300C               	movlw	12
   440  0055  0099               	movwf	25	;volatile
   441                           
   442                           ;main.c: 99: if (PORTB & 0x02) {
   443  0056  1283               	bcf	3,5	;RP0=0, select bank0
   444  0057  1303               	bcf	3,6	;RP1=0, select bank0
   445  0058  1C86               	btfss	6,1	;volatile
   446  0059  28EF               	goto	l883
   447                           
   448                           ;main.c: 100: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   449  005A  3000               	movlw	0
   450  005B  120A  118A  2166  120A  118A  	fcall	_beep
   451  0060  3082               	movlw	130
   452  0061  00F7               	movwf	??_main+1
   453  0062  30DD               	movlw	221
   454  0063  00F6               	movwf	??_main
   455  0064                     u317:	
   456  0064  0BF6               	decfsz	??_main,f
   457  0065  2864               	goto	u317
   458  0066  0BF7               	decfsz	??_main+1,f
   459  0067  2864               	goto	u317
   460  0068  2869               	nop2
   461                           
   462                           ;main.c: 101: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   463  0069  3000               	movlw	0
   464  006A  120A  118A  2166  120A  118A  	fcall	_beep
   465  006F  3082               	movlw	130
   466  0070  00F7               	movwf	??_main+1
   467  0071  30DD               	movlw	221
   468  0072  00F6               	movwf	??_main
   469  0073                     u327:	
   470  0073  0BF6               	decfsz	??_main,f
   471  0074  2873               	goto	u327
   472  0075  0BF7               	decfsz	??_main+1,f
   473  0076  2873               	goto	u327
   474  0077  2878               	nop2
   475                           
   476                           ;main.c: 102: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   477  0078  3000               	movlw	0
   478  0079  120A  118A  2166  120A  118A  	fcall	_beep
   479  007E  3082               	movlw	130
   480  007F  00F7               	movwf	??_main+1
   481  0080  30DD               	movlw	221
   482  0081  00F6               	movwf	??_main
   483  0082                     u337:	
   484  0082  0BF6               	decfsz	??_main,f
   485  0083  2882               	goto	u337
   486  0084  0BF7               	decfsz	??_main+1,f
   487  0085  2882               	goto	u337
   488  0086  2887               	nop2
   489  0087  28D4               	goto	l853
   490  0088                     l859:	
   491                           ;main.c: 108: case '7': read_tmr1(); break;
   492                           
   493                           ;main.c: 107: switch (BUF[0]) {
   494                           
   495  0088  120A  118A  21DD  120A  118A  	fcall	_read_tmr1
   496  008D  28D1               	goto	l877
   497  008E                     l861:	
   498                           ;main.c: 109: case '5': write(BUF[1]); break;
   499                           
   500  008E  1283               	bcf	3,5	;RP0=0, select bank0
   501  008F  1303               	bcf	3,6	;RP1=0, select bank0
   502  0090  0821               	movf	_BUF+1,w
   503  0091  120A  118A  21F8  120A  118A  	fcall	_write
   504  0096  28D1               	goto	l877
   505  0097                     l863:	
   506                           ;main.c: 110: case '1': write(BUF[1]); read_tmr1(); break;
   507                           
   508  0097  1283               	bcf	3,5	;RP0=0, select bank0
   509  0098  1303               	bcf	3,6	;RP1=0, select bank0
   510  0099  0821               	movf	_BUF+1,w
   511  009A  120A  118A  21F8  120A  118A  	fcall	_write
   512  009F  120A  118A  21DD  120A  118A  	fcall	_read_tmr1
   513  00A4  28D1               	goto	l877
   514  00A5                     l865:	
   515                           ;main.c: 111: case '2': write(0); _delay((unsigned long)((4000)*(4000000/4000.0))); beep
      +                          (0); TMR1 = 0; break;
   516                           
   517  00A5  3000               	movlw	0
   518  00A6  120A  118A  21F8  120A  118A  	fcall	_write
   519  00AB  3015               	movlw	21
   520  00AC  00F8               	movwf	??_main+2
   521  00AD  304B               	movlw	75
   522  00AE  00F7               	movwf	??_main+1
   523  00AF  30BE               	movlw	190
   524  00B0  00F6               	movwf	??_main
   525  00B1                     u347:	
   526  00B1  0BF6               	decfsz	??_main,f
   527  00B2  28B1               	goto	u347
   528  00B3  0BF7               	decfsz	??_main+1,f
   529  00B4  28B1               	goto	u347
   530  00B5  0BF8               	decfsz	??_main+2,f
   531  00B6  28B1               	goto	u347
   532  00B7  0000               	nop
   533  00B8  3000               	movlw	0
   534  00B9  120A  118A  2166  120A  118A  	fcall	_beep
   535  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   536  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   537  00C0  018E               	clrf	14	;volatile
   538  00C1  018F               	clrf	15	;volatile
   539                           
   540                           ;main.c: 112: }
   541  00C2  28D1               	goto	l877
   542  00C3                     l875:	
   543  00C3  0820               	movf	_BUF,w
   544                           
   545                           ; Switch size 1, requested type "space"
   546                           ; Number of cases is 4, Range of values is 49 to 55
   547                           ; switch strategies available:
   548                           ; Name         Instructions Cycles
   549                           ; simple_byte           13     7 (average)
   550                           ; direct_byte           32    11 (fixed)
   551                           ; jumptable            263     9 (fixed)
   552                           ;	Chosen strategy is simple_byte
   553  00C4  3A31               	xorlw	49	; case 49
   554  00C5  1903               	skipnz
   555  00C6  2897               	goto	l863
   556  00C7  3A03               	xorlw	3	; case 50
   557  00C8  1903               	skipnz
   558  00C9  28A5               	goto	l865
   559  00CA  3A07               	xorlw	7	; case 53
   560  00CB  1903               	skipnz
   561  00CC  288E               	goto	l861
   562  00CD  3A02               	xorlw	2	; case 55
   563  00CE  1903               	skipnz
   564  00CF  2888               	goto	l859
   565  00D0  28D1               	goto	l877
   566  00D1                     l877:	
   567                           
   568                           ;main.c: 113: RC = 0;
   569  00D1  1283               	bcf	3,5	;RP0=0, select bank0
   570  00D2  1303               	bcf	3,6	;RP1=0, select bank0
   571  00D3  01BD               	clrf	_RC
   572  00D4                     l853:	
   573                           ;main.c: 103: while (1) {
   574                           
   575                           ;main.c: 114: }
   576                           
   577                           
   578                           ;main.c: 105: char x = rsget();
   579  00D4  120A  118A  2238  120A  118A  	fcall	_rsget
   580  00D9  00F6               	movwf	??_main
   581  00DA  0876               	movf	??_main,w
   582  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   583  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   584  00DD  00B6               	movwf	main@x
   585                           
   586                           ;main.c: 106: if (x == '\n') {
   587  00DE  300A               	movlw	10
   588  00DF  0636               	xorwf	main@x,w
   589  00E0  1903               	btfsc	3,2
   590  00E1  28C3               	goto	l875
   591                           
   592                           ;main.c: 115: else {
   593                           ;main.c: 116: BUF[RC] = x;
   594  00E2  0836               	movf	main@x,w
   595  00E3  00F6               	movwf	??_main
   596  00E4  083D               	movf	_RC,w
   597  00E5  3E20               	addlw	(low (_BUF| 0))& (0+255)
   598  00E6  0084               	movwf	4
   599  00E7  0876               	movf	??_main,w
   600  00E8  1383               	bcf	3,7	;select IRP bank0
   601  00E9  0080               	movwf	0
   602                           
   603                           ;main.c: 117: RC++;
   604  00EA  3001               	movlw	1
   605  00EB  00F6               	movwf	??_main
   606  00EC  0876               	movf	??_main,w
   607  00ED  07BD               	addwf	_RC,f
   608  00EE  28D4               	goto	l853
   609  00EF                     l883:	
   610                           ;main.c: 118: }
   611                           ;main.c: 119: }
   612                           ;main.c: 120: }
   613                           
   614                           
   615                           ;main.c: 122: else {
   616                           ;main.c: 123: beep(0); _delay((unsigned long)((100)*(4000000/4000.0)));
   617  00EF  3000               	movlw	0
   618  00F0  120A  118A  2166  120A  118A  	fcall	_beep
   619  00F5  3082               	movlw	130
   620  00F6  00F7               	movwf	??_main+1
   621  00F7  30DD               	movlw	221
   622  00F8  00F6               	movwf	??_main
   623  00F9                     u357:	
   624  00F9  0BF6               	decfsz	??_main,f
   625  00FA  28F9               	goto	u357
   626  00FB  0BF7               	decfsz	??_main+1,f
   627  00FC  28F9               	goto	u357
   628  00FD  28FE               	nop2
   629                           
   630                           ;main.c: 124: beep(1); _delay((unsigned long)((100)*(4000000/4000.0)));
   631  00FE  3001               	movlw	1
   632  00FF  120A  118A  2166  120A  118A  	fcall	_beep
   633  0104  3082               	movlw	130
   634  0105  00F7               	movwf	??_main+1
   635  0106  30DD               	movlw	221
   636  0107  00F6               	movwf	??_main
   637  0108                     u367:	
   638  0108  0BF6               	decfsz	??_main,f
   639  0109  2908               	goto	u367
   640  010A  0BF7               	decfsz	??_main+1,f
   641  010B  2908               	goto	u367
   642  010C  290D               	nop2
   643  010D  292D               	goto	l889
   644  010E                     l897:	
   645                           
   646                           ;main.c: 131: PWM = msg;
   647  010E  0837               	movf	main@msg,w
   648  010F  009B               	movwf	27
   649                           
   650                           ;main.c: 132: rsend(T1ZOH);
   651  0110  0839               	movf	_T1ZOH,w	;volatile
   652  0111  120A  118A  2230  120A  118A  	fcall	_rsend
   653                           
   654                           ;main.c: 133: rsend(T1ZOH >> 8);
   655  0116  1283               	bcf	3,5	;RP0=0, select bank0
   656  0117  1303               	bcf	3,6	;RP1=0, select bank0
   657  0118  083A               	movf	_T1ZOH+1,w	;volatile
   658  0119  120A  118A  2230  120A  118A  	fcall	_rsend
   659                           
   660                           ;main.c: 134: }
   661  011E  292D               	goto	l889
   662  011F                     l905:	
   663                           
   664                           ;main.c: 136: T0PS = msg;
   665  011F  0837               	movf	main@msg,w
   666  0120  00F6               	movwf	??_main
   667  0121  0876               	movf	??_main,w
   668  0122  00BB               	movwf	_T0PS
   669                           
   670                           ;main.c: 137: kT0 = T0PS;
   671  0123  083B               	movf	_T0PS,w
   672  0124  00F6               	movwf	??_main
   673  0125  0876               	movf	??_main,w
   674  0126  00BC               	movwf	_kT0
   675                           
   676                           ;main.c: 138: TMR1 = 0;
   677  0127  018E               	clrf	14	;volatile
   678  0128  018F               	clrf	15	;volatile
   679                           
   680                           ;main.c: 139: T1CON |= 0x01;
   681  0129  1410               	bsf	16,0	;volatile
   682                           
   683                           ;main.c: 140: TMR0 = 255;
   684  012A  30FF               	movlw	255
   685  012B  0081               	movwf	1	;volatile
   686  012C  168B               	bsf	11,5	;# 
   687  012D                     l889:	
   688                           ;main.c: 125: while (1) {
   689                           
   690                           ;main.c: 142: }
   691                           
   692                           
   693                           ;main.c: 127: TMR0 = 0;
   694  012D  1283               	bcf	3,5	;RP0=0, select bank0
   695  012E  1303               	bcf	3,6	;RP1=0, select bank0
   696  012F  0181               	clrf	1	;volatile
   697                           
   698                           ;main.c: 128: char cmd = rsget();
   699  0130  120A  118A  2238  120A  118A  	fcall	_rsget
   700  0135  00F6               	movwf	??_main
   701  0136  0876               	movf	??_main,w
   702  0137  1283               	bcf	3,5	;RP0=0, select bank0
   703  0138  1303               	bcf	3,6	;RP1=0, select bank0
   704  0139  00B8               	movwf	main@cmd
   705                           
   706                           ;main.c: 129: char msg = rsget();
   707  013A  120A  118A  2238  120A  118A  	fcall	_rsget
   708  013F  00F6               	movwf	??_main
   709  0140  0876               	movf	??_main,w
   710  0141  1283               	bcf	3,5	;RP0=0, select bank0
   711  0142  1303               	bcf	3,6	;RP1=0, select bank0
   712  0143  00B7               	movwf	main@msg
   713                           
   714                           ;main.c: 130: if (cmd == 'x') {
   715  0144  3078               	movlw	120
   716  0145  0638               	xorwf	main@cmd,w
   717  0146  1903               	btfsc	3,2
   718  0147  290E               	goto	l897
   719                           
   720                           ;main.c: 135: else if (cmd == 't') {
   721  0148  3074               	movlw	116
   722  0149  1283               	bcf	3,5	;RP0=0, select bank0
   723  014A  1303               	bcf	3,6	;RP1=0, select bank0
   724  014B  0638               	xorwf	main@cmd,w
   725  014C  1903               	btfsc	3,2
   726  014D  291F               	goto	l905
   727                           
   728                           ;main.c: 143: else if (cmd == 's') {
   729  014E  3073               	movlw	115
   730  014F  1283               	bcf	3,5	;RP0=0, select bank0
   731  0150  1303               	bcf	3,6	;RP1=0, select bank0
   732  0151  0638               	xorwf	main@cmd,w
   733  0152  1D03               	btfss	3,2
   734  0153  292D               	goto	l889
   735                           
   736                           ;main.c: 144: T1CON &= 0xFE;
   737  0154  30FE               	movlw	254
   738  0155  00F6               	movwf	??_main
   739  0156  0876               	movf	??_main,w
   740  0157  0590               	andwf	16,f	;volatile
   741                           
   742                           ;main.c: 145: INTCON &= 0xDF;
   743  0158  30DF               	movlw	223
   744  0159  00F6               	movwf	??_main
   745  015A  0876               	movf	??_main,w
   746  015B  058B               	andwf	11,f	;volatile
   747                           
   748                           ;main.c: 146: PWM = 0;
   749  015C  019B               	clrf	27
   750                           
   751                           ;main.c: 147: T1ZOH = 0;
   752  015D  01B9               	clrf	_T1ZOH	;volatile
   753  015E  01BA               	clrf	_T1ZOH+1	;volatile
   754                           
   755                           ;main.c: 148: beep(0);
   756  015F  3000               	movlw	0
   757  0160  120A  118A  2166  120A  118A  	fcall	_beep
   758  0165  292D               	goto	l889
   759  0166                     __end_of_main:	
   760                           ;main.c: 149: }
   761                           ;main.c: 150: }
   762                           ;main.c: 151: }
   763                           ;main.c: 152: return 0;
   764                           ;	Return value of _main is never used
   765                           
   766                           
   767                           	psect	text1
   768  01F8                     __ptext1:	
   769 ;; *************** function _write *****************
   770 ;; Defined at:
   771 ;;		line 61 in file "main.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  duty            1    wreg     char 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  duty            1    5[COMMON] char 
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, status,2
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         1       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0
   788 ;;      Totals:         1       0       0       0       0
   789 ;;Total ram usage:        1 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    1
   792 ;; This function calls:
   793 ;;		Nothing
   794 ;; This function is called by:
   795 ;;		_main
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _write
   801  01F8                     _write:	
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _write: [wreg+status,2]
   805                           ;write@duty stored from wreg
   806  01F8  00F5               	movwf	write@duty
   807                           
   808                           ;main.c: 62: if (duty > 100) PWM = 100;
   809  01F9  0875               	movf	write@duty,w
   810  01FA  3A80               	xorlw	128
   811  01FB  3E1B               	addlw	-229
   812  01FC  1C03               	skipc
   813  01FD  2A03               	goto	l87
   814  01FE  3064               	movlw	100
   815  01FF  1283               	bcf	3,5	;RP0=0, select bank0
   816  0200  1303               	bcf	3,6	;RP1=0, select bank0
   817  0201  009B               	movwf	27
   818  0202  0008               	return
   819  0203                     l87:	
   820                           
   821                           ;main.c: 63: else if (duty < 0) PWM = 0;
   822  0203  1FF5               	btfss	write@duty,7
   823  0204  2A09               	goto	l803
   824  0205  1283               	bcf	3,5	;RP0=0, select bank0
   825  0206  1303               	bcf	3,6	;RP1=0, select bank0
   826  0207  019B               	clrf	27
   827  0208  0008               	return
   828  0209                     l803:	
   829                           
   830                           ;main.c: 64: else PWM = duty;
   831  0209  0875               	movf	write@duty,w
   832  020A  1283               	bcf	3,5	;RP0=0, select bank0
   833  020B  1303               	bcf	3,6	;RP1=0, select bank0
   834  020C  009B               	movwf	27
   835  020D  0008               	return
   836  020E                     __end_of_write:	
   837                           
   838                           	psect	text2
   839  0238                     __ptext2:	
   840 ;; *************** function _rsget *****************
   841 ;; Defined at:
   842 ;;		line 47 in file "main.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      unsigned char 
   849 ;; Registers used:
   850 ;;		wreg
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   856 ;;      Params:         0       0       0       0       0
   857 ;;      Locals:         0       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0
   859 ;;      Totals:         0       0       0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    1
   863 ;; This function calls:
   864 ;;		Nothing
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           
   871                           ;psect for function _rsget
   872  0238                     _rsget:	
   873  0238                     l78:	
   874                           ;main.c: 48: while (!RCIF) continue;
   875                           
   876                           ;incstack = 0
   877                           ; Regs used in _rsget: [wreg]
   878                           
   879  0238  1283               	bcf	3,5	;RP0=0, select bank0
   880  0239  1303               	bcf	3,6	;RP1=0, select bank0
   881  023A  1E8C               	btfss	12,5	;volatile
   882  023B  2A38               	goto	l78
   883                           
   884                           ;main.c: 49: return RCREG;
   885  023C  081A               	movf	26,w	;volatile
   886  023D  0008               	return
   887  023E                     __end_of_rsget:	
   888                           
   889                           	psect	text3
   890  01DD                     __ptext3:	
   891 ;; *************** function _read_tmr1 *****************
   892 ;; Defined at:
   893 ;;		line 54 in file "main.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0, pclath, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   907 ;;      Params:         0       0       0       0       0
   908 ;;      Locals:         0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0
   910 ;;      Totals:         0       0       0       0       0
   911 ;;Total ram usage:        0 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    2
   914 ;; This function calls:
   915 ;;		_rsend
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           
   922                           ;psect for function _read_tmr1
   923  01DD                     _read_tmr1:	
   924                           
   925                           ;main.c: 55: T1ZOH = TMR1;
   926                           
   927                           ;incstack = 0
   928                           ; Regs used in _read_tmr1: [wreg+status,2+status,0+pclath+cstack]
   929  01DD  1283               	bcf	3,5	;RP0=0, select bank0
   930  01DE  1303               	bcf	3,6	;RP1=0, select bank0
   931  01DF  080F               	movf	15,w	;volatile
   932  01E0  00BA               	movwf	_T1ZOH+1	;volatile
   933  01E1  080E               	movf	14,w	;volatile
   934  01E2  00B9               	movwf	_T1ZOH	;volatile
   935                           
   936                           ;main.c: 56: rsend(T1ZOH >> 8);
   937  01E3  083A               	movf	_T1ZOH+1,w	;volatile
   938  01E4  120A  118A  2230  120A  118A  	fcall	_rsend
   939                           
   940                           ;main.c: 57: rsend(T1ZOH);
   941  01E9  1283               	bcf	3,5	;RP0=0, select bank0
   942  01EA  1303               	bcf	3,6	;RP1=0, select bank0
   943  01EB  0839               	movf	_T1ZOH,w	;volatile
   944  01EC  120A  118A  2230   	fcall	_rsend
   945                           
   946                           ;main.c: 58: TMR1 -= T1ZOH;
   947  01EF  1283               	bcf	3,5	;RP0=0, select bank0
   948  01F0  1303               	bcf	3,6	;RP1=0, select bank0
   949  01F1  0839               	movf	_T1ZOH,w	;volatile
   950  01F2  028E               	subwf	14,f	;volatile
   951  01F3  083A               	movf	_T1ZOH+1,w	;volatile
   952  01F4  1C03               	skipc
   953  01F5  038F               	decf	15,f	;volatile
   954  01F6  028F               	subwf	15,f	;volatile
   955  01F7  0008               	return
   956  01F8                     __end_of_read_tmr1:	
   957                           
   958                           	psect	text4
   959  0230                     __ptext4:	
   960 ;; *************** function _rsend *****************
   961 ;; Defined at:
   962 ;;		line 42 in file "main.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  msg             1    wreg     unsigned char 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  msg             1    5[COMMON] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   976 ;;      Params:         0       0       0       0       0
   977 ;;      Locals:         1       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0
   979 ;;      Totals:         1       0       0       0       0
   980 ;;Total ram usage:        1 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    1
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_read_tmr1
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           
   992                           ;psect for function _rsend
   993  0230                     _rsend:	
   994                           
   995                           ;incstack = 0
   996                           ; Regs used in _rsend: [wreg]
   997                           ;rsend@msg stored from wreg
   998  0230  00F5               	movwf	rsend@msg
   999  0231                     l72:	
  1000                           ;main.c: 43: while (!TXIF) continue;
  1001                           
  1002  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1003  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1004  0233  1E0C               	btfss	12,4	;volatile
  1005  0234  2A31               	goto	l72
  1006                           
  1007                           ;main.c: 44: TXREG = msg;
  1008  0235  0875               	movf	rsend@msg,w
  1009  0236  0099               	movwf	25	;volatile
  1010  0237  0008               	return
  1011  0238                     __end_of_rsend:	
  1012                           
  1013                           	psect	text5
  1014  0166                     __ptext5:	
  1015 ;; *************** function _beep *****************
  1016 ;; Defined at:
  1017 ;;		line 31 in file "main.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  dash            1    wreg     unsigned char 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  dash            1    0[BANK0 ] unsigned char 
  1022 ;;  j               2    3[BANK0 ] int 
  1023 ;;  j               2    1[BANK0 ] int 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0, btemp+1
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         0       0       0       0       0
  1034 ;;      Locals:         0       5       0       0       0
  1035 ;;      Temps:          1       0       0       0       0
  1036 ;;      Totals:         1       5       0       0       0
  1037 ;;Total ram usage:        6 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    1
  1040 ;; This function calls:
  1041 ;;		Nothing
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           
  1048                           ;psect for function _beep
  1049  0166                     _beep:	
  1050                           
  1051                           ;incstack = 0
  1052                           ; Regs used in _beep: [wreg+status,2+status,0+btemp+1]
  1053                           ;beep@dash stored from wreg
  1054  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1055  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1056  0168  00B1               	movwf	beep@dash
  1057                           
  1058                           ;main.c: 32: if (!dash) for (int j = 0; j < 100; ++j) {
  1059  0169  0831               	movf	beep@dash,w
  1060  016A  1D03               	btfss	3,2
  1061  016B  2994               	goto	l773
  1062  016C  01B2               	clrf	beep@j
  1063  016D  01B3               	clrf	beep@j+1
  1064  016E                     L1:	
  1065  016E  0833               	movf	beep@j+1,w
  1066  016F  3A80               	xorlw	128
  1067  0170  00FF               	movwf	127
  1068  0171  3080               	movlw	128
  1069  0172  027F               	subwf	127,w
  1070  0173  1D03               	skipz
  1071  0174  2977               	goto	u185
  1072  0175  3064               	movlw	100
  1073  0176  0232               	subwf	beep@j,w
  1074  0177                     u185:	
  1075  0177  1803               	btfsc	3,0
  1076  0178  0008               	return
  1077                           
  1078                           ;main.c: 33: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1079  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1080  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1081  017B  1685               	bsf	5,5
  1082  017C  30C7               	movlw	199
  1083  017D  00F5               	movwf	??_beep
  1084  017E                     u377:	
  1085  017E  297F               	nop2
  1086  017F  0BF5               	decfsz	??_beep,f
  1087  0180  297E               	goto	u377
  1088  0181  2982               	nop2
  1089  0182  2983               	nop2
  1090                           
  1091                           ;main.c: 34: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1092  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1093  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1094  0185  1285               	bcf	5,5
  1095  0186  30A6               	movlw	166
  1096  0187  00F5               	movwf	??_beep
  1097  0188                     u387:	
  1098  0188  0BF5               	decfsz	??_beep,f
  1099  0189  2988               	goto	u387
  1100  018A  0000               	nop
  1101  018B  3001               	movlw	1
  1102  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1103  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1104  018E  07B2               	addwf	beep@j,f
  1105  018F  1803               	skipnc
  1106  0190  0AB3               	incf	beep@j+1,f
  1107  0191  3000               	movlw	0
  1108  0192  07B3               	addwf	beep@j+1,f
  1109  0193  296E               	goto	L1
  1110  0194                     l773:	
  1111                           ;main.c: 35: }
  1112                           
  1113                           
  1114                           ;main.c: 36: else for (int j = 0; j < 500; ++j) {
  1115  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1116  0195  1303               	bcf	3,6	;RP1=0, select bank0
  1117  0196  01B4               	clrf	beep@j_57
  1118  0197  01B5               	clrf	beep@j_57+1
  1119  0198                     L2:	
  1120  0198  0835               	movf	beep@j_57+1,w
  1121  0199  3A80               	xorlw	128
  1122  019A  00FF               	movwf	127
  1123  019B  3081               	movlw	129
  1124  019C  027F               	subwf	127,w
  1125  019D  1D03               	skipz
  1126  019E  29A1               	goto	u205
  1127  019F  30F4               	movlw	244
  1128  01A0  0234               	subwf	beep@j_57,w
  1129  01A1                     u205:	
  1130  01A1  1803               	btfsc	3,0
  1131  01A2  0008               	return
  1132                           
  1133                           ;main.c: 37: BUZ = 1; _delay((unsigned long)((1000)*(4000000/4000000.0)));
  1134  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1135  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  1136  01A5  1685               	bsf	5,5
  1137  01A6  30C7               	movlw	199
  1138  01A7  00F5               	movwf	??_beep
  1139  01A8                     u397:	
  1140  01A8  29A9               	nop2
  1141  01A9  0BF5               	decfsz	??_beep,f
  1142  01AA  29A8               	goto	u397
  1143  01AB  29AC               	nop2
  1144  01AC  29AD               	nop2
  1145                           
  1146                           ;main.c: 38: BUZ = 0; _delay((unsigned long)((500)*(4000000/4000000.0)));
  1147  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1148  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1149  01AF  1285               	bcf	5,5
  1150  01B0  30A6               	movlw	166
  1151  01B1  00F5               	movwf	??_beep
  1152  01B2                     u407:	
  1153  01B2  0BF5               	decfsz	??_beep,f
  1154  01B3  29B2               	goto	u407
  1155  01B4  0000               	nop
  1156  01B5  3001               	movlw	1
  1157  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1158  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1159  01B8  07B4               	addwf	beep@j_57,f
  1160  01B9  1803               	skipnc
  1161  01BA  0AB5               	incf	beep@j_57+1,f
  1162  01BB  3000               	movlw	0
  1163  01BC  07B5               	addwf	beep@j_57+1,f
  1164  01BD  2998               	goto	L2
  1165  01BE                     __end_of_beep:	
  1166                           
  1167                           	psect	text6
  1168  01BE                     __ptext6:	
  1169 ;; *************** function _sampling *****************
  1170 ;; Defined at:
  1171 ;;		line 69 in file "main.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1185 ;;      Params:         0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0
  1187 ;;      Temps:          5       0       0       0       0
  1188 ;;      Totals:         5       0       0       0       0
  1189 ;;Total ram usage:        5 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		Interrupt level 1
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           
  1199                           ;psect for function _sampling
  1200  01BE                     _sampling:	
  1201                           
  1202                           ;main.c: 70: kT0++;
  1203  01BE  3001               	movlw	1
  1204  01BF  00F0               	movwf	??_sampling
  1205  01C0  0870               	movf	??_sampling,w
  1206  01C1  07BC               	addwf	_kT0,f
  1207                           
  1208                           ;main.c: 71: if (kT0 > T0PS) {
  1209  01C2  083C               	movf	_kT0,w
  1210  01C3  023B               	subwf	_T0PS,w
  1211  01C4  1803               	skipnc
  1212  01C5  29D1               	goto	i1l815
  1213                           
  1214                           ;main.c: 72: kT0 = 0;
  1215  01C6  01BC               	clrf	_kT0
  1216                           
  1217                           ;main.c: 73: T1ZOH = TMR1;
  1218  01C7  080F               	movf	15,w	;volatile
  1219  01C8  00BA               	movwf	_T1ZOH+1	;volatile
  1220  01C9  080E               	movf	14,w	;volatile
  1221  01CA  00B9               	movwf	_T1ZOH	;volatile
  1222                           
  1223                           ;main.c: 74: TMR1 -= T1ZOH;
  1224  01CB  0839               	movf	_T1ZOH,w	;volatile
  1225  01CC  028E               	subwf	14,f	;volatile
  1226  01CD  083A               	movf	_T1ZOH+1,w	;volatile
  1227  01CE  1C03               	skipc
  1228  01CF  038F               	decf	15,f	;volatile
  1229  01D0  028F               	subwf	15,f	;volatile
  1230  01D1                     i1l815:	
  1231                           
  1232                           ;main.c: 75: }
  1233                           ;main.c: 76: TMR0IF = 0;
  1234  01D1  110B               	bcf	11,2	;volatile
  1235  01D2  0874               	movf	??_sampling+4,w
  1236  01D3  00FF               	movwf	127
  1237  01D4  0873               	movf	??_sampling+3,w
  1238  01D5  008A               	movwf	10
  1239  01D6  0872               	movf	??_sampling+2,w
  1240  01D7  0084               	movwf	4
  1241  01D8  0E71               	swapf	(??_sampling+1)^(0+-128),w
  1242  01D9  0083               	movwf	3
  1243  01DA  0EFE               	swapf	126,f
  1244  01DB  0E7E               	swapf	126,w
  1245  01DC  0009               	retfie
  1246  01DD                     __end_of_sampling:	
  1247  007E                     btemp	set	126	;btemp
  1248  007E                     wtemp0	set	126
  1249                           
  1250                           	psect	intentry
  1251  0004                     __pintentry:	
  1252                           ;incstack = 0
  1253                           ; Regs used in _sampling: [wreg+status,2+status,0]
  1254                           
  1255  0004                     interrupt_function:	
  1256  007E                     saved_w	set	btemp
  1257  0004  00FE               	movwf	btemp
  1258  0005  0E03               	swapf	3,w
  1259  0006  00F1               	movwf	??_sampling+1
  1260  0007  0804               	movf	4,w
  1261  0008  00F2               	movwf	??_sampling+2
  1262  0009  080A               	movf	10,w
  1263  000A  00F3               	movwf	??_sampling+3
  1264  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1265  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1266  000D  087F               	movf	btemp+1,w
  1267  000E  00F4               	movwf	??_sampling+4
  1268  000F  120A  118A  29BE   	ljmp	_sampling


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      8      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_beep
    _main->_rsend
    _main->_write
    _read_tmr1->_rsend

Critical Paths under _sampling in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _sampling in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _sampling in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _sampling in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _sampling in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     381
                                              6 COMMON     3     3      0
                                              5 BANK0      3     3      0
                               _beep
                          _read_tmr1
                              _rsend
                              _rsget
                              _write
 ---------------------------------------------------------------------------------
 (1) _write                                                1     1      0      66
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rsget                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_tmr1                                            0     0      0      22
                              _rsend
 ---------------------------------------------------------------------------------
 (1) _rsend                                                1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 6     6      0     114
                                              5 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _sampling                                             5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
   _read_tmr1
     _rsend
   _rsend
   _rsget
   _write

 _sampling (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      27      12        0.0%
ABS                  0      0      27       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Jan  3 14:28:37 2018

                      pc 0002              __CFG_CP$OFF 0000                       l72 0231  
                     l78 0238                       l87 0203                       _RC 003D  
                     fsr 0004                      l803 0209                      l905 011F  
                    l773 0194                      l861 008E                      l853 00D4  
                    l863 0097                      l865 00A5                      l859 0088  
                    l875 00C3                      l883 00EF                      l877 00D1  
                    l897 010E                      l889 012D                      _BUF 0020  
                    _BUZ 002D                      u205 01A1                      u317 0064  
                    _PR2 0092                      u407 01B2                      u327 0073  
                    u185 0177                      u337 0082             __CFG_CPD$OFF 0000  
                    u347 00B1                      u357 00F9                      u367 0108  
                    u377 017E                      u387 0188                      u397 01A8  
                    _PWM 001B                      _kT0 003C                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   _T0PS 003B                     _RCIF 0065                     _TMR0 0001  
                   _TMR1 000E                     _TXIF 0064             __CFG_WRT$OFF 0000  
                   _beep 0166                     _main 002A                     btemp 007E  
                   start 0012                    INTCON 000B                    ?_beep 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _T1CON 0010  
                  _T2CON 0012                    _T1ZOH 0039                    i1l815 01D1  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019                    _TXSTA 0098  
                  beep@j 0032                    _rsend 0230                    _rsget 0238  
                  main@x 0036                    _write 01F8           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_beep 01BE             __end_of_main 0166  
                 ??_beep 0075                   ??_main 0076                   _ADCON1 009F  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_rsend 0070  
                 ?_rsget 0070                   ?_write 0070                   _INTCON 000B  
                 _TMR0IF 005A           __CFG_PWRTE$OFF 0000         __end_of_sampling 01DD  
                 saved_w 007E  __end_of__initialization 0026           __pcstackCOMMON 0070  
           __pidataBANK0 020E            __end_of_rsend 0238            __end_of_rsget 023E  
          __end_of_write 020E                  ??_rsend 0075                  ??_rsget 0075  
                ??_write 0075               __pbssBANK0 0039       __size_of_read_tmr1 001B  
             __pmaintext 002A               __pintentry 0004                  _CCP1CON 0017  
                _CCP2CON 001D                ?_sampling 0070                  __ptext1 01F8  
                __ptext2 0238                  __ptext3 01DD                  __ptext4 0230  
                __ptext5 0166                  __ptext6 01BE        __end_of_read_tmr1 01F8  
                main@cmd 0038                  main@msg 0037     end_of_initialization 0026  
             ??_sampling 0070      start_initialization 0015               init_fetch0 021F  
            __pdataBANK0 0020                ___latbits 0002            __pcstackBANK0 0031  
      __size_of_sampling 001F                _read_tmr1 01DD           __size_of_rsend 0008  
         __size_of_rsget 0006           __size_of_write 0016        interrupt_function 0004  
             ?_read_tmr1 0070                 beep@j_57 0034                 beep@dash 0031  
          __size_of_beep 0058            __size_of_main 013C                 _sampling 01BE  
               init_ram0 0223              ??_read_tmr1 0076                 intlevel1 0000  
              write@duty 0075                 rsend@msg 0075               _OPTION_REG 0081  
